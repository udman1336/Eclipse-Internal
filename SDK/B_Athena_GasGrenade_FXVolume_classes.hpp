#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_Athena_GasGrenade_FXVolume

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass B_Athena_GasGrenade_FXVolume.B_Athena_GasGrenade_FXVolume_C
// 0x00D8 (0x03F0 - 0x0318)
class AB_Athena_GasGrenade_FXVolume_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0318(0x0008)(Transient, DuplicateTransient)
	class UParticleSystemComponent*               P_GasGrenade_InnerSmoke;                           // 0x0320(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  PostProcessComponent;                              // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       PostProcessParentShape;                            // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Audio_ReleaseSmoke;                                // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SmokeVolumeMesh;                                   // 0x0340(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         FadeSmokeTL_Float_025E191F4B87AB9F397708B9AE320879; // 0x0350(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            FadeSmokeTL__Direction_025E191F4B87AB9F397708B9AE320879; // 0x0354(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_355[0x3];                                      // 0x0355(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     FadeSmokeTL;                                       // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  SmokePP;                                           // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GasGrenadeLifespan;                                // 0x0368(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         GasGrenadeRadius;                                  // 0x036C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class AFortPawn*                              Pawn;                                              // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               SmokeVolumeMeshMID;                                // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GasFadeValue;                                      // 0x0380(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GasFadeInTime;                                     // 0x0384(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GasFadeOutTime;                                    // 0x0388(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GasDelayBeforeFadeIn;                              // 0x038C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AdjustedDistanceValue;                             // 0x0390(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PreviousAdjustedDistanceValue;                     // 0x0394(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PPEndFadeRadius;                                   // 0x0398(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PPStartFadeRadius;                                 // 0x039C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TickDistanceCheckInterval;                         // 0x03A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PreviousScopeValue;                                // 0x03A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A5[0x3];                                      // 0x03A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ScopeStateSwappedTime;                             // 0x03A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3AC[0x4];                                      // 0x03AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               PPGainColorMorning;                                // 0x03B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector4                               PPGainColorDay;                                    // 0x03C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector4                               PPGainColorEvening;                                // 0x03D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector4                               PPGainColorNight;                                  // 0x03E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_B_Athena_GasGrenade_FXVolume(int32 EntryPoint);
	void FadeOut();
	void FadeIn();
	void ReceiveBeginPlay();
	void FadeSmokeTL__UpdateFunc();
	void FadeSmokeTL__FinishedFunc();
	void UserConstructionScript();
	void AdjustedDistanceFromPlayerToPPVolumeCenter(float ScopeStateSwappedTime_0, float* DistanceOut, bool* bPlayerIsUsingScope);
	void GetPlayerPawn();
	void DistanceFromPlayerToPPVolumeCenter(float* Distance);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_Athena_GasGrenade_FXVolume_C">();
	}
	static class AB_Athena_GasGrenade_FXVolume_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AB_Athena_GasGrenade_FXVolume_C>();
	}
};
static_assert(alignof(AB_Athena_GasGrenade_FXVolume_C) == 0x000010, "Wrong alignment on AB_Athena_GasGrenade_FXVolume_C");
static_assert(sizeof(AB_Athena_GasGrenade_FXVolume_C) == 0x0003F0, "Wrong size on AB_Athena_GasGrenade_FXVolume_C");
static_assert(offsetof(AB_Athena_GasGrenade_FXVolume_C, UberGraphFrame) == 0x000318, "Member 'AB_Athena_GasGrenade_FXVolume_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AB_Athena_GasGrenade_FXVolume_C, P_GasGrenade_InnerSmoke) == 0x000320, "Member 'AB_Athena_GasGrenade_FXVolume_C::P_GasGrenade_InnerSmoke' has a wrong offset!");
static_assert(offsetof(AB_Athena_GasGrenade_FXVolume_C, PostProcessComponent) == 0x000328, "Member 'AB_Athena_GasGrenade_FXVolume_C::PostProcessComponent' has a wrong offset!");
static_assert(offsetof(AB_Athena_GasGrenade_FXVolume_C, PostProcessParentShape) == 0x000330, "Member 'AB_Athena_GasGrenade_FXVolume_C::PostProcessParentShape' has a wrong offset!");
static_assert(offsetof(AB_Athena_GasGrenade_FXVolume_C, Audio_ReleaseSmoke) == 0x000338, "Member 'AB_Athena_GasGrenade_FXVolume_C::Audio_ReleaseSmoke' has a wrong offset!");
static_assert(offsetof(AB_Athena_GasGrenade_FXVolume_C, SmokeVolumeMesh) == 0x000340, "Member 'AB_Athena_GasGrenade_FXVolume_C::SmokeVolumeMesh' has a wrong offset!");
static_assert(offsetof(AB_Athena_GasGrenade_FXVolume_C, DefaultSceneRoot) == 0x000348, "Member 'AB_Athena_GasGrenade_FXVolume_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AB_Athena_GasGrenade_FXVolume_C, FadeSmokeTL_Float_025E191F4B87AB9F397708B9AE320879) == 0x000350, "Member 'AB_Athena_GasGrenade_FXVolume_C::FadeSmokeTL_Float_025E191F4B87AB9F397708B9AE320879' has a wrong offset!");
static_assert(offsetof(AB_Athena_GasGrenade_FXVolume_C, FadeSmokeTL__Direction_025E191F4B87AB9F397708B9AE320879) == 0x000354, "Member 'AB_Athena_GasGrenade_FXVolume_C::FadeSmokeTL__Direction_025E191F4B87AB9F397708B9AE320879' has a wrong offset!");
static_assert(offsetof(AB_Athena_GasGrenade_FXVolume_C, FadeSmokeTL) == 0x000358, "Member 'AB_Athena_GasGrenade_FXVolume_C::FadeSmokeTL' has a wrong offset!");
static_assert(offsetof(AB_Athena_GasGrenade_FXVolume_C, SmokePP) == 0x000360, "Member 'AB_Athena_GasGrenade_FXVolume_C::SmokePP' has a wrong offset!");
static_assert(offsetof(AB_Athena_GasGrenade_FXVolume_C, GasGrenadeLifespan) == 0x000368, "Member 'AB_Athena_GasGrenade_FXVolume_C::GasGrenadeLifespan' has a wrong offset!");
static_assert(offsetof(AB_Athena_GasGrenade_FXVolume_C, GasGrenadeRadius) == 0x00036C, "Member 'AB_Athena_GasGrenade_FXVolume_C::GasGrenadeRadius' has a wrong offset!");
static_assert(offsetof(AB_Athena_GasGrenade_FXVolume_C, Pawn) == 0x000370, "Member 'AB_Athena_GasGrenade_FXVolume_C::Pawn' has a wrong offset!");
static_assert(offsetof(AB_Athena_GasGrenade_FXVolume_C, SmokeVolumeMeshMID) == 0x000378, "Member 'AB_Athena_GasGrenade_FXVolume_C::SmokeVolumeMeshMID' has a wrong offset!");
static_assert(offsetof(AB_Athena_GasGrenade_FXVolume_C, GasFadeValue) == 0x000380, "Member 'AB_Athena_GasGrenade_FXVolume_C::GasFadeValue' has a wrong offset!");
static_assert(offsetof(AB_Athena_GasGrenade_FXVolume_C, GasFadeInTime) == 0x000384, "Member 'AB_Athena_GasGrenade_FXVolume_C::GasFadeInTime' has a wrong offset!");
static_assert(offsetof(AB_Athena_GasGrenade_FXVolume_C, GasFadeOutTime) == 0x000388, "Member 'AB_Athena_GasGrenade_FXVolume_C::GasFadeOutTime' has a wrong offset!");
static_assert(offsetof(AB_Athena_GasGrenade_FXVolume_C, GasDelayBeforeFadeIn) == 0x00038C, "Member 'AB_Athena_GasGrenade_FXVolume_C::GasDelayBeforeFadeIn' has a wrong offset!");
static_assert(offsetof(AB_Athena_GasGrenade_FXVolume_C, AdjustedDistanceValue) == 0x000390, "Member 'AB_Athena_GasGrenade_FXVolume_C::AdjustedDistanceValue' has a wrong offset!");
static_assert(offsetof(AB_Athena_GasGrenade_FXVolume_C, PreviousAdjustedDistanceValue) == 0x000394, "Member 'AB_Athena_GasGrenade_FXVolume_C::PreviousAdjustedDistanceValue' has a wrong offset!");
static_assert(offsetof(AB_Athena_GasGrenade_FXVolume_C, PPEndFadeRadius) == 0x000398, "Member 'AB_Athena_GasGrenade_FXVolume_C::PPEndFadeRadius' has a wrong offset!");
static_assert(offsetof(AB_Athena_GasGrenade_FXVolume_C, PPStartFadeRadius) == 0x00039C, "Member 'AB_Athena_GasGrenade_FXVolume_C::PPStartFadeRadius' has a wrong offset!");
static_assert(offsetof(AB_Athena_GasGrenade_FXVolume_C, TickDistanceCheckInterval) == 0x0003A0, "Member 'AB_Athena_GasGrenade_FXVolume_C::TickDistanceCheckInterval' has a wrong offset!");
static_assert(offsetof(AB_Athena_GasGrenade_FXVolume_C, PreviousScopeValue) == 0x0003A4, "Member 'AB_Athena_GasGrenade_FXVolume_C::PreviousScopeValue' has a wrong offset!");
static_assert(offsetof(AB_Athena_GasGrenade_FXVolume_C, ScopeStateSwappedTime) == 0x0003A8, "Member 'AB_Athena_GasGrenade_FXVolume_C::ScopeStateSwappedTime' has a wrong offset!");
static_assert(offsetof(AB_Athena_GasGrenade_FXVolume_C, PPGainColorMorning) == 0x0003B0, "Member 'AB_Athena_GasGrenade_FXVolume_C::PPGainColorMorning' has a wrong offset!");
static_assert(offsetof(AB_Athena_GasGrenade_FXVolume_C, PPGainColorDay) == 0x0003C0, "Member 'AB_Athena_GasGrenade_FXVolume_C::PPGainColorDay' has a wrong offset!");
static_assert(offsetof(AB_Athena_GasGrenade_FXVolume_C, PPGainColorEvening) == 0x0003D0, "Member 'AB_Athena_GasGrenade_FXVolume_C::PPGainColorEvening' has a wrong offset!");
static_assert(offsetof(AB_Athena_GasGrenade_FXVolume_C, PPGainColorNight) == 0x0003E0, "Member 'AB_Athena_GasGrenade_FXVolume_C::PPGainColorNight' has a wrong offset!");

}

