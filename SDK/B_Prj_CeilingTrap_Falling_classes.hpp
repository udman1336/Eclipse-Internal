#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_Prj_CeilingTrap_Falling

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass B_Prj_CeilingTrap_Falling.B_Prj_CeilingTrap_Falling_C
// 0x0048 (0x0868 - 0x0820)
class AB_Prj_CeilingTrap_Falling_C final : public AFortProjectileFallingTrap
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0820(0x0008)(Transient, DuplicateTransient)
	class USphereComponent*                       Sphere;                                            // 0x0828(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class UStaticMesh*>                    MeshTypes;                                         // 0x0830(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	bool                                          bActive;                                           // 0x0840(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_841[0x3];                                      // 0x0841(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PrevBounceLocation;                                // 0x0844(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinBounceDistanceSquared;                          // 0x0850(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PrevBounceTime;                                    // 0x0854(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinBounceTime;                                     // 0x0858(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinVelocitySquared;                                // 0x085C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bExploded;                                         // 0x0860(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)

public:
	void ExecuteUbergraph_B_Prj_CeilingTrap_Falling(int32 EntryPoint);
	void DestroyTire();
	void CheckTireDestruction(const struct FVector& CurrentVelocity);
	void ReceiveBeginPlay();
	void BindOverlap();
	void Overlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnBounce(const struct FHitResult& Hit);
	void UserConstructionScript();
	struct FVector RandomDirection(const struct FVector& InVec);
	void OnRep_bExploded();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_Prj_CeilingTrap_Falling_C">();
	}
	static class AB_Prj_CeilingTrap_Falling_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AB_Prj_CeilingTrap_Falling_C>();
	}
};
static_assert(alignof(AB_Prj_CeilingTrap_Falling_C) == 0x000008, "Wrong alignment on AB_Prj_CeilingTrap_Falling_C");
static_assert(sizeof(AB_Prj_CeilingTrap_Falling_C) == 0x000868, "Wrong size on AB_Prj_CeilingTrap_Falling_C");
static_assert(offsetof(AB_Prj_CeilingTrap_Falling_C, UberGraphFrame) == 0x000820, "Member 'AB_Prj_CeilingTrap_Falling_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AB_Prj_CeilingTrap_Falling_C, Sphere) == 0x000828, "Member 'AB_Prj_CeilingTrap_Falling_C::Sphere' has a wrong offset!");
static_assert(offsetof(AB_Prj_CeilingTrap_Falling_C, MeshTypes) == 0x000830, "Member 'AB_Prj_CeilingTrap_Falling_C::MeshTypes' has a wrong offset!");
static_assert(offsetof(AB_Prj_CeilingTrap_Falling_C, bActive) == 0x000840, "Member 'AB_Prj_CeilingTrap_Falling_C::bActive' has a wrong offset!");
static_assert(offsetof(AB_Prj_CeilingTrap_Falling_C, PrevBounceLocation) == 0x000844, "Member 'AB_Prj_CeilingTrap_Falling_C::PrevBounceLocation' has a wrong offset!");
static_assert(offsetof(AB_Prj_CeilingTrap_Falling_C, MinBounceDistanceSquared) == 0x000850, "Member 'AB_Prj_CeilingTrap_Falling_C::MinBounceDistanceSquared' has a wrong offset!");
static_assert(offsetof(AB_Prj_CeilingTrap_Falling_C, PrevBounceTime) == 0x000854, "Member 'AB_Prj_CeilingTrap_Falling_C::PrevBounceTime' has a wrong offset!");
static_assert(offsetof(AB_Prj_CeilingTrap_Falling_C, MinBounceTime) == 0x000858, "Member 'AB_Prj_CeilingTrap_Falling_C::MinBounceTime' has a wrong offset!");
static_assert(offsetof(AB_Prj_CeilingTrap_Falling_C, MinVelocitySquared) == 0x00085C, "Member 'AB_Prj_CeilingTrap_Falling_C::MinVelocitySquared' has a wrong offset!");
static_assert(offsetof(AB_Prj_CeilingTrap_Falling_C, bExploded) == 0x000860, "Member 'AB_Prj_CeilingTrap_Falling_C::bExploded' has a wrong offset!");

}

