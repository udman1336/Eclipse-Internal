#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ShielderSpringArm

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass ShielderSpringArm.ShielderSpringArm_C
// 0x0080 (0x0398 - 0x0318)
class AShielderSpringArm_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0318(0x0008)(Transient, DuplicateTransient)
	class UArrowComponent*                        ShielderAttachArrow;                               // 0x0320(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_ShielderSphere;                                  // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        SphereOffset;                                      // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       SpringArmProbeSizeDebugSphere;                     // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    SpringArm;                                         // 0x0340(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        SpringArmRotationArrow;                            // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          Debug;                                             // 0x0358(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_359[0x3];                                      // 0x0359(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ShielderInterpSpeedToNewSpringArmLocation;         // 0x035C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPawn*                              AttachPawn;                                        // 0x0360(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FVector                                ShieldScaleFactor;                                 // 0x0368(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_374[0x4];                                      // 0x0374(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AShielderPawn_C*                        Shielder;                                          // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               ShieldMID;                                         // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_Super_Shielder;                                 // 0x0388(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_389[0x7];                                      // 0x0389(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               Beam_Emitter;                                      // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_ShielderSpringArm(int32 EntryPoint);
	void Beam_Spawn(class AActor* Origin);
	void Beam_Removal();
	void ReceiveDestroyed();
	void HitFlashFX();
	void ReceiveTick(float DeltaSeconds);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ShielderSpringArm_C">();
	}
	static class AShielderSpringArm_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AShielderSpringArm_C>();
	}
};
static_assert(alignof(AShielderSpringArm_C) == 0x000008, "Wrong alignment on AShielderSpringArm_C");
static_assert(sizeof(AShielderSpringArm_C) == 0x000398, "Wrong size on AShielderSpringArm_C");
static_assert(offsetof(AShielderSpringArm_C, UberGraphFrame) == 0x000318, "Member 'AShielderSpringArm_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AShielderSpringArm_C, ShielderAttachArrow) == 0x000320, "Member 'AShielderSpringArm_C::ShielderAttachArrow' has a wrong offset!");
static_assert(offsetof(AShielderSpringArm_C, P_ShielderSphere) == 0x000328, "Member 'AShielderSpringArm_C::P_ShielderSphere' has a wrong offset!");
static_assert(offsetof(AShielderSpringArm_C, SphereOffset) == 0x000330, "Member 'AShielderSpringArm_C::SphereOffset' has a wrong offset!");
static_assert(offsetof(AShielderSpringArm_C, SpringArmProbeSizeDebugSphere) == 0x000338, "Member 'AShielderSpringArm_C::SpringArmProbeSizeDebugSphere' has a wrong offset!");
static_assert(offsetof(AShielderSpringArm_C, SpringArm) == 0x000340, "Member 'AShielderSpringArm_C::SpringArm' has a wrong offset!");
static_assert(offsetof(AShielderSpringArm_C, SpringArmRotationArrow) == 0x000348, "Member 'AShielderSpringArm_C::SpringArmRotationArrow' has a wrong offset!");
static_assert(offsetof(AShielderSpringArm_C, DefaultSceneRoot) == 0x000350, "Member 'AShielderSpringArm_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AShielderSpringArm_C, Debug) == 0x000358, "Member 'AShielderSpringArm_C::Debug' has a wrong offset!");
static_assert(offsetof(AShielderSpringArm_C, ShielderInterpSpeedToNewSpringArmLocation) == 0x00035C, "Member 'AShielderSpringArm_C::ShielderInterpSpeedToNewSpringArmLocation' has a wrong offset!");
static_assert(offsetof(AShielderSpringArm_C, AttachPawn) == 0x000360, "Member 'AShielderSpringArm_C::AttachPawn' has a wrong offset!");
static_assert(offsetof(AShielderSpringArm_C, ShieldScaleFactor) == 0x000368, "Member 'AShielderSpringArm_C::ShieldScaleFactor' has a wrong offset!");
static_assert(offsetof(AShielderSpringArm_C, Shielder) == 0x000378, "Member 'AShielderSpringArm_C::Shielder' has a wrong offset!");
static_assert(offsetof(AShielderSpringArm_C, ShieldMID) == 0x000380, "Member 'AShielderSpringArm_C::ShieldMID' has a wrong offset!");
static_assert(offsetof(AShielderSpringArm_C, Is_Super_Shielder) == 0x000388, "Member 'AShielderSpringArm_C::Is_Super_Shielder' has a wrong offset!");
static_assert(offsetof(AShielderSpringArm_C, Beam_Emitter) == 0x000390, "Member 'AShielderSpringArm_C::Beam_Emitter' has a wrong offset!");

}

