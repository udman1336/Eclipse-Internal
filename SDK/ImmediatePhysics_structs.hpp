#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ImmediatePhysics

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"


namespace SDK
{

// Enum ImmediatePhysics.ESimulationSpace
// NumValues: 0x0004
enum class ESimulationSpace : uint32
{
	ComponentSpace                           = 0,
	WorldSpace                               = 1,
	RootBoneSpace                            = 2,
	ESimulationSpace_MAX                     = 3,
};

// ScriptStruct ImmediatePhysics.AnimNode_RigidBody
// 0x0430 (0x0520 - 0x00F0)
struct alignas(0x10) FAnimNode_RigidBody final : public FAnimNode_SkeletalControlBase
{
public:
	class UPhysicsAsset*                          OverridePhysicsAsset;                              // 0x00F0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OverrideWorldGravity;                              // 0x00F8(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ExternalForce;                                     // 0x0104(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ComponentLinearAccScale;                           // 0x0110(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ComponentLinearVelScale;                           // 0x011C(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ComponentAppliedLinearAccClamp;                    // 0x0128(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             OverlapChannel;                                    // 0x0134(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableWorldGeometry;                              // 0x0135(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_136[0x2];                                      // 0x0136(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	ESimulationSpace                              SimulationSpace;                                   // 0x0138(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideWorldGravity;                             // 0x013C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13D[0x3];                                      // 0x013D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CachedBoundsScale;                                 // 0x0140(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTransferBoneVelocities;                           // 0x0144(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFreezeIncomingPoseOnStart;                        // 0x0145(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bComponentSpaceSimulation;                         // 0x0146(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_147[0x3D9];                                    // 0x0147(0x03D9)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_RigidBody) == 0x000010, "Wrong alignment on FAnimNode_RigidBody");
static_assert(sizeof(FAnimNode_RigidBody) == 0x000520, "Wrong size on FAnimNode_RigidBody");
static_assert(offsetof(FAnimNode_RigidBody, OverridePhysicsAsset) == 0x0000F0, "Member 'FAnimNode_RigidBody::OverridePhysicsAsset' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBody, OverrideWorldGravity) == 0x0000F8, "Member 'FAnimNode_RigidBody::OverrideWorldGravity' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBody, ExternalForce) == 0x000104, "Member 'FAnimNode_RigidBody::ExternalForce' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBody, ComponentLinearAccScale) == 0x000110, "Member 'FAnimNode_RigidBody::ComponentLinearAccScale' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBody, ComponentLinearVelScale) == 0x00011C, "Member 'FAnimNode_RigidBody::ComponentLinearVelScale' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBody, ComponentAppliedLinearAccClamp) == 0x000128, "Member 'FAnimNode_RigidBody::ComponentAppliedLinearAccClamp' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBody, OverlapChannel) == 0x000134, "Member 'FAnimNode_RigidBody::OverlapChannel' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBody, bEnableWorldGeometry) == 0x000135, "Member 'FAnimNode_RigidBody::bEnableWorldGeometry' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBody, SimulationSpace) == 0x000138, "Member 'FAnimNode_RigidBody::SimulationSpace' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBody, bOverrideWorldGravity) == 0x00013C, "Member 'FAnimNode_RigidBody::bOverrideWorldGravity' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBody, CachedBoundsScale) == 0x000140, "Member 'FAnimNode_RigidBody::CachedBoundsScale' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBody, bTransferBoneVelocities) == 0x000144, "Member 'FAnimNode_RigidBody::bTransferBoneVelocities' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBody, bFreezeIncomingPoseOnStart) == 0x000145, "Member 'FAnimNode_RigidBody::bFreezeIncomingPoseOnStart' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBody, bComponentSpaceSimulation) == 0x000146, "Member 'FAnimNode_RigidBody::bComponentSpaceSimulation' has a wrong offset!");

}

