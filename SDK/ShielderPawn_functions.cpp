#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ShielderPawn

#include "Basic.hpp"

#include "ShielderPawn_classes.hpp"
#include "ShielderPawn_parameters.hpp"


namespace SDK
{

// Function ShielderPawn.ShielderPawn_C.ExecuteUbergraph_ShielderPawn
// (HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AShielderPawn_C::ExecuteUbergraph_ShielderPawn(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShielderPawn_C", "ExecuteUbergraph_ShielderPawn");

	Params::ShielderPawn_C_ExecuteUbergraph_ShielderPawn Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ShielderPawn.ShielderPawn_C.ReceiveEndPlay
// (Event, Public, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AShielderPawn_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShielderPawn_C", "ReceiveEndPlay");

	Params::ShielderPawn_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ShielderPawn.ShielderPawn_C.InvisibleOrphanTick
// (BlueprintCallable, BlueprintEvent)

void AShielderPawn_C::InvisibleOrphanTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShielderPawn_C", "InvisibleOrphanTick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ShielderPawn.ShielderPawn_C.AdditiveHitReactDelay
// (BlueprintCallable, BlueprintEvent)

void AShielderPawn_C::AdditiveHitReactDelay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShielderPawn_C", "AdditiveHitReactDelay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ShielderPawn.ShielderPawn_C.RotateShielderForward
// (BlueprintCallable, BlueprintEvent)

void AShielderPawn_C::RotateShielderForward()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShielderPawn_C", "RotateShielderForward");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ShielderPawn.ShielderPawn_C.InterpShielderToSpringArm
// (BlueprintCallable, BlueprintEvent)

void AShielderPawn_C::InterpShielderToSpringArm()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShielderPawn_C", "InterpShielderToSpringArm");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ShielderPawn.ShielderPawn_C.UnBindProxOverlap
// (BlueprintCallable, BlueprintEvent)

void AShielderPawn_C::UnBindProxOverlap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShielderPawn_C", "UnBindProxOverlap");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ShielderPawn.ShielderPawn_C.BindProxOverlap
// (BlueprintCallable, BlueprintEvent)

void AShielderPawn_C::BindProxOverlap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShielderPawn_C", "BindProxOverlap");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ShielderPawn.ShielderPawn_C.OrphanForceKillTimer
// (BlueprintCallable, BlueprintEvent)

void AShielderPawn_C::OrphanForceKillTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShielderPawn_C", "OrphanForceKillTimer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ShielderPawn.ShielderPawn_C.AttachPawnDead
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Despawn                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AShielderPawn_C::AttachPawnDead(bool Despawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShielderPawn_C", "AttachPawnDead");

	Params::ShielderPawn_C_AttachPawnDead Parms{};

	Parms.Despawn = Despawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ShielderPawn.ShielderPawn_C.AnimateSpringArm
// (BlueprintCallable, BlueprintEvent)

void AShielderPawn_C::AnimateSpringArm()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShielderPawn_C", "AnimateSpringArm");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ShielderPawn.ShielderPawn_C.ShielderShieldBroken
// (BlueprintCallable, BlueprintEvent)

void AShielderPawn_C::ShielderShieldBroken()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShielderPawn_C", "ShielderShieldBroken");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ShielderPawn.ShielderPawn_C.OnComponentEndOverlap
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AShielderPawn_C::OnComponentEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShielderPawn_C", "OnComponentEndOverlap");

	Params::ShielderPawn_C_OnComponentEndOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ShielderPawn.ShielderPawn_C.UnBindEncounterSpawn
// (BlueprintCallable, BlueprintEvent)

void AShielderPawn_C::UnBindEncounterSpawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShielderPawn_C", "UnBindEncounterSpawn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ShielderPawn.ShielderPawn_C.ReApplyShield
// (BlueprintCallable, BlueprintEvent)

void AShielderPawn_C::ReApplyShield()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShielderPawn_C", "ReApplyShield");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ShielderPawn.ShielderPawn_C.BindEncounterSpawn
// (BlueprintCallable, BlueprintEvent)

void AShielderPawn_C::BindEncounterSpawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShielderPawn_C", "BindEncounterSpawn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ShielderPawn.ShielderPawn_C.AttachShielderToPotentialAttachPawn
// (BlueprintCallable, BlueprintEvent)

void AShielderPawn_C::AttachShielderToPotentialAttachPawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShielderPawn_C", "AttachShielderToPotentialAttachPawn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ShielderPawn.ShielderPawn_C.GrabRandomPotentialAttachPawn
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    HiddenAttach                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AShielderPawn_C::GrabRandomPotentialAttachPawn(bool HiddenAttach)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShielderPawn_C", "GrabRandomPotentialAttachPawn");

	Params::ShielderPawn_C_GrabRandomPotentialAttachPawn Parms{};

	Parms.HiddenAttach = HiddenAttach;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ShielderPawn.ShielderPawn_C.PostSpawnIn
// (BlueprintCallable, BlueprintEvent)

void AShielderPawn_C::PostSpawnIn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShielderPawn_C", "PostSpawnIn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ShielderPawn.ShielderPawn_C.VerifyPotentialAttachPawnIsValidAndAttachToIt
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AFortPawn*                        PotentialAttachPawn_0                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    HiddenAttach                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AShielderPawn_C::VerifyPotentialAttachPawnIsValidAndAttachToIt(class AFortPawn* PotentialAttachPawn_0, bool HiddenAttach)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShielderPawn_C", "VerifyPotentialAttachPawnIsValidAndAttachToIt");

	Params::ShielderPawn_C_VerifyPotentialAttachPawnIsValidAndAttachToIt Parms{};

	Parms.PotentialAttachPawn_0 = PotentialAttachPawn_0;
	Parms.HiddenAttach = HiddenAttach;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ShielderPawn.ShielderPawn_C.OnComponentBeginOverlap
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FHitResult                       SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void AShielderPawn_C::OnComponentBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShielderPawn_C", "OnComponentBeginOverlap");

	Params::ShielderPawn_C_OnComponentBeginOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ShielderPawn.ShielderPawn_C.SetShielderOrphanStatus
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_Orphaned_0                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    GiveZVelocityOnDetach                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FString                           Reason                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void AShielderPawn_C::SetShielderOrphanStatus(bool Param_Orphaned_0, bool GiveZVelocityOnDetach, const class FString& Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShielderPawn_C", "SetShielderOrphanStatus");

	Params::ShielderPawn_C_SetShielderOrphanStatus Parms{};

	Parms.Param_Orphaned_0 = Param_Orphaned_0;
	Parms.GiveZVelocityOnDetach = GiveZVelocityOnDetach;
	Parms.Reason = std::move(Reason);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ShielderPawn.ShielderPawn_C.OnEncounterEnemySpawned
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UFortAIEncounterInfo*             Encounter                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AFortAIPawn*                      SpawnedEnemy                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AShielderPawn_C::OnEncounterEnemySpawned(class UFortAIEncounterInfo* Encounter, class AFortAIPawn* SpawnedEnemy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShielderPawn_C", "OnEncounterEnemySpawned");

	Params::ShielderPawn_C_OnEncounterEnemySpawned Parms{};

	Parms.Encounter = Encounter;
	Parms.SpawnedEnemy = SpawnedEnemy;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ShielderPawn.ShielderPawn_C.ShielderAttachComplete
// (BlueprintCallable, BlueprintEvent)

void AShielderPawn_C::ShielderAttachComplete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShielderPawn_C", "ShielderAttachComplete");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ShielderPawn.ShielderPawn_C.OnDeathServer
// (BlueprintAuthorityOnly, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// float                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTagContainer            DamageTags                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FVector                          Momentum                                               (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       HitInfo                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// class AController*                      InstigatedBy                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           DamageCauser                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGameplayEffectContextHandle     EffectContext                                          (BlueprintVisible, BlueprintReadOnly, Parm)

void AShielderPawn_C::OnDeathServer(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShielderPawn_C", "OnDeathServer");

	Params::ShielderPawn_C_OnDeathServer Parms{};

	Parms.Damage = Damage;
	Parms.DamageTags = std::move(DamageTags);
	Parms.Momentum = std::move(Momentum);
	Parms.HitInfo = std::move(HitInfo);
	Parms.InstigatedBy = InstigatedBy;
	Parms.DamageCauser = DamageCauser;
	Parms.EffectContext = std::move(EffectContext);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ShielderPawn.ShielderPawn_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void AShielderPawn_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShielderPawn_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ShielderPawn.ShielderPawn_C.OnKnockedback
// (BlueprintCallable, BlueprintEvent)

void AShielderPawn_C::OnKnockedback()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShielderPawn_C", "OnKnockedback");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ShielderPawn.ShielderPawn_C.OnDamageServer
// (BlueprintAuthorityOnly, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// float                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTagContainer            DamageTags                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FVector                          Momentum                                               (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       HitInfo                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// class AController*                      InstigatedBy                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           DamageCauser                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGameplayEffectContextHandle     EffectContext                                          (BlueprintVisible, BlueprintReadOnly, Parm)

void AShielderPawn_C::OnDamageServer(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShielderPawn_C", "OnDamageServer");

	Params::ShielderPawn_C_OnDamageServer Parms{};

	Parms.Damage = Damage;
	Parms.DamageTags = std::move(DamageTags);
	Parms.Momentum = std::move(Momentum);
	Parms.HitInfo = std::move(HitInfo);
	Parms.InstigatedBy = InstigatedBy;
	Parms.DamageCauser = DamageCauser;
	Parms.EffectContext = std::move(EffectContext);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ShielderPawn.ShielderPawn_C.OnStunned
// (BlueprintAuthorityOnly, Event, Public, BlueprintCallable, BlueprintEvent)

void AShielderPawn_C::OnStunned()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShielderPawn_C", "OnStunned");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ShielderPawn.ShielderPawn_C.RotateShielder__UpdateFunc
// (BlueprintEvent)

void AShielderPawn_C::RotateShielder__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShielderPawn_C", "RotateShielder__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ShielderPawn.ShielderPawn_C.RotateShielder__FinishedFunc
// (BlueprintEvent)

void AShielderPawn_C::RotateShielder__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShielderPawn_C", "RotateShielder__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ShielderPawn.ShielderPawn_C.InterpShielderToNewLocation__UpdateFunc
// (BlueprintEvent)

void AShielderPawn_C::InterpShielderToNewLocation__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShielderPawn_C", "InterpShielderToNewLocation__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ShielderPawn.ShielderPawn_C.InterpShielderToNewLocation__FinishedFunc
// (BlueprintEvent)

void AShielderPawn_C::InterpShielderToNewLocation__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShielderPawn_C", "InterpShielderToNewLocation__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ShielderPawn.ShielderPawn_C.OnRep_SpringArmTargetRotation
// (HasDefaults, BlueprintCallable, BlueprintEvent)

void AShielderPawn_C::OnRep_SpringArmTargetRotation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShielderPawn_C", "OnRep_SpringArmTargetRotation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ShielderPawn.ShielderPawn_C.AttachSpringArmToAttachPawn
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AShielderPawn_C::AttachSpringArmToAttachPawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShielderPawn_C", "AttachSpringArmToAttachPawn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ShielderPawn.ShielderPawn_C.AttachShielderToSpringArm
// (Public, BlueprintCallable, BlueprintEvent)

void AShielderPawn_C::AttachShielderToSpringArm()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShielderPawn_C", "AttachShielderToSpringArm");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ShielderPawn.ShielderPawn_C.OnRep_ShielderVisible
// (BlueprintCallable, BlueprintEvent)

void AShielderPawn_C::OnRep_ShielderVisible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShielderPawn_C", "OnRep_ShielderVisible");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ShielderPawn.ShielderPawn_C.DebugLineAndSphere
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Line                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FLinearColor                     LineColor                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Sphere                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FLinearColor                     SphereColor                                            (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   VisibilityOffset                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AShielderPawn_C::DebugLineAndSphere(bool Line, const struct FLinearColor& LineColor, bool Sphere, const struct FLinearColor& SphereColor, float VisibilityOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShielderPawn_C", "DebugLineAndSphere");

	Params::ShielderPawn_C_DebugLineAndSphere Parms{};

	Parms.Line = Line;
	Parms.LineColor = std::move(LineColor);
	Parms.Sphere = Sphere;
	Parms.SphereColor = std::move(SphereColor);
	Parms.VisibilityOffset = VisibilityOffset;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ShielderPawn.ShielderPawn_C.OnRep_ShielderSpringArm
// (HasDefaults, BlueprintCallable, BlueprintEvent)

void AShielderPawn_C::OnRep_ShielderSpringArm()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShielderPawn_C", "OnRep_ShielderSpringArm");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ShielderPawn.ShielderPawn_C.GameTimeString
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FString                           NewParam                                               (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void AShielderPawn_C::GameTimeString(class FString* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShielderPawn_C", "GameTimeString");

	Params::ShielderPawn_C_GameTimeString Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = std::move(Parms.NewParam);
}


// Function ShielderPawn.ShielderPawn_C.ApplyShield
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AShielderPawn_C::ApplyShield()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShielderPawn_C", "ApplyShield");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ShielderPawn.ShielderPawn_C.UpdateShieldFXVisibility
// (Public, BlueprintCallable, BlueprintEvent)

void AShielderPawn_C::UpdateShieldFXVisibility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShielderPawn_C", "UpdateShieldFXVisibility");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ShielderPawn.ShielderPawn_C.OnRep_bShieldApplied
// (HasDefaults, BlueprintCallable, BlueprintEvent)

void AShielderPawn_C::OnRep_bShieldApplied()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShielderPawn_C", "OnRep_bShieldApplied");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ShielderPawn.ShielderPawn_C.SetMiniMapIconStatus
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AShielderPawn_C::SetMiniMapIconStatus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShielderPawn_C", "SetMiniMapIconStatus");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ShielderPawn.ShielderPawn_C.RemoveShield
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           RemoveShieldFrom                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AShielderPawn_C::RemoveShield(class AActor* RemoveShieldFrom)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShielderPawn_C", "RemoveShield");

	Params::ShielderPawn_C_RemoveShield Parms{};

	Parms.RemoveShieldFrom = RemoveShieldFrom;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ShielderPawn.ShielderPawn_C.SpawnSuperShielderBGA
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AShielderPawn_C::SpawnSuperShielderBGA()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShielderPawn_C", "SpawnSuperShielderBGA");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ShielderPawn.ShielderPawn_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AShielderPawn_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShielderPawn_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ShielderPawn.ShielderPawn_C.Orphaned
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsOrphaned                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class AFortPawn*                        AttachedPawn                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AShielderPawn_C::Orphaned(bool* IsOrphaned, class AFortPawn** AttachedPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShielderPawn_C", "Orphaned");

	Params::ShielderPawn_C_Orphaned Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsOrphaned != nullptr)
		*IsOrphaned = Parms.IsOrphaned;

	if (AttachedPawn != nullptr)
		*AttachedPawn = Parms.AttachedPawn;
}

}

