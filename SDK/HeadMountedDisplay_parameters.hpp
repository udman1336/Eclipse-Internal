#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HeadMountedDisplay

#include "Basic.hpp"

#include "HeadMountedDisplay_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "InputCore_structs.hpp"


namespace SDK::Params
{

// Function HeadMountedDisplay.HeadMountedDisplayFunctionLibrary.AddDeviceVisualizationComponent
// 0x0060 (0x0060 - 0x0000)
struct HeadMountedDisplayFunctionLibrary_AddDeviceVisualizationComponent final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FXRDeviceId                            XRDeviceId;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bManualAttachment;                                 // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RelativeTransform;                                 // 0x0020(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    ReturnValue;                                       // 0x0050(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x8];                                       // 0x0058(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HeadMountedDisplayFunctionLibrary_AddDeviceVisualizationComponent) == 0x000010, "Wrong alignment on HeadMountedDisplayFunctionLibrary_AddDeviceVisualizationComponent");
static_assert(sizeof(HeadMountedDisplayFunctionLibrary_AddDeviceVisualizationComponent) == 0x000060, "Wrong size on HeadMountedDisplayFunctionLibrary_AddDeviceVisualizationComponent");
static_assert(offsetof(HeadMountedDisplayFunctionLibrary_AddDeviceVisualizationComponent, Target) == 0x000000, "Member 'HeadMountedDisplayFunctionLibrary_AddDeviceVisualizationComponent::Target' has a wrong offset!");
static_assert(offsetof(HeadMountedDisplayFunctionLibrary_AddDeviceVisualizationComponent, XRDeviceId) == 0x000008, "Member 'HeadMountedDisplayFunctionLibrary_AddDeviceVisualizationComponent::XRDeviceId' has a wrong offset!");
static_assert(offsetof(HeadMountedDisplayFunctionLibrary_AddDeviceVisualizationComponent, bManualAttachment) == 0x000018, "Member 'HeadMountedDisplayFunctionLibrary_AddDeviceVisualizationComponent::bManualAttachment' has a wrong offset!");
static_assert(offsetof(HeadMountedDisplayFunctionLibrary_AddDeviceVisualizationComponent, RelativeTransform) == 0x000020, "Member 'HeadMountedDisplayFunctionLibrary_AddDeviceVisualizationComponent::RelativeTransform' has a wrong offset!");
static_assert(offsetof(HeadMountedDisplayFunctionLibrary_AddDeviceVisualizationComponent, ReturnValue) == 0x000050, "Member 'HeadMountedDisplayFunctionLibrary_AddDeviceVisualizationComponent::ReturnValue' has a wrong offset!");

// Function HeadMountedDisplay.HeadMountedDisplayFunctionLibrary.EnableHMD
// 0x0002 (0x0002 - 0x0000)
struct HeadMountedDisplayFunctionLibrary_EnableHMD final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeadMountedDisplayFunctionLibrary_EnableHMD) == 0x000001, "Wrong alignment on HeadMountedDisplayFunctionLibrary_EnableHMD");
static_assert(sizeof(HeadMountedDisplayFunctionLibrary_EnableHMD) == 0x000002, "Wrong size on HeadMountedDisplayFunctionLibrary_EnableHMD");
static_assert(offsetof(HeadMountedDisplayFunctionLibrary_EnableHMD, bEnable) == 0x000000, "Member 'HeadMountedDisplayFunctionLibrary_EnableHMD::bEnable' has a wrong offset!");
static_assert(offsetof(HeadMountedDisplayFunctionLibrary_EnableHMD, ReturnValue) == 0x000001, "Member 'HeadMountedDisplayFunctionLibrary_EnableHMD::ReturnValue' has a wrong offset!");

// Function HeadMountedDisplay.HeadMountedDisplayFunctionLibrary.EnableLowPersistenceMode
// 0x0001 (0x0001 - 0x0000)
struct HeadMountedDisplayFunctionLibrary_EnableLowPersistenceMode final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeadMountedDisplayFunctionLibrary_EnableLowPersistenceMode) == 0x000001, "Wrong alignment on HeadMountedDisplayFunctionLibrary_EnableLowPersistenceMode");
static_assert(sizeof(HeadMountedDisplayFunctionLibrary_EnableLowPersistenceMode) == 0x000001, "Wrong size on HeadMountedDisplayFunctionLibrary_EnableLowPersistenceMode");
static_assert(offsetof(HeadMountedDisplayFunctionLibrary_EnableLowPersistenceMode, bEnable) == 0x000000, "Member 'HeadMountedDisplayFunctionLibrary_EnableLowPersistenceMode::bEnable' has a wrong offset!");

// Function HeadMountedDisplay.HeadMountedDisplayFunctionLibrary.EnumerateTrackedDevices
// 0x0020 (0x0020 - 0x0000)
struct HeadMountedDisplayFunctionLibrary_EnumerateTrackedDevices final
{
public:
	class FName                                   SystemId;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EXRTrackedDeviceType                          DeviceType;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FXRDeviceId>                    ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeadMountedDisplayFunctionLibrary_EnumerateTrackedDevices) == 0x000008, "Wrong alignment on HeadMountedDisplayFunctionLibrary_EnumerateTrackedDevices");
static_assert(sizeof(HeadMountedDisplayFunctionLibrary_EnumerateTrackedDevices) == 0x000020, "Wrong size on HeadMountedDisplayFunctionLibrary_EnumerateTrackedDevices");
static_assert(offsetof(HeadMountedDisplayFunctionLibrary_EnumerateTrackedDevices, SystemId) == 0x000000, "Member 'HeadMountedDisplayFunctionLibrary_EnumerateTrackedDevices::SystemId' has a wrong offset!");
static_assert(offsetof(HeadMountedDisplayFunctionLibrary_EnumerateTrackedDevices, DeviceType) == 0x000008, "Member 'HeadMountedDisplayFunctionLibrary_EnumerateTrackedDevices::DeviceType' has a wrong offset!");
static_assert(offsetof(HeadMountedDisplayFunctionLibrary_EnumerateTrackedDevices, ReturnValue) == 0x000010, "Member 'HeadMountedDisplayFunctionLibrary_EnumerateTrackedDevices::ReturnValue' has a wrong offset!");

// Function HeadMountedDisplay.HeadMountedDisplayFunctionLibrary.GetDevicePose
// 0x0030 (0x0030 - 0x0000)
struct HeadMountedDisplayFunctionLibrary_GetDevicePose final
{
public:
	struct FXRDeviceId                            XRDeviceId;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsTracked;                                        // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Orientation;                                       // 0x0014(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bHasPositionalTracking;                            // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Position;                                          // 0x0024(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeadMountedDisplayFunctionLibrary_GetDevicePose) == 0x000008, "Wrong alignment on HeadMountedDisplayFunctionLibrary_GetDevicePose");
static_assert(sizeof(HeadMountedDisplayFunctionLibrary_GetDevicePose) == 0x000030, "Wrong size on HeadMountedDisplayFunctionLibrary_GetDevicePose");
static_assert(offsetof(HeadMountedDisplayFunctionLibrary_GetDevicePose, XRDeviceId) == 0x000000, "Member 'HeadMountedDisplayFunctionLibrary_GetDevicePose::XRDeviceId' has a wrong offset!");
static_assert(offsetof(HeadMountedDisplayFunctionLibrary_GetDevicePose, bIsTracked) == 0x000010, "Member 'HeadMountedDisplayFunctionLibrary_GetDevicePose::bIsTracked' has a wrong offset!");
static_assert(offsetof(HeadMountedDisplayFunctionLibrary_GetDevicePose, Orientation) == 0x000014, "Member 'HeadMountedDisplayFunctionLibrary_GetDevicePose::Orientation' has a wrong offset!");
static_assert(offsetof(HeadMountedDisplayFunctionLibrary_GetDevicePose, bHasPositionalTracking) == 0x000020, "Member 'HeadMountedDisplayFunctionLibrary_GetDevicePose::bHasPositionalTracking' has a wrong offset!");
static_assert(offsetof(HeadMountedDisplayFunctionLibrary_GetDevicePose, Position) == 0x000024, "Member 'HeadMountedDisplayFunctionLibrary_GetDevicePose::Position' has a wrong offset!");

// Function HeadMountedDisplay.HeadMountedDisplayFunctionLibrary.GetDeviceWorldPose
// 0x0038 (0x0038 - 0x0000)
struct HeadMountedDisplayFunctionLibrary_GetDeviceWorldPose final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FXRDeviceId                            XRDeviceId;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsTracked;                                        // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Orientation;                                       // 0x001C(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bHasPositionalTracking;                            // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Position;                                          // 0x002C(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeadMountedDisplayFunctionLibrary_GetDeviceWorldPose) == 0x000008, "Wrong alignment on HeadMountedDisplayFunctionLibrary_GetDeviceWorldPose");
static_assert(sizeof(HeadMountedDisplayFunctionLibrary_GetDeviceWorldPose) == 0x000038, "Wrong size on HeadMountedDisplayFunctionLibrary_GetDeviceWorldPose");
static_assert(offsetof(HeadMountedDisplayFunctionLibrary_GetDeviceWorldPose, WorldContext) == 0x000000, "Member 'HeadMountedDisplayFunctionLibrary_GetDeviceWorldPose::WorldContext' has a wrong offset!");
static_assert(offsetof(HeadMountedDisplayFunctionLibrary_GetDeviceWorldPose, XRDeviceId) == 0x000008, "Member 'HeadMountedDisplayFunctionLibrary_GetDeviceWorldPose::XRDeviceId' has a wrong offset!");
static_assert(offsetof(HeadMountedDisplayFunctionLibrary_GetDeviceWorldPose, bIsTracked) == 0x000018, "Member 'HeadMountedDisplayFunctionLibrary_GetDeviceWorldPose::bIsTracked' has a wrong offset!");
static_assert(offsetof(HeadMountedDisplayFunctionLibrary_GetDeviceWorldPose, Orientation) == 0x00001C, "Member 'HeadMountedDisplayFunctionLibrary_GetDeviceWorldPose::Orientation' has a wrong offset!");
static_assert(offsetof(HeadMountedDisplayFunctionLibrary_GetDeviceWorldPose, bHasPositionalTracking) == 0x000028, "Member 'HeadMountedDisplayFunctionLibrary_GetDeviceWorldPose::bHasPositionalTracking' has a wrong offset!");
static_assert(offsetof(HeadMountedDisplayFunctionLibrary_GetDeviceWorldPose, Position) == 0x00002C, "Member 'HeadMountedDisplayFunctionLibrary_GetDeviceWorldPose::Position' has a wrong offset!");

// Function HeadMountedDisplay.HeadMountedDisplayFunctionLibrary.GetHMDDeviceName
// 0x0008 (0x0008 - 0x0000)
struct HeadMountedDisplayFunctionLibrary_GetHMDDeviceName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeadMountedDisplayFunctionLibrary_GetHMDDeviceName) == 0x000004, "Wrong alignment on HeadMountedDisplayFunctionLibrary_GetHMDDeviceName");
static_assert(sizeof(HeadMountedDisplayFunctionLibrary_GetHMDDeviceName) == 0x000008, "Wrong size on HeadMountedDisplayFunctionLibrary_GetHMDDeviceName");
static_assert(offsetof(HeadMountedDisplayFunctionLibrary_GetHMDDeviceName, ReturnValue) == 0x000000, "Member 'HeadMountedDisplayFunctionLibrary_GetHMDDeviceName::ReturnValue' has a wrong offset!");

// Function HeadMountedDisplay.HeadMountedDisplayFunctionLibrary.GetHMDWornState
// 0x0001 (0x0001 - 0x0000)
struct HeadMountedDisplayFunctionLibrary_GetHMDWornState final
{
public:
	EHMDWornState                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeadMountedDisplayFunctionLibrary_GetHMDWornState) == 0x000001, "Wrong alignment on HeadMountedDisplayFunctionLibrary_GetHMDWornState");
static_assert(sizeof(HeadMountedDisplayFunctionLibrary_GetHMDWornState) == 0x000001, "Wrong size on HeadMountedDisplayFunctionLibrary_GetHMDWornState");
static_assert(offsetof(HeadMountedDisplayFunctionLibrary_GetHMDWornState, ReturnValue) == 0x000000, "Member 'HeadMountedDisplayFunctionLibrary_GetHMDWornState::ReturnValue' has a wrong offset!");

// Function HeadMountedDisplay.HeadMountedDisplayFunctionLibrary.GetNumOfTrackingSensors
// 0x0004 (0x0004 - 0x0000)
struct HeadMountedDisplayFunctionLibrary_GetNumOfTrackingSensors final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeadMountedDisplayFunctionLibrary_GetNumOfTrackingSensors) == 0x000004, "Wrong alignment on HeadMountedDisplayFunctionLibrary_GetNumOfTrackingSensors");
static_assert(sizeof(HeadMountedDisplayFunctionLibrary_GetNumOfTrackingSensors) == 0x000004, "Wrong size on HeadMountedDisplayFunctionLibrary_GetNumOfTrackingSensors");
static_assert(offsetof(HeadMountedDisplayFunctionLibrary_GetNumOfTrackingSensors, ReturnValue) == 0x000000, "Member 'HeadMountedDisplayFunctionLibrary_GetNumOfTrackingSensors::ReturnValue' has a wrong offset!");

// Function HeadMountedDisplay.HeadMountedDisplayFunctionLibrary.GetOrientationAndPosition
// 0x0018 (0x0018 - 0x0000)
struct HeadMountedDisplayFunctionLibrary_GetOrientationAndPosition final
{
public:
	struct FRotator                               DeviceRotation;                                    // 0x0000(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                DevicePosition;                                    // 0x000C(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeadMountedDisplayFunctionLibrary_GetOrientationAndPosition) == 0x000004, "Wrong alignment on HeadMountedDisplayFunctionLibrary_GetOrientationAndPosition");
static_assert(sizeof(HeadMountedDisplayFunctionLibrary_GetOrientationAndPosition) == 0x000018, "Wrong size on HeadMountedDisplayFunctionLibrary_GetOrientationAndPosition");
static_assert(offsetof(HeadMountedDisplayFunctionLibrary_GetOrientationAndPosition, DeviceRotation) == 0x000000, "Member 'HeadMountedDisplayFunctionLibrary_GetOrientationAndPosition::DeviceRotation' has a wrong offset!");
static_assert(offsetof(HeadMountedDisplayFunctionLibrary_GetOrientationAndPosition, DevicePosition) == 0x00000C, "Member 'HeadMountedDisplayFunctionLibrary_GetOrientationAndPosition::DevicePosition' has a wrong offset!");

// Function HeadMountedDisplay.HeadMountedDisplayFunctionLibrary.GetPixelDensity
// 0x0004 (0x0004 - 0x0000)
struct HeadMountedDisplayFunctionLibrary_GetPixelDensity final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeadMountedDisplayFunctionLibrary_GetPixelDensity) == 0x000004, "Wrong alignment on HeadMountedDisplayFunctionLibrary_GetPixelDensity");
static_assert(sizeof(HeadMountedDisplayFunctionLibrary_GetPixelDensity) == 0x000004, "Wrong size on HeadMountedDisplayFunctionLibrary_GetPixelDensity");
static_assert(offsetof(HeadMountedDisplayFunctionLibrary_GetPixelDensity, ReturnValue) == 0x000000, "Member 'HeadMountedDisplayFunctionLibrary_GetPixelDensity::ReturnValue' has a wrong offset!");

// Function HeadMountedDisplay.HeadMountedDisplayFunctionLibrary.GetPositionalTrackingCameraParameters
// 0x002C (0x002C - 0x0000)
struct HeadMountedDisplayFunctionLibrary_GetPositionalTrackingCameraParameters final
{
public:
	struct FVector                                CameraOrigin;                                      // 0x0000(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               CameraRotation;                                    // 0x000C(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         HFOV;                                              // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VFOV;                                              // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraDistance;                                    // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NearPlane;                                         // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FarPlane;                                          // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeadMountedDisplayFunctionLibrary_GetPositionalTrackingCameraParameters) == 0x000004, "Wrong alignment on HeadMountedDisplayFunctionLibrary_GetPositionalTrackingCameraParameters");
static_assert(sizeof(HeadMountedDisplayFunctionLibrary_GetPositionalTrackingCameraParameters) == 0x00002C, "Wrong size on HeadMountedDisplayFunctionLibrary_GetPositionalTrackingCameraParameters");
static_assert(offsetof(HeadMountedDisplayFunctionLibrary_GetPositionalTrackingCameraParameters, CameraOrigin) == 0x000000, "Member 'HeadMountedDisplayFunctionLibrary_GetPositionalTrackingCameraParameters::CameraOrigin' has a wrong offset!");
static_assert(offsetof(HeadMountedDisplayFunctionLibrary_GetPositionalTrackingCameraParameters, CameraRotation) == 0x00000C, "Member 'HeadMountedDisplayFunctionLibrary_GetPositionalTrackingCameraParameters::CameraRotation' has a wrong offset!");
static_assert(offsetof(HeadMountedDisplayFunctionLibrary_GetPositionalTrackingCameraParameters, HFOV) == 0x000018, "Member 'HeadMountedDisplayFunctionLibrary_GetPositionalTrackingCameraParameters::HFOV' has a wrong offset!");
static_assert(offsetof(HeadMountedDisplayFunctionLibrary_GetPositionalTrackingCameraParameters, VFOV) == 0x00001C, "Member 'HeadMountedDisplayFunctionLibrary_GetPositionalTrackingCameraParameters::VFOV' has a wrong offset!");
static_assert(offsetof(HeadMountedDisplayFunctionLibrary_GetPositionalTrackingCameraParameters, CameraDistance) == 0x000020, "Member 'HeadMountedDisplayFunctionLibrary_GetPositionalTrackingCameraParameters::CameraDistance' has a wrong offset!");
static_assert(offsetof(HeadMountedDisplayFunctionLibrary_GetPositionalTrackingCameraParameters, NearPlane) == 0x000024, "Member 'HeadMountedDisplayFunctionLibrary_GetPositionalTrackingCameraParameters::NearPlane' has a wrong offset!");
static_assert(offsetof(HeadMountedDisplayFunctionLibrary_GetPositionalTrackingCameraParameters, FarPlane) == 0x000028, "Member 'HeadMountedDisplayFunctionLibrary_GetPositionalTrackingCameraParameters::FarPlane' has a wrong offset!");

// Function HeadMountedDisplay.HeadMountedDisplayFunctionLibrary.GetScreenPercentage
// 0x0004 (0x0004 - 0x0000)
struct HeadMountedDisplayFunctionLibrary_GetScreenPercentage final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeadMountedDisplayFunctionLibrary_GetScreenPercentage) == 0x000004, "Wrong alignment on HeadMountedDisplayFunctionLibrary_GetScreenPercentage");
static_assert(sizeof(HeadMountedDisplayFunctionLibrary_GetScreenPercentage) == 0x000004, "Wrong size on HeadMountedDisplayFunctionLibrary_GetScreenPercentage");
static_assert(offsetof(HeadMountedDisplayFunctionLibrary_GetScreenPercentage, ReturnValue) == 0x000000, "Member 'HeadMountedDisplayFunctionLibrary_GetScreenPercentage::ReturnValue' has a wrong offset!");

// Function HeadMountedDisplay.HeadMountedDisplayFunctionLibrary.GetTrackingOrigin
// 0x0001 (0x0001 - 0x0000)
struct HeadMountedDisplayFunctionLibrary_GetTrackingOrigin final
{
public:
	EHMDTrackingOrigin                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeadMountedDisplayFunctionLibrary_GetTrackingOrigin) == 0x000001, "Wrong alignment on HeadMountedDisplayFunctionLibrary_GetTrackingOrigin");
static_assert(sizeof(HeadMountedDisplayFunctionLibrary_GetTrackingOrigin) == 0x000001, "Wrong size on HeadMountedDisplayFunctionLibrary_GetTrackingOrigin");
static_assert(offsetof(HeadMountedDisplayFunctionLibrary_GetTrackingOrigin, ReturnValue) == 0x000000, "Member 'HeadMountedDisplayFunctionLibrary_GetTrackingOrigin::ReturnValue' has a wrong offset!");

// Function HeadMountedDisplay.HeadMountedDisplayFunctionLibrary.GetTrackingSensorParameters
// 0x003C (0x003C - 0x0000)
struct HeadMountedDisplayFunctionLibrary_GetTrackingSensorParameters final
{
public:
	struct FVector                                Origin;                                            // 0x0000(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x000C(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         LeftFOV;                                           // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RightFOV;                                          // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TopFOV;                                            // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BottomFOV;                                         // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NearPlane;                                         // 0x002C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FarPlane;                                          // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsActive;                                          // 0x0034(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Index_0;                                           // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeadMountedDisplayFunctionLibrary_GetTrackingSensorParameters) == 0x000004, "Wrong alignment on HeadMountedDisplayFunctionLibrary_GetTrackingSensorParameters");
static_assert(sizeof(HeadMountedDisplayFunctionLibrary_GetTrackingSensorParameters) == 0x00003C, "Wrong size on HeadMountedDisplayFunctionLibrary_GetTrackingSensorParameters");
static_assert(offsetof(HeadMountedDisplayFunctionLibrary_GetTrackingSensorParameters, Origin) == 0x000000, "Member 'HeadMountedDisplayFunctionLibrary_GetTrackingSensorParameters::Origin' has a wrong offset!");
static_assert(offsetof(HeadMountedDisplayFunctionLibrary_GetTrackingSensorParameters, Rotation) == 0x00000C, "Member 'HeadMountedDisplayFunctionLibrary_GetTrackingSensorParameters::Rotation' has a wrong offset!");
static_assert(offsetof(HeadMountedDisplayFunctionLibrary_GetTrackingSensorParameters, LeftFOV) == 0x000018, "Member 'HeadMountedDisplayFunctionLibrary_GetTrackingSensorParameters::LeftFOV' has a wrong offset!");
static_assert(offsetof(HeadMountedDisplayFunctionLibrary_GetTrackingSensorParameters, RightFOV) == 0x00001C, "Member 'HeadMountedDisplayFunctionLibrary_GetTrackingSensorParameters::RightFOV' has a wrong offset!");
static_assert(offsetof(HeadMountedDisplayFunctionLibrary_GetTrackingSensorParameters, TopFOV) == 0x000020, "Member 'HeadMountedDisplayFunctionLibrary_GetTrackingSensorParameters::TopFOV' has a wrong offset!");
static_assert(offsetof(HeadMountedDisplayFunctionLibrary_GetTrackingSensorParameters, BottomFOV) == 0x000024, "Member 'HeadMountedDisplayFunctionLibrary_GetTrackingSensorParameters::BottomFOV' has a wrong offset!");
static_assert(offsetof(HeadMountedDisplayFunctionLibrary_GetTrackingSensorParameters, Distance) == 0x000028, "Member 'HeadMountedDisplayFunctionLibrary_GetTrackingSensorParameters::Distance' has a wrong offset!");
static_assert(offsetof(HeadMountedDisplayFunctionLibrary_GetTrackingSensorParameters, NearPlane) == 0x00002C, "Member 'HeadMountedDisplayFunctionLibrary_GetTrackingSensorParameters::NearPlane' has a wrong offset!");
static_assert(offsetof(HeadMountedDisplayFunctionLibrary_GetTrackingSensorParameters, FarPlane) == 0x000030, "Member 'HeadMountedDisplayFunctionLibrary_GetTrackingSensorParameters::FarPlane' has a wrong offset!");
static_assert(offsetof(HeadMountedDisplayFunctionLibrary_GetTrackingSensorParameters, IsActive) == 0x000034, "Member 'HeadMountedDisplayFunctionLibrary_GetTrackingSensorParameters::IsActive' has a wrong offset!");
static_assert(offsetof(HeadMountedDisplayFunctionLibrary_GetTrackingSensorParameters, Index_0) == 0x000038, "Member 'HeadMountedDisplayFunctionLibrary_GetTrackingSensorParameters::Index_0' has a wrong offset!");

// Function HeadMountedDisplay.HeadMountedDisplayFunctionLibrary.GetTrackingToWorldTransform
// 0x0040 (0x0040 - 0x0000)
struct HeadMountedDisplayFunctionLibrary_GetTrackingToWorldTransform final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeadMountedDisplayFunctionLibrary_GetTrackingToWorldTransform) == 0x000010, "Wrong alignment on HeadMountedDisplayFunctionLibrary_GetTrackingToWorldTransform");
static_assert(sizeof(HeadMountedDisplayFunctionLibrary_GetTrackingToWorldTransform) == 0x000040, "Wrong size on HeadMountedDisplayFunctionLibrary_GetTrackingToWorldTransform");
static_assert(offsetof(HeadMountedDisplayFunctionLibrary_GetTrackingToWorldTransform, WorldContext) == 0x000000, "Member 'HeadMountedDisplayFunctionLibrary_GetTrackingToWorldTransform::WorldContext' has a wrong offset!");
static_assert(offsetof(HeadMountedDisplayFunctionLibrary_GetTrackingToWorldTransform, ReturnValue) == 0x000010, "Member 'HeadMountedDisplayFunctionLibrary_GetTrackingToWorldTransform::ReturnValue' has a wrong offset!");

// Function HeadMountedDisplay.HeadMountedDisplayFunctionLibrary.GetVRFocusState
// 0x0002 (0x0002 - 0x0000)
struct HeadMountedDisplayFunctionLibrary_GetVRFocusState final
{
public:
	bool                                          bUseFocus;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasFocus;                                         // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeadMountedDisplayFunctionLibrary_GetVRFocusState) == 0x000001, "Wrong alignment on HeadMountedDisplayFunctionLibrary_GetVRFocusState");
static_assert(sizeof(HeadMountedDisplayFunctionLibrary_GetVRFocusState) == 0x000002, "Wrong size on HeadMountedDisplayFunctionLibrary_GetVRFocusState");
static_assert(offsetof(HeadMountedDisplayFunctionLibrary_GetVRFocusState, bUseFocus) == 0x000000, "Member 'HeadMountedDisplayFunctionLibrary_GetVRFocusState::bUseFocus' has a wrong offset!");
static_assert(offsetof(HeadMountedDisplayFunctionLibrary_GetVRFocusState, bHasFocus) == 0x000001, "Member 'HeadMountedDisplayFunctionLibrary_GetVRFocusState::bHasFocus' has a wrong offset!");

// Function HeadMountedDisplay.HeadMountedDisplayFunctionLibrary.GetWorldToMetersScale
// 0x0010 (0x0010 - 0x0000)
struct HeadMountedDisplayFunctionLibrary_GetWorldToMetersScale final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HeadMountedDisplayFunctionLibrary_GetWorldToMetersScale) == 0x000008, "Wrong alignment on HeadMountedDisplayFunctionLibrary_GetWorldToMetersScale");
static_assert(sizeof(HeadMountedDisplayFunctionLibrary_GetWorldToMetersScale) == 0x000010, "Wrong size on HeadMountedDisplayFunctionLibrary_GetWorldToMetersScale");
static_assert(offsetof(HeadMountedDisplayFunctionLibrary_GetWorldToMetersScale, WorldContext) == 0x000000, "Member 'HeadMountedDisplayFunctionLibrary_GetWorldToMetersScale::WorldContext' has a wrong offset!");
static_assert(offsetof(HeadMountedDisplayFunctionLibrary_GetWorldToMetersScale, ReturnValue) == 0x000008, "Member 'HeadMountedDisplayFunctionLibrary_GetWorldToMetersScale::ReturnValue' has a wrong offset!");

// Function HeadMountedDisplay.HeadMountedDisplayFunctionLibrary.HasValidTrackingPosition
// 0x0001 (0x0001 - 0x0000)
struct HeadMountedDisplayFunctionLibrary_HasValidTrackingPosition final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeadMountedDisplayFunctionLibrary_HasValidTrackingPosition) == 0x000001, "Wrong alignment on HeadMountedDisplayFunctionLibrary_HasValidTrackingPosition");
static_assert(sizeof(HeadMountedDisplayFunctionLibrary_HasValidTrackingPosition) == 0x000001, "Wrong size on HeadMountedDisplayFunctionLibrary_HasValidTrackingPosition");
static_assert(offsetof(HeadMountedDisplayFunctionLibrary_HasValidTrackingPosition, ReturnValue) == 0x000000, "Member 'HeadMountedDisplayFunctionLibrary_HasValidTrackingPosition::ReturnValue' has a wrong offset!");

// Function HeadMountedDisplay.HeadMountedDisplayFunctionLibrary.IsHeadMountedDisplayConnected
// 0x0001 (0x0001 - 0x0000)
struct HeadMountedDisplayFunctionLibrary_IsHeadMountedDisplayConnected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeadMountedDisplayFunctionLibrary_IsHeadMountedDisplayConnected) == 0x000001, "Wrong alignment on HeadMountedDisplayFunctionLibrary_IsHeadMountedDisplayConnected");
static_assert(sizeof(HeadMountedDisplayFunctionLibrary_IsHeadMountedDisplayConnected) == 0x000001, "Wrong size on HeadMountedDisplayFunctionLibrary_IsHeadMountedDisplayConnected");
static_assert(offsetof(HeadMountedDisplayFunctionLibrary_IsHeadMountedDisplayConnected, ReturnValue) == 0x000000, "Member 'HeadMountedDisplayFunctionLibrary_IsHeadMountedDisplayConnected::ReturnValue' has a wrong offset!");

// Function HeadMountedDisplay.HeadMountedDisplayFunctionLibrary.IsHeadMountedDisplayEnabled
// 0x0001 (0x0001 - 0x0000)
struct HeadMountedDisplayFunctionLibrary_IsHeadMountedDisplayEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeadMountedDisplayFunctionLibrary_IsHeadMountedDisplayEnabled) == 0x000001, "Wrong alignment on HeadMountedDisplayFunctionLibrary_IsHeadMountedDisplayEnabled");
static_assert(sizeof(HeadMountedDisplayFunctionLibrary_IsHeadMountedDisplayEnabled) == 0x000001, "Wrong size on HeadMountedDisplayFunctionLibrary_IsHeadMountedDisplayEnabled");
static_assert(offsetof(HeadMountedDisplayFunctionLibrary_IsHeadMountedDisplayEnabled, ReturnValue) == 0x000000, "Member 'HeadMountedDisplayFunctionLibrary_IsHeadMountedDisplayEnabled::ReturnValue' has a wrong offset!");

// Function HeadMountedDisplay.HeadMountedDisplayFunctionLibrary.IsInLowPersistenceMode
// 0x0001 (0x0001 - 0x0000)
struct HeadMountedDisplayFunctionLibrary_IsInLowPersistenceMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeadMountedDisplayFunctionLibrary_IsInLowPersistenceMode) == 0x000001, "Wrong alignment on HeadMountedDisplayFunctionLibrary_IsInLowPersistenceMode");
static_assert(sizeof(HeadMountedDisplayFunctionLibrary_IsInLowPersistenceMode) == 0x000001, "Wrong size on HeadMountedDisplayFunctionLibrary_IsInLowPersistenceMode");
static_assert(offsetof(HeadMountedDisplayFunctionLibrary_IsInLowPersistenceMode, ReturnValue) == 0x000000, "Member 'HeadMountedDisplayFunctionLibrary_IsInLowPersistenceMode::ReturnValue' has a wrong offset!");

// Function HeadMountedDisplay.HeadMountedDisplayFunctionLibrary.IsSpectatorScreenModeControllable
// 0x0001 (0x0001 - 0x0000)
struct HeadMountedDisplayFunctionLibrary_IsSpectatorScreenModeControllable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeadMountedDisplayFunctionLibrary_IsSpectatorScreenModeControllable) == 0x000001, "Wrong alignment on HeadMountedDisplayFunctionLibrary_IsSpectatorScreenModeControllable");
static_assert(sizeof(HeadMountedDisplayFunctionLibrary_IsSpectatorScreenModeControllable) == 0x000001, "Wrong size on HeadMountedDisplayFunctionLibrary_IsSpectatorScreenModeControllable");
static_assert(offsetof(HeadMountedDisplayFunctionLibrary_IsSpectatorScreenModeControllable, ReturnValue) == 0x000000, "Member 'HeadMountedDisplayFunctionLibrary_IsSpectatorScreenModeControllable::ReturnValue' has a wrong offset!");

// Function HeadMountedDisplay.HeadMountedDisplayFunctionLibrary.ResetOrientationAndPosition
// 0x0008 (0x0008 - 0x0000)
struct HeadMountedDisplayFunctionLibrary_ResetOrientationAndPosition final
{
public:
	float                                         Yaw;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOrientPositionSelector                       Options;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HeadMountedDisplayFunctionLibrary_ResetOrientationAndPosition) == 0x000004, "Wrong alignment on HeadMountedDisplayFunctionLibrary_ResetOrientationAndPosition");
static_assert(sizeof(HeadMountedDisplayFunctionLibrary_ResetOrientationAndPosition) == 0x000008, "Wrong size on HeadMountedDisplayFunctionLibrary_ResetOrientationAndPosition");
static_assert(offsetof(HeadMountedDisplayFunctionLibrary_ResetOrientationAndPosition, Yaw) == 0x000000, "Member 'HeadMountedDisplayFunctionLibrary_ResetOrientationAndPosition::Yaw' has a wrong offset!");
static_assert(offsetof(HeadMountedDisplayFunctionLibrary_ResetOrientationAndPosition, Options) == 0x000004, "Member 'HeadMountedDisplayFunctionLibrary_ResetOrientationAndPosition::Options' has a wrong offset!");

// Function HeadMountedDisplay.HeadMountedDisplayFunctionLibrary.SetClippingPlanes
// 0x0008 (0x0008 - 0x0000)
struct HeadMountedDisplayFunctionLibrary_SetClippingPlanes final
{
public:
	float                                         Near;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Far;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeadMountedDisplayFunctionLibrary_SetClippingPlanes) == 0x000004, "Wrong alignment on HeadMountedDisplayFunctionLibrary_SetClippingPlanes");
static_assert(sizeof(HeadMountedDisplayFunctionLibrary_SetClippingPlanes) == 0x000008, "Wrong size on HeadMountedDisplayFunctionLibrary_SetClippingPlanes");
static_assert(offsetof(HeadMountedDisplayFunctionLibrary_SetClippingPlanes, Near) == 0x000000, "Member 'HeadMountedDisplayFunctionLibrary_SetClippingPlanes::Near' has a wrong offset!");
static_assert(offsetof(HeadMountedDisplayFunctionLibrary_SetClippingPlanes, Far) == 0x000004, "Member 'HeadMountedDisplayFunctionLibrary_SetClippingPlanes::Far' has a wrong offset!");

// Function HeadMountedDisplay.HeadMountedDisplayFunctionLibrary.SetSpectatorScreenMode
// 0x0001 (0x0001 - 0x0000)
struct HeadMountedDisplayFunctionLibrary_SetSpectatorScreenMode final
{
public:
	ESpectatorScreenMode                          Mode;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeadMountedDisplayFunctionLibrary_SetSpectatorScreenMode) == 0x000001, "Wrong alignment on HeadMountedDisplayFunctionLibrary_SetSpectatorScreenMode");
static_assert(sizeof(HeadMountedDisplayFunctionLibrary_SetSpectatorScreenMode) == 0x000001, "Wrong size on HeadMountedDisplayFunctionLibrary_SetSpectatorScreenMode");
static_assert(offsetof(HeadMountedDisplayFunctionLibrary_SetSpectatorScreenMode, Mode) == 0x000000, "Member 'HeadMountedDisplayFunctionLibrary_SetSpectatorScreenMode::Mode' has a wrong offset!");

// Function HeadMountedDisplay.HeadMountedDisplayFunctionLibrary.SetSpectatorScreenModeTexturePlusEyeLayout
// 0x0024 (0x0024 - 0x0000)
struct HeadMountedDisplayFunctionLibrary_SetSpectatorScreenModeTexturePlusEyeLayout final
{
public:
	struct FVector2D                              EyeRectMin;                                        // 0x0000(0x0008)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              EyeRectMax;                                        // 0x0008(0x0008)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              TextureRectMin;                                    // 0x0010(0x0008)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              TextureRectMax;                                    // 0x0018(0x0008)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawEyeFirst;                                     // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClearBlack;                                       // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HeadMountedDisplayFunctionLibrary_SetSpectatorScreenModeTexturePlusEyeLayout) == 0x000004, "Wrong alignment on HeadMountedDisplayFunctionLibrary_SetSpectatorScreenModeTexturePlusEyeLayout");
static_assert(sizeof(HeadMountedDisplayFunctionLibrary_SetSpectatorScreenModeTexturePlusEyeLayout) == 0x000024, "Wrong size on HeadMountedDisplayFunctionLibrary_SetSpectatorScreenModeTexturePlusEyeLayout");
static_assert(offsetof(HeadMountedDisplayFunctionLibrary_SetSpectatorScreenModeTexturePlusEyeLayout, EyeRectMin) == 0x000000, "Member 'HeadMountedDisplayFunctionLibrary_SetSpectatorScreenModeTexturePlusEyeLayout::EyeRectMin' has a wrong offset!");
static_assert(offsetof(HeadMountedDisplayFunctionLibrary_SetSpectatorScreenModeTexturePlusEyeLayout, EyeRectMax) == 0x000008, "Member 'HeadMountedDisplayFunctionLibrary_SetSpectatorScreenModeTexturePlusEyeLayout::EyeRectMax' has a wrong offset!");
static_assert(offsetof(HeadMountedDisplayFunctionLibrary_SetSpectatorScreenModeTexturePlusEyeLayout, TextureRectMin) == 0x000010, "Member 'HeadMountedDisplayFunctionLibrary_SetSpectatorScreenModeTexturePlusEyeLayout::TextureRectMin' has a wrong offset!");
static_assert(offsetof(HeadMountedDisplayFunctionLibrary_SetSpectatorScreenModeTexturePlusEyeLayout, TextureRectMax) == 0x000018, "Member 'HeadMountedDisplayFunctionLibrary_SetSpectatorScreenModeTexturePlusEyeLayout::TextureRectMax' has a wrong offset!");
static_assert(offsetof(HeadMountedDisplayFunctionLibrary_SetSpectatorScreenModeTexturePlusEyeLayout, bDrawEyeFirst) == 0x000020, "Member 'HeadMountedDisplayFunctionLibrary_SetSpectatorScreenModeTexturePlusEyeLayout::bDrawEyeFirst' has a wrong offset!");
static_assert(offsetof(HeadMountedDisplayFunctionLibrary_SetSpectatorScreenModeTexturePlusEyeLayout, bClearBlack) == 0x000021, "Member 'HeadMountedDisplayFunctionLibrary_SetSpectatorScreenModeTexturePlusEyeLayout::bClearBlack' has a wrong offset!");

// Function HeadMountedDisplay.HeadMountedDisplayFunctionLibrary.SetSpectatorScreenTexture
// 0x0008 (0x0008 - 0x0000)
struct HeadMountedDisplayFunctionLibrary_SetSpectatorScreenTexture final
{
public:
	class UTexture*                               InTexture;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeadMountedDisplayFunctionLibrary_SetSpectatorScreenTexture) == 0x000008, "Wrong alignment on HeadMountedDisplayFunctionLibrary_SetSpectatorScreenTexture");
static_assert(sizeof(HeadMountedDisplayFunctionLibrary_SetSpectatorScreenTexture) == 0x000008, "Wrong size on HeadMountedDisplayFunctionLibrary_SetSpectatorScreenTexture");
static_assert(offsetof(HeadMountedDisplayFunctionLibrary_SetSpectatorScreenTexture, InTexture) == 0x000000, "Member 'HeadMountedDisplayFunctionLibrary_SetSpectatorScreenTexture::InTexture' has a wrong offset!");

// Function HeadMountedDisplay.HeadMountedDisplayFunctionLibrary.SetTrackingOrigin
// 0x0001 (0x0001 - 0x0000)
struct HeadMountedDisplayFunctionLibrary_SetTrackingOrigin final
{
public:
	EHMDTrackingOrigin                            Origin;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeadMountedDisplayFunctionLibrary_SetTrackingOrigin) == 0x000001, "Wrong alignment on HeadMountedDisplayFunctionLibrary_SetTrackingOrigin");
static_assert(sizeof(HeadMountedDisplayFunctionLibrary_SetTrackingOrigin) == 0x000001, "Wrong size on HeadMountedDisplayFunctionLibrary_SetTrackingOrigin");
static_assert(offsetof(HeadMountedDisplayFunctionLibrary_SetTrackingOrigin, Origin) == 0x000000, "Member 'HeadMountedDisplayFunctionLibrary_SetTrackingOrigin::Origin' has a wrong offset!");

// Function HeadMountedDisplay.HeadMountedDisplayFunctionLibrary.SetWorldToMetersScale
// 0x0010 (0x0010 - 0x0000)
struct HeadMountedDisplayFunctionLibrary_SetWorldToMetersScale final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewScale;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HeadMountedDisplayFunctionLibrary_SetWorldToMetersScale) == 0x000008, "Wrong alignment on HeadMountedDisplayFunctionLibrary_SetWorldToMetersScale");
static_assert(sizeof(HeadMountedDisplayFunctionLibrary_SetWorldToMetersScale) == 0x000010, "Wrong size on HeadMountedDisplayFunctionLibrary_SetWorldToMetersScale");
static_assert(offsetof(HeadMountedDisplayFunctionLibrary_SetWorldToMetersScale, WorldContext) == 0x000000, "Member 'HeadMountedDisplayFunctionLibrary_SetWorldToMetersScale::WorldContext' has a wrong offset!");
static_assert(offsetof(HeadMountedDisplayFunctionLibrary_SetWorldToMetersScale, NewScale) == 0x000008, "Member 'HeadMountedDisplayFunctionLibrary_SetWorldToMetersScale::NewScale' has a wrong offset!");

// Function HeadMountedDisplay.MotionControllerComponent.GetParameterValue
// 0x0010 (0x0010 - 0x0000)
struct MotionControllerComponent_GetParameterValue final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValueFound;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MotionControllerComponent_GetParameterValue) == 0x000004, "Wrong alignment on MotionControllerComponent_GetParameterValue");
static_assert(sizeof(MotionControllerComponent_GetParameterValue) == 0x000010, "Wrong size on MotionControllerComponent_GetParameterValue");
static_assert(offsetof(MotionControllerComponent_GetParameterValue, InName) == 0x000000, "Member 'MotionControllerComponent_GetParameterValue::InName' has a wrong offset!");
static_assert(offsetof(MotionControllerComponent_GetParameterValue, bValueFound) == 0x000008, "Member 'MotionControllerComponent_GetParameterValue::bValueFound' has a wrong offset!");
static_assert(offsetof(MotionControllerComponent_GetParameterValue, ReturnValue) == 0x00000C, "Member 'MotionControllerComponent_GetParameterValue::ReturnValue' has a wrong offset!");

// Function HeadMountedDisplay.MotionControllerComponent.SetAssociatedPlayerIndex
// 0x0004 (0x0004 - 0x0000)
struct MotionControllerComponent_SetAssociatedPlayerIndex final
{
public:
	int32                                         NewPlayer;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MotionControllerComponent_SetAssociatedPlayerIndex) == 0x000004, "Wrong alignment on MotionControllerComponent_SetAssociatedPlayerIndex");
static_assert(sizeof(MotionControllerComponent_SetAssociatedPlayerIndex) == 0x000004, "Wrong size on MotionControllerComponent_SetAssociatedPlayerIndex");
static_assert(offsetof(MotionControllerComponent_SetAssociatedPlayerIndex, NewPlayer) == 0x000000, "Member 'MotionControllerComponent_SetAssociatedPlayerIndex::NewPlayer' has a wrong offset!");

// Function HeadMountedDisplay.MotionControllerComponent.SetCustomDisplayMesh
// 0x0008 (0x0008 - 0x0000)
struct MotionControllerComponent_SetCustomDisplayMesh final
{
public:
	class UStaticMesh*                            NewDisplayMesh;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MotionControllerComponent_SetCustomDisplayMesh) == 0x000008, "Wrong alignment on MotionControllerComponent_SetCustomDisplayMesh");
static_assert(sizeof(MotionControllerComponent_SetCustomDisplayMesh) == 0x000008, "Wrong size on MotionControllerComponent_SetCustomDisplayMesh");
static_assert(offsetof(MotionControllerComponent_SetCustomDisplayMesh, NewDisplayMesh) == 0x000000, "Member 'MotionControllerComponent_SetCustomDisplayMesh::NewDisplayMesh' has a wrong offset!");

// Function HeadMountedDisplay.MotionControllerComponent.SetDisplayModelSource
// 0x0008 (0x0008 - 0x0000)
struct MotionControllerComponent_SetDisplayModelSource final
{
public:
	class FName                                   NewDisplayModelSource;                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MotionControllerComponent_SetDisplayModelSource) == 0x000004, "Wrong alignment on MotionControllerComponent_SetDisplayModelSource");
static_assert(sizeof(MotionControllerComponent_SetDisplayModelSource) == 0x000008, "Wrong size on MotionControllerComponent_SetDisplayModelSource");
static_assert(offsetof(MotionControllerComponent_SetDisplayModelSource, NewDisplayModelSource) == 0x000000, "Member 'MotionControllerComponent_SetDisplayModelSource::NewDisplayModelSource' has a wrong offset!");

// Function HeadMountedDisplay.MotionControllerComponent.SetShowDeviceModel
// 0x0001 (0x0001 - 0x0000)
struct MotionControllerComponent_SetShowDeviceModel final
{
public:
	bool                                          bShowControllerModel;                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MotionControllerComponent_SetShowDeviceModel) == 0x000001, "Wrong alignment on MotionControllerComponent_SetShowDeviceModel");
static_assert(sizeof(MotionControllerComponent_SetShowDeviceModel) == 0x000001, "Wrong size on MotionControllerComponent_SetShowDeviceModel");
static_assert(offsetof(MotionControllerComponent_SetShowDeviceModel, bShowControllerModel) == 0x000000, "Member 'MotionControllerComponent_SetShowDeviceModel::bShowControllerModel' has a wrong offset!");

// Function HeadMountedDisplay.MotionControllerComponent.SetTrackingMotionSource
// 0x0008 (0x0008 - 0x0000)
struct MotionControllerComponent_SetTrackingMotionSource final
{
public:
	class FName                                   NewSource;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MotionControllerComponent_SetTrackingMotionSource) == 0x000004, "Wrong alignment on MotionControllerComponent_SetTrackingMotionSource");
static_assert(sizeof(MotionControllerComponent_SetTrackingMotionSource) == 0x000008, "Wrong size on MotionControllerComponent_SetTrackingMotionSource");
static_assert(offsetof(MotionControllerComponent_SetTrackingMotionSource, NewSource) == 0x000000, "Member 'MotionControllerComponent_SetTrackingMotionSource::NewSource' has a wrong offset!");

// Function HeadMountedDisplay.MotionControllerComponent.SetTrackingSource
// 0x0001 (0x0001 - 0x0000)
struct MotionControllerComponent_SetTrackingSource final
{
public:
	EControllerHand                               NewSource;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MotionControllerComponent_SetTrackingSource) == 0x000001, "Wrong alignment on MotionControllerComponent_SetTrackingSource");
static_assert(sizeof(MotionControllerComponent_SetTrackingSource) == 0x000001, "Wrong size on MotionControllerComponent_SetTrackingSource");
static_assert(offsetof(MotionControllerComponent_SetTrackingSource, NewSource) == 0x000000, "Member 'MotionControllerComponent_SetTrackingSource::NewSource' has a wrong offset!");

// Function HeadMountedDisplay.MotionControllerComponent.GetTrackingSource
// 0x0001 (0x0001 - 0x0000)
struct MotionControllerComponent_GetTrackingSource final
{
public:
	EControllerHand                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MotionControllerComponent_GetTrackingSource) == 0x000001, "Wrong alignment on MotionControllerComponent_GetTrackingSource");
static_assert(sizeof(MotionControllerComponent_GetTrackingSource) == 0x000001, "Wrong size on MotionControllerComponent_GetTrackingSource");
static_assert(offsetof(MotionControllerComponent_GetTrackingSource, ReturnValue) == 0x000000, "Member 'MotionControllerComponent_GetTrackingSource::ReturnValue' has a wrong offset!");

// Function HeadMountedDisplay.MotionControllerComponent.IsTracked
// 0x0001 (0x0001 - 0x0000)
struct MotionControllerComponent_IsTracked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MotionControllerComponent_IsTracked) == 0x000001, "Wrong alignment on MotionControllerComponent_IsTracked");
static_assert(sizeof(MotionControllerComponent_IsTracked) == 0x000001, "Wrong size on MotionControllerComponent_IsTracked");
static_assert(offsetof(MotionControllerComponent_IsTracked, ReturnValue) == 0x000000, "Member 'MotionControllerComponent_IsTracked::ReturnValue' has a wrong offset!");

// Function HeadMountedDisplay.MotionTrackedDeviceFunctionLibrary.DisableMotionTrackingForComponent
// 0x0008 (0x0008 - 0x0000)
struct MotionTrackedDeviceFunctionLibrary_DisableMotionTrackingForComponent final
{
public:
	const class UMotionControllerComponent*       MotionControllerComponent;                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MotionTrackedDeviceFunctionLibrary_DisableMotionTrackingForComponent) == 0x000008, "Wrong alignment on MotionTrackedDeviceFunctionLibrary_DisableMotionTrackingForComponent");
static_assert(sizeof(MotionTrackedDeviceFunctionLibrary_DisableMotionTrackingForComponent) == 0x000008, "Wrong size on MotionTrackedDeviceFunctionLibrary_DisableMotionTrackingForComponent");
static_assert(offsetof(MotionTrackedDeviceFunctionLibrary_DisableMotionTrackingForComponent, MotionControllerComponent) == 0x000000, "Member 'MotionTrackedDeviceFunctionLibrary_DisableMotionTrackingForComponent::MotionControllerComponent' has a wrong offset!");

// Function HeadMountedDisplay.MotionTrackedDeviceFunctionLibrary.DisableMotionTrackingOfControllersForPlayer
// 0x0004 (0x0004 - 0x0000)
struct MotionTrackedDeviceFunctionLibrary_DisableMotionTrackingOfControllersForPlayer final
{
public:
	int32                                         PlayerIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MotionTrackedDeviceFunctionLibrary_DisableMotionTrackingOfControllersForPlayer) == 0x000004, "Wrong alignment on MotionTrackedDeviceFunctionLibrary_DisableMotionTrackingOfControllersForPlayer");
static_assert(sizeof(MotionTrackedDeviceFunctionLibrary_DisableMotionTrackingOfControllersForPlayer) == 0x000004, "Wrong size on MotionTrackedDeviceFunctionLibrary_DisableMotionTrackingOfControllersForPlayer");
static_assert(offsetof(MotionTrackedDeviceFunctionLibrary_DisableMotionTrackingOfControllersForPlayer, PlayerIndex) == 0x000000, "Member 'MotionTrackedDeviceFunctionLibrary_DisableMotionTrackingOfControllersForPlayer::PlayerIndex' has a wrong offset!");

// Function HeadMountedDisplay.MotionTrackedDeviceFunctionLibrary.DisableMotionTrackingOfDevice
// 0x0008 (0x0008 - 0x0000)
struct MotionTrackedDeviceFunctionLibrary_DisableMotionTrackingOfDevice final
{
public:
	int32                                         PlayerIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EControllerHand                               Hand;                                              // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MotionTrackedDeviceFunctionLibrary_DisableMotionTrackingOfDevice) == 0x000004, "Wrong alignment on MotionTrackedDeviceFunctionLibrary_DisableMotionTrackingOfDevice");
static_assert(sizeof(MotionTrackedDeviceFunctionLibrary_DisableMotionTrackingOfDevice) == 0x000008, "Wrong size on MotionTrackedDeviceFunctionLibrary_DisableMotionTrackingOfDevice");
static_assert(offsetof(MotionTrackedDeviceFunctionLibrary_DisableMotionTrackingOfDevice, PlayerIndex) == 0x000000, "Member 'MotionTrackedDeviceFunctionLibrary_DisableMotionTrackingOfDevice::PlayerIndex' has a wrong offset!");
static_assert(offsetof(MotionTrackedDeviceFunctionLibrary_DisableMotionTrackingOfDevice, Hand) == 0x000004, "Member 'MotionTrackedDeviceFunctionLibrary_DisableMotionTrackingOfDevice::Hand' has a wrong offset!");

// Function HeadMountedDisplay.MotionTrackedDeviceFunctionLibrary.DisableMotionTrackingOfSource
// 0x0010 (0x0010 - 0x0000)
struct MotionTrackedDeviceFunctionLibrary_DisableMotionTrackingOfSource final
{
public:
	int32                                         PlayerIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SourceName;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MotionTrackedDeviceFunctionLibrary_DisableMotionTrackingOfSource) == 0x000004, "Wrong alignment on MotionTrackedDeviceFunctionLibrary_DisableMotionTrackingOfSource");
static_assert(sizeof(MotionTrackedDeviceFunctionLibrary_DisableMotionTrackingOfSource) == 0x000010, "Wrong size on MotionTrackedDeviceFunctionLibrary_DisableMotionTrackingOfSource");
static_assert(offsetof(MotionTrackedDeviceFunctionLibrary_DisableMotionTrackingOfSource, PlayerIndex) == 0x000000, "Member 'MotionTrackedDeviceFunctionLibrary_DisableMotionTrackingOfSource::PlayerIndex' has a wrong offset!");
static_assert(offsetof(MotionTrackedDeviceFunctionLibrary_DisableMotionTrackingOfSource, SourceName) == 0x000008, "Member 'MotionTrackedDeviceFunctionLibrary_DisableMotionTrackingOfSource::SourceName' has a wrong offset!");

// Function HeadMountedDisplay.MotionTrackedDeviceFunctionLibrary.EnableMotionTrackingForComponent
// 0x0010 (0x0010 - 0x0000)
struct MotionTrackedDeviceFunctionLibrary_EnableMotionTrackingForComponent final
{
public:
	class UMotionControllerComponent*             MotionControllerComponent;                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MotionTrackedDeviceFunctionLibrary_EnableMotionTrackingForComponent) == 0x000008, "Wrong alignment on MotionTrackedDeviceFunctionLibrary_EnableMotionTrackingForComponent");
static_assert(sizeof(MotionTrackedDeviceFunctionLibrary_EnableMotionTrackingForComponent) == 0x000010, "Wrong size on MotionTrackedDeviceFunctionLibrary_EnableMotionTrackingForComponent");
static_assert(offsetof(MotionTrackedDeviceFunctionLibrary_EnableMotionTrackingForComponent, MotionControllerComponent) == 0x000000, "Member 'MotionTrackedDeviceFunctionLibrary_EnableMotionTrackingForComponent::MotionControllerComponent' has a wrong offset!");
static_assert(offsetof(MotionTrackedDeviceFunctionLibrary_EnableMotionTrackingForComponent, ReturnValue) == 0x000008, "Member 'MotionTrackedDeviceFunctionLibrary_EnableMotionTrackingForComponent::ReturnValue' has a wrong offset!");

// Function HeadMountedDisplay.MotionTrackedDeviceFunctionLibrary.EnableMotionTrackingOfDevice
// 0x0008 (0x0008 - 0x0000)
struct MotionTrackedDeviceFunctionLibrary_EnableMotionTrackingOfDevice final
{
public:
	int32                                         PlayerIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EControllerHand                               Hand;                                              // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MotionTrackedDeviceFunctionLibrary_EnableMotionTrackingOfDevice) == 0x000004, "Wrong alignment on MotionTrackedDeviceFunctionLibrary_EnableMotionTrackingOfDevice");
static_assert(sizeof(MotionTrackedDeviceFunctionLibrary_EnableMotionTrackingOfDevice) == 0x000008, "Wrong size on MotionTrackedDeviceFunctionLibrary_EnableMotionTrackingOfDevice");
static_assert(offsetof(MotionTrackedDeviceFunctionLibrary_EnableMotionTrackingOfDevice, PlayerIndex) == 0x000000, "Member 'MotionTrackedDeviceFunctionLibrary_EnableMotionTrackingOfDevice::PlayerIndex' has a wrong offset!");
static_assert(offsetof(MotionTrackedDeviceFunctionLibrary_EnableMotionTrackingOfDevice, Hand) == 0x000004, "Member 'MotionTrackedDeviceFunctionLibrary_EnableMotionTrackingOfDevice::Hand' has a wrong offset!");
static_assert(offsetof(MotionTrackedDeviceFunctionLibrary_EnableMotionTrackingOfDevice, ReturnValue) == 0x000005, "Member 'MotionTrackedDeviceFunctionLibrary_EnableMotionTrackingOfDevice::ReturnValue' has a wrong offset!");

// Function HeadMountedDisplay.MotionTrackedDeviceFunctionLibrary.EnableMotionTrackingOfSource
// 0x0018 (0x0018 - 0x0000)
struct MotionTrackedDeviceFunctionLibrary_EnableMotionTrackingOfSource final
{
public:
	int32                                         PlayerIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SourceName;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MotionTrackedDeviceFunctionLibrary_EnableMotionTrackingOfSource) == 0x000004, "Wrong alignment on MotionTrackedDeviceFunctionLibrary_EnableMotionTrackingOfSource");
static_assert(sizeof(MotionTrackedDeviceFunctionLibrary_EnableMotionTrackingOfSource) == 0x000018, "Wrong size on MotionTrackedDeviceFunctionLibrary_EnableMotionTrackingOfSource");
static_assert(offsetof(MotionTrackedDeviceFunctionLibrary_EnableMotionTrackingOfSource, PlayerIndex) == 0x000000, "Member 'MotionTrackedDeviceFunctionLibrary_EnableMotionTrackingOfSource::PlayerIndex' has a wrong offset!");
static_assert(offsetof(MotionTrackedDeviceFunctionLibrary_EnableMotionTrackingOfSource, SourceName) == 0x000008, "Member 'MotionTrackedDeviceFunctionLibrary_EnableMotionTrackingOfSource::SourceName' has a wrong offset!");
static_assert(offsetof(MotionTrackedDeviceFunctionLibrary_EnableMotionTrackingOfSource, ReturnValue) == 0x000010, "Member 'MotionTrackedDeviceFunctionLibrary_EnableMotionTrackingOfSource::ReturnValue' has a wrong offset!");

// Function HeadMountedDisplay.MotionTrackedDeviceFunctionLibrary.EnumerateMotionSources
// 0x0010 (0x0010 - 0x0000)
struct MotionTrackedDeviceFunctionLibrary_EnumerateMotionSources final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MotionTrackedDeviceFunctionLibrary_EnumerateMotionSources) == 0x000008, "Wrong alignment on MotionTrackedDeviceFunctionLibrary_EnumerateMotionSources");
static_assert(sizeof(MotionTrackedDeviceFunctionLibrary_EnumerateMotionSources) == 0x000010, "Wrong size on MotionTrackedDeviceFunctionLibrary_EnumerateMotionSources");
static_assert(offsetof(MotionTrackedDeviceFunctionLibrary_EnumerateMotionSources, ReturnValue) == 0x000000, "Member 'MotionTrackedDeviceFunctionLibrary_EnumerateMotionSources::ReturnValue' has a wrong offset!");

// Function HeadMountedDisplay.MotionTrackedDeviceFunctionLibrary.GetMaximumMotionTrackedControllerCount
// 0x0004 (0x0004 - 0x0000)
struct MotionTrackedDeviceFunctionLibrary_GetMaximumMotionTrackedControllerCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MotionTrackedDeviceFunctionLibrary_GetMaximumMotionTrackedControllerCount) == 0x000004, "Wrong alignment on MotionTrackedDeviceFunctionLibrary_GetMaximumMotionTrackedControllerCount");
static_assert(sizeof(MotionTrackedDeviceFunctionLibrary_GetMaximumMotionTrackedControllerCount) == 0x000004, "Wrong size on MotionTrackedDeviceFunctionLibrary_GetMaximumMotionTrackedControllerCount");
static_assert(offsetof(MotionTrackedDeviceFunctionLibrary_GetMaximumMotionTrackedControllerCount, ReturnValue) == 0x000000, "Member 'MotionTrackedDeviceFunctionLibrary_GetMaximumMotionTrackedControllerCount::ReturnValue' has a wrong offset!");

// Function HeadMountedDisplay.MotionTrackedDeviceFunctionLibrary.GetMotionTrackingEnabledControllerCount
// 0x0004 (0x0004 - 0x0000)
struct MotionTrackedDeviceFunctionLibrary_GetMotionTrackingEnabledControllerCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MotionTrackedDeviceFunctionLibrary_GetMotionTrackingEnabledControllerCount) == 0x000004, "Wrong alignment on MotionTrackedDeviceFunctionLibrary_GetMotionTrackingEnabledControllerCount");
static_assert(sizeof(MotionTrackedDeviceFunctionLibrary_GetMotionTrackingEnabledControllerCount) == 0x000004, "Wrong size on MotionTrackedDeviceFunctionLibrary_GetMotionTrackingEnabledControllerCount");
static_assert(offsetof(MotionTrackedDeviceFunctionLibrary_GetMotionTrackingEnabledControllerCount, ReturnValue) == 0x000000, "Member 'MotionTrackedDeviceFunctionLibrary_GetMotionTrackingEnabledControllerCount::ReturnValue' has a wrong offset!");

// Function HeadMountedDisplay.MotionTrackedDeviceFunctionLibrary.IsMotionTrackedDeviceCountManagementNecessary
// 0x0001 (0x0001 - 0x0000)
struct MotionTrackedDeviceFunctionLibrary_IsMotionTrackedDeviceCountManagementNecessary final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MotionTrackedDeviceFunctionLibrary_IsMotionTrackedDeviceCountManagementNecessary) == 0x000001, "Wrong alignment on MotionTrackedDeviceFunctionLibrary_IsMotionTrackedDeviceCountManagementNecessary");
static_assert(sizeof(MotionTrackedDeviceFunctionLibrary_IsMotionTrackedDeviceCountManagementNecessary) == 0x000001, "Wrong size on MotionTrackedDeviceFunctionLibrary_IsMotionTrackedDeviceCountManagementNecessary");
static_assert(offsetof(MotionTrackedDeviceFunctionLibrary_IsMotionTrackedDeviceCountManagementNecessary, ReturnValue) == 0x000000, "Member 'MotionTrackedDeviceFunctionLibrary_IsMotionTrackedDeviceCountManagementNecessary::ReturnValue' has a wrong offset!");

// Function HeadMountedDisplay.MotionTrackedDeviceFunctionLibrary.IsMotionTrackingEnabledForComponent
// 0x0010 (0x0010 - 0x0000)
struct MotionTrackedDeviceFunctionLibrary_IsMotionTrackingEnabledForComponent final
{
public:
	const class UMotionControllerComponent*       MotionControllerComponent;                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MotionTrackedDeviceFunctionLibrary_IsMotionTrackingEnabledForComponent) == 0x000008, "Wrong alignment on MotionTrackedDeviceFunctionLibrary_IsMotionTrackingEnabledForComponent");
static_assert(sizeof(MotionTrackedDeviceFunctionLibrary_IsMotionTrackingEnabledForComponent) == 0x000010, "Wrong size on MotionTrackedDeviceFunctionLibrary_IsMotionTrackingEnabledForComponent");
static_assert(offsetof(MotionTrackedDeviceFunctionLibrary_IsMotionTrackingEnabledForComponent, MotionControllerComponent) == 0x000000, "Member 'MotionTrackedDeviceFunctionLibrary_IsMotionTrackingEnabledForComponent::MotionControllerComponent' has a wrong offset!");
static_assert(offsetof(MotionTrackedDeviceFunctionLibrary_IsMotionTrackingEnabledForComponent, ReturnValue) == 0x000008, "Member 'MotionTrackedDeviceFunctionLibrary_IsMotionTrackingEnabledForComponent::ReturnValue' has a wrong offset!");

// Function HeadMountedDisplay.MotionTrackedDeviceFunctionLibrary.IsMotionTrackingEnabledForDevice
// 0x0008 (0x0008 - 0x0000)
struct MotionTrackedDeviceFunctionLibrary_IsMotionTrackingEnabledForDevice final
{
public:
	int32                                         PlayerIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EControllerHand                               Hand;                                              // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MotionTrackedDeviceFunctionLibrary_IsMotionTrackingEnabledForDevice) == 0x000004, "Wrong alignment on MotionTrackedDeviceFunctionLibrary_IsMotionTrackingEnabledForDevice");
static_assert(sizeof(MotionTrackedDeviceFunctionLibrary_IsMotionTrackingEnabledForDevice) == 0x000008, "Wrong size on MotionTrackedDeviceFunctionLibrary_IsMotionTrackingEnabledForDevice");
static_assert(offsetof(MotionTrackedDeviceFunctionLibrary_IsMotionTrackingEnabledForDevice, PlayerIndex) == 0x000000, "Member 'MotionTrackedDeviceFunctionLibrary_IsMotionTrackingEnabledForDevice::PlayerIndex' has a wrong offset!");
static_assert(offsetof(MotionTrackedDeviceFunctionLibrary_IsMotionTrackingEnabledForDevice, Hand) == 0x000004, "Member 'MotionTrackedDeviceFunctionLibrary_IsMotionTrackingEnabledForDevice::Hand' has a wrong offset!");
static_assert(offsetof(MotionTrackedDeviceFunctionLibrary_IsMotionTrackingEnabledForDevice, ReturnValue) == 0x000005, "Member 'MotionTrackedDeviceFunctionLibrary_IsMotionTrackingEnabledForDevice::ReturnValue' has a wrong offset!");

// Function HeadMountedDisplay.MotionTrackedDeviceFunctionLibrary.IsMotionTrackingEnabledForSource
// 0x0018 (0x0018 - 0x0000)
struct MotionTrackedDeviceFunctionLibrary_IsMotionTrackingEnabledForSource final
{
public:
	int32                                         PlayerIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SourceName;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MotionTrackedDeviceFunctionLibrary_IsMotionTrackingEnabledForSource) == 0x000004, "Wrong alignment on MotionTrackedDeviceFunctionLibrary_IsMotionTrackingEnabledForSource");
static_assert(sizeof(MotionTrackedDeviceFunctionLibrary_IsMotionTrackingEnabledForSource) == 0x000018, "Wrong size on MotionTrackedDeviceFunctionLibrary_IsMotionTrackingEnabledForSource");
static_assert(offsetof(MotionTrackedDeviceFunctionLibrary_IsMotionTrackingEnabledForSource, PlayerIndex) == 0x000000, "Member 'MotionTrackedDeviceFunctionLibrary_IsMotionTrackingEnabledForSource::PlayerIndex' has a wrong offset!");
static_assert(offsetof(MotionTrackedDeviceFunctionLibrary_IsMotionTrackingEnabledForSource, SourceName) == 0x000008, "Member 'MotionTrackedDeviceFunctionLibrary_IsMotionTrackingEnabledForSource::SourceName' has a wrong offset!");
static_assert(offsetof(MotionTrackedDeviceFunctionLibrary_IsMotionTrackingEnabledForSource, ReturnValue) == 0x000010, "Member 'MotionTrackedDeviceFunctionLibrary_IsMotionTrackingEnabledForSource::ReturnValue' has a wrong offset!");

// Function HeadMountedDisplay.MotionTrackedDeviceFunctionLibrary.SetIsControllerMotionTrackingEnabledByDefault
// 0x0001 (0x0001 - 0x0000)
struct MotionTrackedDeviceFunctionLibrary_SetIsControllerMotionTrackingEnabledByDefault final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MotionTrackedDeviceFunctionLibrary_SetIsControllerMotionTrackingEnabledByDefault) == 0x000001, "Wrong alignment on MotionTrackedDeviceFunctionLibrary_SetIsControllerMotionTrackingEnabledByDefault");
static_assert(sizeof(MotionTrackedDeviceFunctionLibrary_SetIsControllerMotionTrackingEnabledByDefault) == 0x000001, "Wrong size on MotionTrackedDeviceFunctionLibrary_SetIsControllerMotionTrackingEnabledByDefault");
static_assert(offsetof(MotionTrackedDeviceFunctionLibrary_SetIsControllerMotionTrackingEnabledByDefault, Enable) == 0x000000, "Member 'MotionTrackedDeviceFunctionLibrary_SetIsControllerMotionTrackingEnabledByDefault::Enable' has a wrong offset!");

}

