#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MovieScene

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum MovieScene.EMovieSceneKeyInterpolation
// NumValues: 0x0006
enum class EMovieSceneKeyInterpolation : uint8
{
	Auto                                     = 0,
	User                                     = 1,
	Break                                    = 2,
	Linear                                   = 3,
	Constant                                 = 4,
	EMovieSceneKeyInterpolation_MAX          = 5,
};

// Enum MovieScene.EMovieSceneBlendType
// NumValues: 0x0004
enum class EMovieSceneBlendType : uint8
{
	Absolute                                 = 1,
	Additive                                 = 2,
	Relative                                 = 4,
	EMovieSceneBlendType_MAX                 = 5,
};

// Enum MovieScene.EMovieSceneBuiltInEasing
// NumValues: 0x0017
enum class EMovieSceneBuiltInEasing : uint8
{
	Linear                                   = 0,
	SinIn                                    = 1,
	SinOut                                   = 2,
	SinInOut                                 = 3,
	QuadIn                                   = 4,
	QuadOut                                  = 5,
	QuadInOut                                = 6,
	CubicIn                                  = 7,
	CubicOut                                 = 8,
	CubicInOut                               = 9,
	QuartIn                                  = 10,
	QuartOut                                 = 11,
	QuartInOut                               = 12,
	QuintIn                                  = 13,
	QuintOut                                 = 14,
	QuintInOut                               = 15,
	ExpoIn                                   = 16,
	ExpoOut                                  = 17,
	ExpoInOut                                = 18,
	CircIn                                   = 19,
	CircOut                                  = 20,
	CircInOut                                = 21,
	EMovieSceneBuiltInEasing_MAX             = 22,
};

// Enum MovieScene.EEvaluationMethod
// NumValues: 0x0003
enum class EEvaluationMethod : uint8
{
	Static                                   = 0,
	Swept                                    = 1,
	EEvaluationMethod_MAX                    = 2,
};

// Enum MovieScene.EMovieScenePlayerStatus
// NumValues: 0x0008
enum class EMovieScenePlayerStatus : uint8
{
	Stopped                                  = 0,
	Playing                                  = 1,
	Recording                                = 2,
	Scrubbing                                = 3,
	Jumping                                  = 4,
	Stepping                                 = 5,
	Paused                                   = 6,
	MAX                                      = 7,
};

// Enum MovieScene.EMovieSceneObjectBindingSpace
// NumValues: 0x0003
enum class EMovieSceneObjectBindingSpace : uint8
{
	Local                                    = 0,
	Root                                     = 1,
	EMovieSceneObjectBindingSpace_MAX        = 2,
};

// Enum MovieScene.EMovieSceneCompletionMode
// NumValues: 0x0004
enum class EMovieSceneCompletionMode : uint8
{
	KeepState                                = 0,
	RestoreState                             = 1,
	ProjectDefault                           = 2,
	EMovieSceneCompletionMode_MAX            = 3,
};

// Enum MovieScene.ESectionEvaluationFlags
// NumValues: 0x0004
enum class ESectionEvaluationFlags : uint8
{
	None                                     = 0,
	PreRoll                                  = 1,
	PostRoll                                 = 2,
	ESectionEvaluationFlags_MAX              = 3,
};

// Enum MovieScene.ESpawnOwnership
// NumValues: 0x0004
enum class ESpawnOwnership : uint8
{
	InnerSequence                            = 0,
	MasterSequence                           = 1,
	External                                 = 2,
	ESpawnOwnership_MAX                      = 3,
};

// ScriptStruct MovieScene.MovieSceneObjectBindingID
// 0x0018 (0x0018 - 0x0000)
struct FMovieSceneObjectBindingID final
{
public:
	int32                                         SequenceID;                                        // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EMovieSceneObjectBindingSpace                 Space;                                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  Guid;                                              // 0x0008(0x0010)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FMovieSceneObjectBindingID) == 0x000004, "Wrong alignment on FMovieSceneObjectBindingID");
static_assert(sizeof(FMovieSceneObjectBindingID) == 0x000018, "Wrong size on FMovieSceneObjectBindingID");
static_assert(offsetof(FMovieSceneObjectBindingID, SequenceID) == 0x000000, "Member 'FMovieSceneObjectBindingID::SequenceID' has a wrong offset!");
static_assert(offsetof(FMovieSceneObjectBindingID, Space) == 0x000004, "Member 'FMovieSceneObjectBindingID::Space' has a wrong offset!");
static_assert(offsetof(FMovieSceneObjectBindingID, Guid) == 0x000008, "Member 'FMovieSceneObjectBindingID::Guid' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneBindingOverrideData
// 0x0024 (0x0024 - 0x0000)
struct FMovieSceneBindingOverrideData final
{
public:
	struct FMovieSceneObjectBindingID             ObjectBindingId;                                   // 0x0000(0x0018)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UObject>                 Object;                                            // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverridesDefault;                                 // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneBindingOverrideData) == 0x000004, "Wrong alignment on FMovieSceneBindingOverrideData");
static_assert(sizeof(FMovieSceneBindingOverrideData) == 0x000024, "Wrong size on FMovieSceneBindingOverrideData");
static_assert(offsetof(FMovieSceneBindingOverrideData, ObjectBindingId) == 0x000000, "Member 'FMovieSceneBindingOverrideData::ObjectBindingId' has a wrong offset!");
static_assert(offsetof(FMovieSceneBindingOverrideData, Object) == 0x000018, "Member 'FMovieSceneBindingOverrideData::Object' has a wrong offset!");
static_assert(offsetof(FMovieSceneBindingOverrideData, bOverridesDefault) == 0x000020, "Member 'FMovieSceneBindingOverrideData::bOverridesDefault' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneSequencePlaybackSettings
// 0x0030 (0x0030 - 0x0000)
struct FMovieSceneSequencePlaybackSettings final
{
public:
	int32                                         LoopCount;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRandomStartTime;                                  // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartTime;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRestoreState;                                     // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableMovementInput;                             // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableLookAtInput;                               // 0x0012(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHidePlayer;                                       // 0x0013(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideHud;                                          // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableCameraCuts;                                // 0x0015(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                InstanceData;                                      // 0x0018(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TScriptInterface<class IMovieSceneBindingOverridesInterface> BindingOverrides;                                  // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieSceneSequencePlaybackSettings) == 0x000008, "Wrong alignment on FMovieSceneSequencePlaybackSettings");
static_assert(sizeof(FMovieSceneSequencePlaybackSettings) == 0x000030, "Wrong size on FMovieSceneSequencePlaybackSettings");
static_assert(offsetof(FMovieSceneSequencePlaybackSettings, LoopCount) == 0x000000, "Member 'FMovieSceneSequencePlaybackSettings::LoopCount' has a wrong offset!");
static_assert(offsetof(FMovieSceneSequencePlaybackSettings, PlayRate) == 0x000004, "Member 'FMovieSceneSequencePlaybackSettings::PlayRate' has a wrong offset!");
static_assert(offsetof(FMovieSceneSequencePlaybackSettings, bRandomStartTime) == 0x000008, "Member 'FMovieSceneSequencePlaybackSettings::bRandomStartTime' has a wrong offset!");
static_assert(offsetof(FMovieSceneSequencePlaybackSettings, StartTime) == 0x00000C, "Member 'FMovieSceneSequencePlaybackSettings::StartTime' has a wrong offset!");
static_assert(offsetof(FMovieSceneSequencePlaybackSettings, bRestoreState) == 0x000010, "Member 'FMovieSceneSequencePlaybackSettings::bRestoreState' has a wrong offset!");
static_assert(offsetof(FMovieSceneSequencePlaybackSettings, bDisableMovementInput) == 0x000011, "Member 'FMovieSceneSequencePlaybackSettings::bDisableMovementInput' has a wrong offset!");
static_assert(offsetof(FMovieSceneSequencePlaybackSettings, bDisableLookAtInput) == 0x000012, "Member 'FMovieSceneSequencePlaybackSettings::bDisableLookAtInput' has a wrong offset!");
static_assert(offsetof(FMovieSceneSequencePlaybackSettings, bHidePlayer) == 0x000013, "Member 'FMovieSceneSequencePlaybackSettings::bHidePlayer' has a wrong offset!");
static_assert(offsetof(FMovieSceneSequencePlaybackSettings, bHideHud) == 0x000014, "Member 'FMovieSceneSequencePlaybackSettings::bHideHud' has a wrong offset!");
static_assert(offsetof(FMovieSceneSequencePlaybackSettings, bDisableCameraCuts) == 0x000015, "Member 'FMovieSceneSequencePlaybackSettings::bDisableCameraCuts' has a wrong offset!");
static_assert(offsetof(FMovieSceneSequencePlaybackSettings, InstanceData) == 0x000018, "Member 'FMovieSceneSequencePlaybackSettings::InstanceData' has a wrong offset!");
static_assert(offsetof(FMovieSceneSequencePlaybackSettings, BindingOverrides) == 0x000020, "Member 'FMovieSceneSequencePlaybackSettings::BindingOverrides' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneTrackLabels
// 0x0010 (0x0010 - 0x0000)
struct FMovieSceneTrackLabels final
{
public:
	TArray<class FString>                         Strings;                                           // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieSceneTrackLabels) == 0x000008, "Wrong alignment on FMovieSceneTrackLabels");
static_assert(sizeof(FMovieSceneTrackLabels) == 0x000010, "Wrong size on FMovieSceneTrackLabels");
static_assert(offsetof(FMovieSceneTrackLabels, Strings) == 0x000000, "Member 'FMovieSceneTrackLabels::Strings' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneBinding
// 0x0030 (0x0030 - 0x0000)
struct FMovieSceneBinding final
{
public:
	struct FGuid                                  ObjectGuid;                                        // 0x0000(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 BindingName;                                       // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UMovieSceneTrack*>               Tracks;                                            // 0x0020(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FMovieSceneBinding) == 0x000008, "Wrong alignment on FMovieSceneBinding");
static_assert(sizeof(FMovieSceneBinding) == 0x000030, "Wrong size on FMovieSceneBinding");
static_assert(offsetof(FMovieSceneBinding, ObjectGuid) == 0x000000, "Member 'FMovieSceneBinding::ObjectGuid' has a wrong offset!");
static_assert(offsetof(FMovieSceneBinding, BindingName) == 0x000010, "Member 'FMovieSceneBinding::BindingName' has a wrong offset!");
static_assert(offsetof(FMovieSceneBinding, Tracks) == 0x000020, "Member 'FMovieSceneBinding::Tracks' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneTrackImplementationPtr
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x08) FMovieSceneTrackImplementationPtr final
{
public:
	uint8                                         Pad_0[0x38];                                       // 0x0000(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneTrackImplementationPtr) == 0x000008, "Wrong alignment on FMovieSceneTrackImplementationPtr");
static_assert(sizeof(FMovieSceneTrackImplementationPtr) == 0x000038, "Wrong size on FMovieSceneTrackImplementationPtr");

// ScriptStruct MovieScene.MovieSceneExpansionState
// 0x0001 (0x0001 - 0x0000)
struct FMovieSceneExpansionState final
{
public:
	bool                                          bExpanded;                                         // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieSceneExpansionState) == 0x000001, "Wrong alignment on FMovieSceneExpansionState");
static_assert(sizeof(FMovieSceneExpansionState) == 0x000001, "Wrong size on FMovieSceneExpansionState");
static_assert(offsetof(FMovieSceneExpansionState, bExpanded) == 0x000000, "Member 'FMovieSceneExpansionState::bExpanded' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneEditorData
// 0x0070 (0x0070 - 0x0000)
struct FMovieSceneEditorData final
{
public:
	TMap<class FString, struct FMovieSceneExpansionState> ExpansionStates;                                   // 0x0000(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FFloatRange                            WorkingRange;                                      // 0x0050(0x0010)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatRange                            ViewRange;                                         // 0x0060(0x0010)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieSceneEditorData) == 0x000008, "Wrong alignment on FMovieSceneEditorData");
static_assert(sizeof(FMovieSceneEditorData) == 0x000070, "Wrong size on FMovieSceneEditorData");
static_assert(offsetof(FMovieSceneEditorData, ExpansionStates) == 0x000000, "Member 'FMovieSceneEditorData::ExpansionStates' has a wrong offset!");
static_assert(offsetof(FMovieSceneEditorData, WorkingRange) == 0x000050, "Member 'FMovieSceneEditorData::WorkingRange' has a wrong offset!");
static_assert(offsetof(FMovieSceneEditorData, ViewRange) == 0x000060, "Member 'FMovieSceneEditorData::ViewRange' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneKeyStruct
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FMovieSceneKeyStruct
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneKeyStruct) == 0x000008, "Wrong alignment on FMovieSceneKeyStruct");
static_assert(sizeof(FMovieSceneKeyStruct) == 0x000008, "Wrong size on FMovieSceneKeyStruct");

// ScriptStruct MovieScene.OptionalMovieSceneBlendType
// 0x0002 (0x0002 - 0x0000)
struct FOptionalMovieSceneBlendType final
{
public:
	EMovieSceneBlendType                          BlendType;                                         // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsValid;                                          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FOptionalMovieSceneBlendType) == 0x000001, "Wrong alignment on FOptionalMovieSceneBlendType");
static_assert(sizeof(FOptionalMovieSceneBlendType) == 0x000002, "Wrong size on FOptionalMovieSceneBlendType");
static_assert(offsetof(FOptionalMovieSceneBlendType, BlendType) == 0x000000, "Member 'FOptionalMovieSceneBlendType::BlendType' has a wrong offset!");
static_assert(offsetof(FOptionalMovieSceneBlendType, bIsValid) == 0x000001, "Member 'FOptionalMovieSceneBlendType::bIsValid' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneSubSectionData
// 0x001C (0x001C - 0x0000)
struct FMovieSceneSubSectionData final
{
public:
	TWeakObjectPtr<class UMovieSceneSubSection>   Section;                                           // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  ObjectBindingId;                                   // 0x0008(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESectionEvaluationFlags                       Flags;                                             // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneSubSectionData) == 0x000004, "Wrong alignment on FMovieSceneSubSectionData");
static_assert(sizeof(FMovieSceneSubSectionData) == 0x00001C, "Wrong size on FMovieSceneSubSectionData");
static_assert(offsetof(FMovieSceneSubSectionData, Section) == 0x000000, "Member 'FMovieSceneSubSectionData::Section' has a wrong offset!");
static_assert(offsetof(FMovieSceneSubSectionData, ObjectBindingId) == 0x000008, "Member 'FMovieSceneSubSectionData::ObjectBindingId' has a wrong offset!");
static_assert(offsetof(FMovieSceneSubSectionData, Flags) == 0x000018, "Member 'FMovieSceneSubSectionData::Flags' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneSubSectionFieldData
// 0x0060 (0x0060 - 0x0000)
struct alignas(0x08) FMovieSceneSubSectionFieldData final
{
public:
	uint8                                         Pad_0[0x60];                                       // 0x0000(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneSubSectionFieldData) == 0x000008, "Wrong alignment on FMovieSceneSubSectionFieldData");
static_assert(sizeof(FMovieSceneSubSectionFieldData) == 0x000060, "Wrong size on FMovieSceneSubSectionFieldData");

// ScriptStruct MovieScene.MovieSceneEvalTemplateBase
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FMovieSceneEvalTemplateBase
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneEvalTemplateBase) == 0x000008, "Wrong alignment on FMovieSceneEvalTemplateBase");
static_assert(sizeof(FMovieSceneEvalTemplateBase) == 0x000010, "Wrong size on FMovieSceneEvalTemplateBase");

// ScriptStruct MovieScene.MovieSceneTrackImplementation
// 0x0000 (0x0010 - 0x0010)
struct FMovieSceneTrackImplementation final : public FMovieSceneEvalTemplateBase
{
};
static_assert(alignof(FMovieSceneTrackImplementation) == 0x000008, "Wrong alignment on FMovieSceneTrackImplementation");
static_assert(sizeof(FMovieSceneTrackImplementation) == 0x000010, "Wrong size on FMovieSceneTrackImplementation");

// ScriptStruct MovieScene.MovieSceneEvalTemplatePtr
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x08) FMovieSceneEvalTemplatePtr final
{
public:
	uint8                                         Pad_0[0x38];                                       // 0x0000(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneEvalTemplatePtr) == 0x000008, "Wrong alignment on FMovieSceneEvalTemplatePtr");
static_assert(sizeof(FMovieSceneEvalTemplatePtr) == 0x000038, "Wrong size on FMovieSceneEvalTemplatePtr");

// ScriptStruct MovieScene.MovieScenePropertySectionData
// 0x0028 (0x0028 - 0x0000)
struct FMovieScenePropertySectionData final
{
public:
	class FName                                   PropertyName;                                      // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PropertyPath;                                      // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FunctionName;                                      // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NotifyFunctionName;                                // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieScenePropertySectionData) == 0x000008, "Wrong alignment on FMovieScenePropertySectionData");
static_assert(sizeof(FMovieScenePropertySectionData) == 0x000028, "Wrong size on FMovieScenePropertySectionData");
static_assert(offsetof(FMovieScenePropertySectionData, PropertyName) == 0x000000, "Member 'FMovieScenePropertySectionData::PropertyName' has a wrong offset!");
static_assert(offsetof(FMovieScenePropertySectionData, PropertyPath) == 0x000008, "Member 'FMovieScenePropertySectionData::PropertyPath' has a wrong offset!");
static_assert(offsetof(FMovieScenePropertySectionData, FunctionName) == 0x000018, "Member 'FMovieScenePropertySectionData::FunctionName' has a wrong offset!");
static_assert(offsetof(FMovieScenePropertySectionData, NotifyFunctionName) == 0x000020, "Member 'FMovieScenePropertySectionData::NotifyFunctionName' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneEvalTemplate
// 0x0010 (0x0020 - 0x0010)
struct FMovieSceneEvalTemplate : public FMovieSceneEvalTemplateBase
{
public:
	EMovieSceneCompletionMode                     CompletionMode;                                    // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMovieSceneSection*                     SourceSection;                                     // 0x0018(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FMovieSceneEvalTemplate) == 0x000008, "Wrong alignment on FMovieSceneEvalTemplate");
static_assert(sizeof(FMovieSceneEvalTemplate) == 0x000020, "Wrong size on FMovieSceneEvalTemplate");
static_assert(offsetof(FMovieSceneEvalTemplate, CompletionMode) == 0x000010, "Member 'FMovieSceneEvalTemplate::CompletionMode' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvalTemplate, SourceSection) == 0x000018, "Member 'FMovieSceneEvalTemplate::SourceSection' has a wrong offset!");

// ScriptStruct MovieScene.MovieScenePropertySectionTemplate
// 0x0028 (0x0048 - 0x0020)
struct FMovieScenePropertySectionTemplate : public FMovieSceneEvalTemplate
{
public:
	struct FMovieScenePropertySectionData         PropertyData;                                      // 0x0020(0x0028)(Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FMovieScenePropertySectionTemplate) == 0x000008, "Wrong alignment on FMovieScenePropertySectionTemplate");
static_assert(sizeof(FMovieScenePropertySectionTemplate) == 0x000048, "Wrong size on FMovieScenePropertySectionTemplate");
static_assert(offsetof(FMovieScenePropertySectionTemplate, PropertyData) == 0x000020, "Member 'FMovieScenePropertySectionTemplate::PropertyData' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneEmptyStruct
// 0x0001 (0x0001 - 0x0000)
struct FMovieSceneEmptyStruct final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneEmptyStruct) == 0x000001, "Wrong alignment on FMovieSceneEmptyStruct");
static_assert(sizeof(FMovieSceneEmptyStruct) == 0x000001, "Wrong size on FMovieSceneEmptyStruct");

// ScriptStruct MovieScene.MovieSceneEvaluationGroupLUTIndex
// 0x000C (0x000C - 0x0000)
struct FMovieSceneEvaluationGroupLUTIndex final
{
public:
	int32                                         LUTOffset;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumInitPtrs;                                       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumEvalPtrs;                                       // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieSceneEvaluationGroupLUTIndex) == 0x000004, "Wrong alignment on FMovieSceneEvaluationGroupLUTIndex");
static_assert(sizeof(FMovieSceneEvaluationGroupLUTIndex) == 0x00000C, "Wrong size on FMovieSceneEvaluationGroupLUTIndex");
static_assert(offsetof(FMovieSceneEvaluationGroupLUTIndex, LUTOffset) == 0x000000, "Member 'FMovieSceneEvaluationGroupLUTIndex::LUTOffset' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvaluationGroupLUTIndex, NumInitPtrs) == 0x000004, "Member 'FMovieSceneEvaluationGroupLUTIndex::NumInitPtrs' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvaluationGroupLUTIndex, NumEvalPtrs) == 0x000008, "Member 'FMovieSceneEvaluationGroupLUTIndex::NumEvalPtrs' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneSegmentIdentifier
// 0x0004 (0x0004 - 0x0000)
struct FMovieSceneSegmentIdentifier final
{
public:
	int32                                         IdentifierIndex;                                   // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FMovieSceneSegmentIdentifier) == 0x000004, "Wrong alignment on FMovieSceneSegmentIdentifier");
static_assert(sizeof(FMovieSceneSegmentIdentifier) == 0x000004, "Wrong size on FMovieSceneSegmentIdentifier");
static_assert(offsetof(FMovieSceneSegmentIdentifier, IdentifierIndex) == 0x000000, "Member 'FMovieSceneSegmentIdentifier::IdentifierIndex' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneSequenceID
// 0x0004 (0x0004 - 0x0000)
struct FMovieSceneSequenceID final
{
public:
	uint32                                        Value;                                             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FMovieSceneSequenceID) == 0x000004, "Wrong alignment on FMovieSceneSequenceID");
static_assert(sizeof(FMovieSceneSequenceID) == 0x000004, "Wrong size on FMovieSceneSequenceID");
static_assert(offsetof(FMovieSceneSequenceID, Value) == 0x000000, "Member 'FMovieSceneSequenceID::Value' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneTrackIdentifier
// 0x0004 (0x0004 - 0x0000)
struct FMovieSceneTrackIdentifier final
{
public:
	uint32                                        Value;                                             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FMovieSceneTrackIdentifier) == 0x000004, "Wrong alignment on FMovieSceneTrackIdentifier");
static_assert(sizeof(FMovieSceneTrackIdentifier) == 0x000004, "Wrong size on FMovieSceneTrackIdentifier");
static_assert(offsetof(FMovieSceneTrackIdentifier, Value) == 0x000000, "Member 'FMovieSceneTrackIdentifier::Value' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneEvaluationFieldTrackPtr
// 0x0008 (0x0008 - 0x0000)
struct FMovieSceneEvaluationFieldTrackPtr
{
public:
	struct FMovieSceneSequenceID                  SequenceID;                                        // 0x0000(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieSceneTrackIdentifier             TrackIdentifier;                                   // 0x0004(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieSceneEvaluationFieldTrackPtr) == 0x000004, "Wrong alignment on FMovieSceneEvaluationFieldTrackPtr");
static_assert(sizeof(FMovieSceneEvaluationFieldTrackPtr) == 0x000008, "Wrong size on FMovieSceneEvaluationFieldTrackPtr");
static_assert(offsetof(FMovieSceneEvaluationFieldTrackPtr, SequenceID) == 0x000000, "Member 'FMovieSceneEvaluationFieldTrackPtr::SequenceID' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvaluationFieldTrackPtr, TrackIdentifier) == 0x000004, "Member 'FMovieSceneEvaluationFieldTrackPtr::TrackIdentifier' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneEvaluationFieldSegmentPtr
// 0x0004 (0x000C - 0x0008)
struct FMovieSceneEvaluationFieldSegmentPtr final : public FMovieSceneEvaluationFieldTrackPtr
{
public:
	struct FMovieSceneSegmentIdentifier           SegmentID;                                         // 0x0008(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieSceneEvaluationFieldSegmentPtr) == 0x000004, "Wrong alignment on FMovieSceneEvaluationFieldSegmentPtr");
static_assert(sizeof(FMovieSceneEvaluationFieldSegmentPtr) == 0x00000C, "Wrong size on FMovieSceneEvaluationFieldSegmentPtr");
static_assert(offsetof(FMovieSceneEvaluationFieldSegmentPtr, SegmentID) == 0x000008, "Member 'FMovieSceneEvaluationFieldSegmentPtr::SegmentID' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneEvaluationGroup
// 0x0020 (0x0020 - 0x0000)
struct FMovieSceneEvaluationGroup final
{
public:
	TArray<struct FMovieSceneEvaluationGroupLUTIndex> LUTIndices;                                        // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMovieSceneEvaluationFieldSegmentPtr> SegmentPtrLUT;                                     // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieSceneEvaluationGroup) == 0x000008, "Wrong alignment on FMovieSceneEvaluationGroup");
static_assert(sizeof(FMovieSceneEvaluationGroup) == 0x000020, "Wrong size on FMovieSceneEvaluationGroup");
static_assert(offsetof(FMovieSceneEvaluationGroup, LUTIndices) == 0x000000, "Member 'FMovieSceneEvaluationGroup::LUTIndices' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvaluationGroup, SegmentPtrLUT) == 0x000010, "Member 'FMovieSceneEvaluationGroup::SegmentPtrLUT' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneEvaluationKey
// 0x000C (0x000C - 0x0000)
struct FMovieSceneEvaluationKey final
{
public:
	struct FMovieSceneSequenceID                  SequenceID;                                        // 0x0000(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieSceneTrackIdentifier             TrackIdentifier;                                   // 0x0004(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        SectionIndex;                                      // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieSceneEvaluationKey) == 0x000004, "Wrong alignment on FMovieSceneEvaluationKey");
static_assert(sizeof(FMovieSceneEvaluationKey) == 0x00000C, "Wrong size on FMovieSceneEvaluationKey");
static_assert(offsetof(FMovieSceneEvaluationKey, SequenceID) == 0x000000, "Member 'FMovieSceneEvaluationKey::SequenceID' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvaluationKey, TrackIdentifier) == 0x000004, "Member 'FMovieSceneEvaluationKey::TrackIdentifier' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvaluationKey, SectionIndex) == 0x000008, "Member 'FMovieSceneEvaluationKey::SectionIndex' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneOrderedEvaluationKey
// 0x0010 (0x0010 - 0x0000)
struct FMovieSceneOrderedEvaluationKey final
{
public:
	struct FMovieSceneEvaluationKey               Key;                                               // 0x0000(0x000C)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        EvaluationIndex;                                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieSceneOrderedEvaluationKey) == 0x000004, "Wrong alignment on FMovieSceneOrderedEvaluationKey");
static_assert(sizeof(FMovieSceneOrderedEvaluationKey) == 0x000010, "Wrong size on FMovieSceneOrderedEvaluationKey");
static_assert(offsetof(FMovieSceneOrderedEvaluationKey, Key) == 0x000000, "Member 'FMovieSceneOrderedEvaluationKey::Key' has a wrong offset!");
static_assert(offsetof(FMovieSceneOrderedEvaluationKey, EvaluationIndex) == 0x00000C, "Member 'FMovieSceneOrderedEvaluationKey::EvaluationIndex' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneEvaluationMetaData
// 0x0070 (0x0070 - 0x0000)
struct FMovieSceneEvaluationMetaData final
{
public:
	TArray<struct FMovieSceneSequenceID>          ActiveSequences;                                   // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMovieSceneOrderedEvaluationKey> ActiveEntities;                                    // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<struct FMovieSceneSequenceID, struct FGuid> SubSequenceSignatures;                             // 0x0020(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieSceneEvaluationMetaData) == 0x000008, "Wrong alignment on FMovieSceneEvaluationMetaData");
static_assert(sizeof(FMovieSceneEvaluationMetaData) == 0x000070, "Wrong size on FMovieSceneEvaluationMetaData");
static_assert(offsetof(FMovieSceneEvaluationMetaData, ActiveSequences) == 0x000000, "Member 'FMovieSceneEvaluationMetaData::ActiveSequences' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvaluationMetaData, ActiveEntities) == 0x000010, "Member 'FMovieSceneEvaluationMetaData::ActiveEntities' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvaluationMetaData, SubSequenceSignatures) == 0x000020, "Member 'FMovieSceneEvaluationMetaData::SubSequenceSignatures' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneEvaluationField
// 0x0030 (0x0030 - 0x0000)
struct FMovieSceneEvaluationField final
{
public:
	TArray<struct FFloatRange>                    Ranges;                                            // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FMovieSceneEvaluationGroup>     Groups;                                            // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FMovieSceneEvaluationMetaData>  MetaData;                                          // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FMovieSceneEvaluationField) == 0x000008, "Wrong alignment on FMovieSceneEvaluationField");
static_assert(sizeof(FMovieSceneEvaluationField) == 0x000030, "Wrong size on FMovieSceneEvaluationField");
static_assert(offsetof(FMovieSceneEvaluationField, Ranges) == 0x000000, "Member 'FMovieSceneEvaluationField::Ranges' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvaluationField, Groups) == 0x000010, "Member 'FMovieSceneEvaluationField::Groups' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvaluationField, MetaData) == 0x000020, "Member 'FMovieSceneEvaluationField::MetaData' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneSectionEvalOptions
// 0x0002 (0x0002 - 0x0000)
struct FMovieSceneSectionEvalOptions final
{
public:
	bool                                          bCanEditCompletionMode;                            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMovieSceneCompletionMode                     CompletionMode;                                    // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieSceneSectionEvalOptions) == 0x000001, "Wrong alignment on FMovieSceneSectionEvalOptions");
static_assert(sizeof(FMovieSceneSectionEvalOptions) == 0x000002, "Wrong size on FMovieSceneSectionEvalOptions");
static_assert(offsetof(FMovieSceneSectionEvalOptions, bCanEditCompletionMode) == 0x000000, "Member 'FMovieSceneSectionEvalOptions::bCanEditCompletionMode' has a wrong offset!");
static_assert(offsetof(FMovieSceneSectionEvalOptions, CompletionMode) == 0x000001, "Member 'FMovieSceneSectionEvalOptions::CompletionMode' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneSequenceInstanceDataPtr
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FMovieSceneSequenceInstanceDataPtr final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneSequenceInstanceDataPtr) == 0x000008, "Wrong alignment on FMovieSceneSequenceInstanceDataPtr");
static_assert(sizeof(FMovieSceneSequenceInstanceDataPtr) == 0x000018, "Wrong size on FMovieSceneSequenceInstanceDataPtr");

// ScriptStruct MovieScene.MovieSceneSequenceInstanceData
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FMovieSceneSequenceInstanceData final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneSequenceInstanceData) == 0x000008, "Wrong alignment on FMovieSceneSequenceInstanceData");
static_assert(sizeof(FMovieSceneSequenceInstanceData) == 0x000008, "Wrong size on FMovieSceneSequenceInstanceData");

// ScriptStruct MovieScene.MovieSceneEvaluationOperand
// 0x0014 (0x0014 - 0x0000)
struct FMovieSceneEvaluationOperand final
{
public:
	struct FGuid                                  ObjectBindingId;                                   // 0x0000(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieSceneSequenceID                  SequenceID;                                        // 0x0010(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieSceneEvaluationOperand) == 0x000004, "Wrong alignment on FMovieSceneEvaluationOperand");
static_assert(sizeof(FMovieSceneEvaluationOperand) == 0x000014, "Wrong size on FMovieSceneEvaluationOperand");
static_assert(offsetof(FMovieSceneEvaluationOperand, ObjectBindingId) == 0x000000, "Member 'FMovieSceneEvaluationOperand::ObjectBindingId' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvaluationOperand, SequenceID) == 0x000010, "Member 'FMovieSceneEvaluationOperand::SequenceID' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneSegment
// 0x0058 (0x0058 - 0x0000)
struct alignas(0x08) FMovieSceneSegment final
{
public:
	uint8                                         Pad_0[0x58];                                       // 0x0000(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneSegment) == 0x000008, "Wrong alignment on FMovieSceneSegment");
static_assert(sizeof(FMovieSceneSegment) == 0x000058, "Wrong size on FMovieSceneSegment");

// ScriptStruct MovieScene.MovieSceneEvaluationTrackSegments
// 0x0020 (0x0020 - 0x0000)
struct FMovieSceneEvaluationTrackSegments final
{
public:
	TArray<int32>                                 SegmentIdentifierToIndex;                          // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FMovieSceneSegment>             SortedSegments;                                    // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FMovieSceneEvaluationTrackSegments) == 0x000008, "Wrong alignment on FMovieSceneEvaluationTrackSegments");
static_assert(sizeof(FMovieSceneEvaluationTrackSegments) == 0x000020, "Wrong size on FMovieSceneEvaluationTrackSegments");
static_assert(offsetof(FMovieSceneEvaluationTrackSegments, SegmentIdentifierToIndex) == 0x000000, "Member 'FMovieSceneEvaluationTrackSegments::SegmentIdentifierToIndex' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvaluationTrackSegments, SortedSegments) == 0x000010, "Member 'FMovieSceneEvaluationTrackSegments::SortedSegments' has a wrong offset!");

// ScriptStruct MovieScene.SectionEvaluationDataTree
// 0x0060 (0x0060 - 0x0000)
struct alignas(0x08) FSectionEvaluationDataTree final
{
public:
	uint8                                         Pad_0[0x60];                                       // 0x0000(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSectionEvaluationDataTree) == 0x000008, "Wrong alignment on FSectionEvaluationDataTree");
static_assert(sizeof(FSectionEvaluationDataTree) == 0x000060, "Wrong size on FSectionEvaluationDataTree");

// ScriptStruct MovieScene.MovieSceneEvaluationTrack
// 0x00F8 (0x00F8 - 0x0000)
struct FMovieSceneEvaluationTrack final
{
public:
	struct FGuid                                  ObjectBindingId;                                   // 0x0000(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint16                                        EvaluationPriority;                                // 0x0010(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EEvaluationMethod                             EvaluationMethod;                                  // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneEvaluationTrackSegments     Segments;                                          // 0x0018(0x0020)(NativeAccessSpecifierPrivate)
	class UMovieSceneTrack*                       SourceTrack;                                       // 0x0038(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FSectionEvaluationDataTree             EvaluationTree;                                    // 0x0040(0x0060)(NativeAccessSpecifierPrivate)
	TArray<struct FMovieSceneEvalTemplatePtr>     ChildTemplates;                                    // 0x00A0(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	struct FMovieSceneTrackImplementationPtr      TrackTemplate;                                     // 0x00B0(0x0038)(NativeAccessSpecifierPrivate)
	class FName                                   EvaluationGroup;                                   // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         bEvaluateInPreroll : 1;                            // 0x00F0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bEvaluateInPostroll : 1;                           // 0x00F0(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneEvaluationTrack) == 0x000008, "Wrong alignment on FMovieSceneEvaluationTrack");
static_assert(sizeof(FMovieSceneEvaluationTrack) == 0x0000F8, "Wrong size on FMovieSceneEvaluationTrack");
static_assert(offsetof(FMovieSceneEvaluationTrack, ObjectBindingId) == 0x000000, "Member 'FMovieSceneEvaluationTrack::ObjectBindingId' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvaluationTrack, EvaluationPriority) == 0x000010, "Member 'FMovieSceneEvaluationTrack::EvaluationPriority' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvaluationTrack, EvaluationMethod) == 0x000012, "Member 'FMovieSceneEvaluationTrack::EvaluationMethod' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvaluationTrack, Segments) == 0x000018, "Member 'FMovieSceneEvaluationTrack::Segments' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvaluationTrack, SourceTrack) == 0x000038, "Member 'FMovieSceneEvaluationTrack::SourceTrack' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvaluationTrack, EvaluationTree) == 0x000040, "Member 'FMovieSceneEvaluationTrack::EvaluationTree' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvaluationTrack, ChildTemplates) == 0x0000A0, "Member 'FMovieSceneEvaluationTrack::ChildTemplates' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvaluationTrack, TrackTemplate) == 0x0000B0, "Member 'FMovieSceneEvaluationTrack::TrackTemplate' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvaluationTrack, EvaluationGroup) == 0x0000E8, "Member 'FMovieSceneEvaluationTrack::EvaluationGroup' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneTrackFieldData
// 0x0060 (0x0060 - 0x0000)
struct alignas(0x08) FMovieSceneTrackFieldData final
{
public:
	uint8                                         Pad_0[0x60];                                       // 0x0000(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneTrackFieldData) == 0x000008, "Wrong alignment on FMovieSceneTrackFieldData");
static_assert(sizeof(FMovieSceneTrackFieldData) == 0x000060, "Wrong size on FMovieSceneTrackFieldData");

// ScriptStruct MovieScene.MovieSceneSequenceTransform
// 0x0008 (0x0008 - 0x0000)
struct FMovieSceneSequenceTransform final
{
public:
	float                                         TimeScale;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Offset;                                            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieSceneSequenceTransform) == 0x000004, "Wrong alignment on FMovieSceneSequenceTransform");
static_assert(sizeof(FMovieSceneSequenceTransform) == 0x000008, "Wrong size on FMovieSceneSequenceTransform");
static_assert(offsetof(FMovieSceneSequenceTransform, TimeScale) == 0x000000, "Member 'FMovieSceneSequenceTransform::TimeScale' has a wrong offset!");
static_assert(offsetof(FMovieSceneSequenceTransform, Offset) == 0x000004, "Member 'FMovieSceneSequenceTransform::Offset' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneSubSequenceData
// 0x0078 (0x0078 - 0x0000)
struct FMovieSceneSubSequenceData final
{
public:
	struct FSoftObjectPath                        Sequence;                                          // 0x0000(0x0018)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieSceneSequenceTransform           RootToSequenceTransform;                           // 0x0018(0x0008)(NoDestructor, NativeAccessSpecifierPublic)
	struct FMovieSceneSequenceID                  DeterministicSequenceID;                           // 0x0020(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatRange                            PlayRange;                                         // 0x0024(0x0010)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatRange                            PreRollRange;                                      // 0x0034(0x0010)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatRange                            PostRollRange;                                     // 0x0044(0x0010)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HierarchicalBias;                                  // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieSceneSequenceInstanceDataPtr     InstanceData;                                      // 0x0058(0x0018)(NativeAccessSpecifierPublic)
	uint8                                         Pad_70[0x8];                                       // 0x0070(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneSubSequenceData) == 0x000008, "Wrong alignment on FMovieSceneSubSequenceData");
static_assert(sizeof(FMovieSceneSubSequenceData) == 0x000078, "Wrong size on FMovieSceneSubSequenceData");
static_assert(offsetof(FMovieSceneSubSequenceData, Sequence) == 0x000000, "Member 'FMovieSceneSubSequenceData::Sequence' has a wrong offset!");
static_assert(offsetof(FMovieSceneSubSequenceData, RootToSequenceTransform) == 0x000018, "Member 'FMovieSceneSubSequenceData::RootToSequenceTransform' has a wrong offset!");
static_assert(offsetof(FMovieSceneSubSequenceData, DeterministicSequenceID) == 0x000020, "Member 'FMovieSceneSubSequenceData::DeterministicSequenceID' has a wrong offset!");
static_assert(offsetof(FMovieSceneSubSequenceData, PlayRange) == 0x000024, "Member 'FMovieSceneSubSequenceData::PlayRange' has a wrong offset!");
static_assert(offsetof(FMovieSceneSubSequenceData, PreRollRange) == 0x000034, "Member 'FMovieSceneSubSequenceData::PreRollRange' has a wrong offset!");
static_assert(offsetof(FMovieSceneSubSequenceData, PostRollRange) == 0x000044, "Member 'FMovieSceneSubSequenceData::PostRollRange' has a wrong offset!");
static_assert(offsetof(FMovieSceneSubSequenceData, HierarchicalBias) == 0x000054, "Member 'FMovieSceneSubSequenceData::HierarchicalBias' has a wrong offset!");
static_assert(offsetof(FMovieSceneSubSequenceData, InstanceData) == 0x000058, "Member 'FMovieSceneSubSequenceData::InstanceData' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneSequenceHierarchyNode
// 0x0018 (0x0018 - 0x0000)
struct FMovieSceneSequenceHierarchyNode final
{
public:
	struct FMovieSceneSequenceID                  ParentID;                                          // 0x0000(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMovieSceneSequenceID>          Children;                                          // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieSceneSequenceHierarchyNode) == 0x000008, "Wrong alignment on FMovieSceneSequenceHierarchyNode");
static_assert(sizeof(FMovieSceneSequenceHierarchyNode) == 0x000018, "Wrong size on FMovieSceneSequenceHierarchyNode");
static_assert(offsetof(FMovieSceneSequenceHierarchyNode, ParentID) == 0x000000, "Member 'FMovieSceneSequenceHierarchyNode::ParentID' has a wrong offset!");
static_assert(offsetof(FMovieSceneSequenceHierarchyNode, Children) == 0x000008, "Member 'FMovieSceneSequenceHierarchyNode::Children' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneSequenceHierarchy
// 0x00A0 (0x00A0 - 0x0000)
struct FMovieSceneSequenceHierarchy final
{
public:
	TMap<struct FMovieSceneSequenceID, struct FMovieSceneSubSequenceData> SubSequences;                                      // 0x0000(0x0050)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TMap<struct FMovieSceneSequenceID, struct FMovieSceneSequenceHierarchyNode> Hierarchy;                                         // 0x0050(0x0050)(ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FMovieSceneSequenceHierarchy) == 0x000008, "Wrong alignment on FMovieSceneSequenceHierarchy");
static_assert(sizeof(FMovieSceneSequenceHierarchy) == 0x0000A0, "Wrong size on FMovieSceneSequenceHierarchy");
static_assert(offsetof(FMovieSceneSequenceHierarchy, SubSequences) == 0x000000, "Member 'FMovieSceneSequenceHierarchy::SubSequences' has a wrong offset!");
static_assert(offsetof(FMovieSceneSequenceHierarchy, Hierarchy) == 0x000050, "Member 'FMovieSceneSequenceHierarchy::Hierarchy' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneTemplateGenerationLedger
// 0x00A8 (0x00A8 - 0x0000)
struct FMovieSceneTemplateGenerationLedger final
{
public:
	struct FMovieSceneTrackIdentifier             LastTrackIdentifier;                               // 0x0000(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FGuid, struct FMovieSceneTrackIdentifier> TrackSignatureToTrackIdentifier;                   // 0x0008(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<struct FGuid, struct FFloatRange>        SubSectionRanges;                                  // 0x0058(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieSceneTemplateGenerationLedger) == 0x000008, "Wrong alignment on FMovieSceneTemplateGenerationLedger");
static_assert(sizeof(FMovieSceneTemplateGenerationLedger) == 0x0000A8, "Wrong size on FMovieSceneTemplateGenerationLedger");
static_assert(offsetof(FMovieSceneTemplateGenerationLedger, LastTrackIdentifier) == 0x000000, "Member 'FMovieSceneTemplateGenerationLedger::LastTrackIdentifier' has a wrong offset!");
static_assert(offsetof(FMovieSceneTemplateGenerationLedger, TrackSignatureToTrackIdentifier) == 0x000008, "Member 'FMovieSceneTemplateGenerationLedger::TrackSignatureToTrackIdentifier' has a wrong offset!");
static_assert(offsetof(FMovieSceneTemplateGenerationLedger, SubSectionRanges) == 0x000058, "Member 'FMovieSceneTemplateGenerationLedger::SubSectionRanges' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneEvaluationTemplate
// 0x02F0 (0x02F0 - 0x0000)
struct FMovieSceneEvaluationTemplate final
{
public:
	TMap<struct FMovieSceneTrackIdentifier, struct FMovieSceneEvaluationTrack> Tracks;                                            // 0x0000(0x0050)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_50[0x50];                                      // 0x0050(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneEvaluationField             EvaluationField;                                   // 0x00A0(0x0030)(NativeAccessSpecifierPublic)
	struct FMovieSceneSequenceHierarchy           Hierarchy;                                         // 0x00D0(0x00A0)(NativeAccessSpecifierPublic)
	struct FGuid                                  SequenceSignature;                                 // 0x0170(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieSceneTemplateGenerationLedger    TemplateLedger;                                    // 0x0180(0x00A8)(NativeAccessSpecifierPrivate)
	struct FMovieSceneTrackFieldData              TrackFieldData;                                    // 0x0228(0x0060)(NativeAccessSpecifierPrivate)
	struct FMovieSceneSubSectionFieldData         SubSectionFieldData;                               // 0x0288(0x0060)(NativeAccessSpecifierPrivate)
	uint8                                         bKeepStaleTracks : 1;                              // 0x02E8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2E9[0x7];                                      // 0x02E9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneEvaluationTemplate) == 0x000008, "Wrong alignment on FMovieSceneEvaluationTemplate");
static_assert(sizeof(FMovieSceneEvaluationTemplate) == 0x0002F0, "Wrong size on FMovieSceneEvaluationTemplate");
static_assert(offsetof(FMovieSceneEvaluationTemplate, Tracks) == 0x000000, "Member 'FMovieSceneEvaluationTemplate::Tracks' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvaluationTemplate, EvaluationField) == 0x0000A0, "Member 'FMovieSceneEvaluationTemplate::EvaluationField' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvaluationTemplate, Hierarchy) == 0x0000D0, "Member 'FMovieSceneEvaluationTemplate::Hierarchy' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvaluationTemplate, SequenceSignature) == 0x000170, "Member 'FMovieSceneEvaluationTemplate::SequenceSignature' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvaluationTemplate, TemplateLedger) == 0x000180, "Member 'FMovieSceneEvaluationTemplate::TemplateLedger' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvaluationTemplate, TrackFieldData) == 0x000228, "Member 'FMovieSceneEvaluationTemplate::TrackFieldData' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvaluationTemplate, SubSectionFieldData) == 0x000288, "Member 'FMovieSceneEvaluationTemplate::SubSectionFieldData' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneEasingSettings
// 0x0038 (0x0038 - 0x0000)
struct FMovieSceneEasingSettings final
{
public:
	float                                         AutoEaseInTime;                                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoEaseOutTime;                                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TScriptInterface<class IMovieSceneEasingFunction> EaseIn;                                            // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          bManualEaseIn;                                     // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ManualEaseInTime;                                  // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TScriptInterface<class IMovieSceneEasingFunction> EaseOut;                                           // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          bManualEaseOut;                                    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ManualEaseOutTime;                                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieSceneEasingSettings) == 0x000008, "Wrong alignment on FMovieSceneEasingSettings");
static_assert(sizeof(FMovieSceneEasingSettings) == 0x000038, "Wrong size on FMovieSceneEasingSettings");
static_assert(offsetof(FMovieSceneEasingSettings, AutoEaseInTime) == 0x000000, "Member 'FMovieSceneEasingSettings::AutoEaseInTime' has a wrong offset!");
static_assert(offsetof(FMovieSceneEasingSettings, AutoEaseOutTime) == 0x000004, "Member 'FMovieSceneEasingSettings::AutoEaseOutTime' has a wrong offset!");
static_assert(offsetof(FMovieSceneEasingSettings, EaseIn) == 0x000008, "Member 'FMovieSceneEasingSettings::EaseIn' has a wrong offset!");
static_assert(offsetof(FMovieSceneEasingSettings, bManualEaseIn) == 0x000018, "Member 'FMovieSceneEasingSettings::bManualEaseIn' has a wrong offset!");
static_assert(offsetof(FMovieSceneEasingSettings, ManualEaseInTime) == 0x00001C, "Member 'FMovieSceneEasingSettings::ManualEaseInTime' has a wrong offset!");
static_assert(offsetof(FMovieSceneEasingSettings, EaseOut) == 0x000020, "Member 'FMovieSceneEasingSettings::EaseOut' has a wrong offset!");
static_assert(offsetof(FMovieSceneEasingSettings, bManualEaseOut) == 0x000030, "Member 'FMovieSceneEasingSettings::bManualEaseOut' has a wrong offset!");
static_assert(offsetof(FMovieSceneEasingSettings, ManualEaseOutTime) == 0x000034, "Member 'FMovieSceneEasingSettings::ManualEaseOutTime' has a wrong offset!");

// ScriptStruct MovieScene.TestMovieSceneEvalTemplate
// 0x0000 (0x0020 - 0x0020)
struct FTestMovieSceneEvalTemplate final : public FMovieSceneEvalTemplate
{
};
static_assert(alignof(FTestMovieSceneEvalTemplate) == 0x000008, "Wrong alignment on FTestMovieSceneEvalTemplate");
static_assert(sizeof(FTestMovieSceneEvalTemplate) == 0x000020, "Wrong size on FTestMovieSceneEvalTemplate");

// ScriptStruct MovieScene.MovieScenePossessable
// 0x0038 (0x0038 - 0x0000)
struct FMovieScenePossessable final
{
public:
	struct FGuid                                  Guid;                                              // 0x0000(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 Name;                                              // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UClass*                                 PossessedObjectClass;                              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGuid                                  ParentGuid;                                        // 0x0028(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FMovieScenePossessable) == 0x000008, "Wrong alignment on FMovieScenePossessable");
static_assert(sizeof(FMovieScenePossessable) == 0x000038, "Wrong size on FMovieScenePossessable");
static_assert(offsetof(FMovieScenePossessable, Guid) == 0x000000, "Member 'FMovieScenePossessable::Guid' has a wrong offset!");
static_assert(offsetof(FMovieScenePossessable, Name) == 0x000010, "Member 'FMovieScenePossessable::Name' has a wrong offset!");
static_assert(offsetof(FMovieScenePossessable, PossessedObjectClass) == 0x000020, "Member 'FMovieScenePossessable::PossessedObjectClass' has a wrong offset!");
static_assert(offsetof(FMovieScenePossessable, ParentGuid) == 0x000028, "Member 'FMovieScenePossessable::ParentGuid' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneSectionParameters
// 0x0014 (0x0014 - 0x0000)
struct FMovieSceneSectionParameters final
{
public:
	float                                         StartOffset;                                       // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HierarchicalBias;                                  // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PrerollTime;                                       // 0x000C(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PostrollTime;                                      // 0x0010(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieSceneSectionParameters) == 0x000004, "Wrong alignment on FMovieSceneSectionParameters");
static_assert(sizeof(FMovieSceneSectionParameters) == 0x000014, "Wrong size on FMovieSceneSectionParameters");
static_assert(offsetof(FMovieSceneSectionParameters, StartOffset) == 0x000000, "Member 'FMovieSceneSectionParameters::StartOffset' has a wrong offset!");
static_assert(offsetof(FMovieSceneSectionParameters, TimeScale) == 0x000004, "Member 'FMovieSceneSectionParameters::TimeScale' has a wrong offset!");
static_assert(offsetof(FMovieSceneSectionParameters, HierarchicalBias) == 0x000008, "Member 'FMovieSceneSectionParameters::HierarchicalBias' has a wrong offset!");
static_assert(offsetof(FMovieSceneSectionParameters, PrerollTime) == 0x00000C, "Member 'FMovieSceneSectionParameters::PrerollTime' has a wrong offset!");
static_assert(offsetof(FMovieSceneSectionParameters, PostrollTime) == 0x000010, "Member 'FMovieSceneSectionParameters::PostrollTime' has a wrong offset!");

// ScriptStruct MovieScene.SectionEvaluationData
// 0x000C (0x000C - 0x0000)
struct FSectionEvaluationData final
{
public:
	int32                                         ImplIndex;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForcedTime;                                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESectionEvaluationFlags                       Flags;                                             // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSectionEvaluationData) == 0x000004, "Wrong alignment on FSectionEvaluationData");
static_assert(sizeof(FSectionEvaluationData) == 0x00000C, "Wrong size on FSectionEvaluationData");
static_assert(offsetof(FSectionEvaluationData, ImplIndex) == 0x000000, "Member 'FSectionEvaluationData::ImplIndex' has a wrong offset!");
static_assert(offsetof(FSectionEvaluationData, ForcedTime) == 0x000004, "Member 'FSectionEvaluationData::ForcedTime' has a wrong offset!");
static_assert(offsetof(FSectionEvaluationData, Flags) == 0x000008, "Member 'FSectionEvaluationData::Flags' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneSpawnable
// 0x0070 (0x0070 - 0x0000)
struct FMovieSceneSpawnable final
{
public:
	struct FTransform                             SpawnTransform;                                    // 0x0000(0x0030)(Edit, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FGuid                                  Guid;                                              // 0x0030(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 Name;                                              // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UObject*                                ObjectTemplate;                                    // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FGuid>                          ChildPossessables;                                 // 0x0058(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	ESpawnOwnership                               Ownership;                                         // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneSpawnable) == 0x000010, "Wrong alignment on FMovieSceneSpawnable");
static_assert(sizeof(FMovieSceneSpawnable) == 0x000070, "Wrong size on FMovieSceneSpawnable");
static_assert(offsetof(FMovieSceneSpawnable, SpawnTransform) == 0x000000, "Member 'FMovieSceneSpawnable::SpawnTransform' has a wrong offset!");
static_assert(offsetof(FMovieSceneSpawnable, Guid) == 0x000030, "Member 'FMovieSceneSpawnable::Guid' has a wrong offset!");
static_assert(offsetof(FMovieSceneSpawnable, Name) == 0x000040, "Member 'FMovieSceneSpawnable::Name' has a wrong offset!");
static_assert(offsetof(FMovieSceneSpawnable, ObjectTemplate) == 0x000050, "Member 'FMovieSceneSpawnable::ObjectTemplate' has a wrong offset!");
static_assert(offsetof(FMovieSceneSpawnable, ChildPossessables) == 0x000058, "Member 'FMovieSceneSpawnable::ChildPossessables' has a wrong offset!");
static_assert(offsetof(FMovieSceneSpawnable, Ownership) == 0x000068, "Member 'FMovieSceneSpawnable::Ownership' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneTrackEvalOptions
// 0x0004 (0x0004 - 0x0000)
struct alignas(0x04) FMovieSceneTrackEvalOptions final
{
public:
	uint8                                         bCanEvaluateNearestSection : 1;                    // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEvalNearestSection : 1;                           // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEvaluateInPreroll : 1;                            // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEvaluateInPostroll : 1;                           // 0x0000(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEvaluateNearestSection : 1;                       // 0x0000(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneTrackEvalOptions) == 0x000004, "Wrong alignment on FMovieSceneTrackEvalOptions");
static_assert(sizeof(FMovieSceneTrackEvalOptions) == 0x000004, "Wrong size on FMovieSceneTrackEvalOptions");

}

