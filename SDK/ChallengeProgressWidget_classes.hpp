#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ChallengeProgressWidget

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "Engine_structs.hpp"
#include "CommonUI_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass ChallengeProgressWidget.ChallengeProgressWidget_C
// 0x00D0 (0x02E8 - 0x0218)
class UChallengeProgressWidget_C final : public UCommonUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0218(0x0008)(Transient, DuplicateTransient)
	class USpacer*                                ArrowLeftSpacer;                                   // 0x0220(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USpacer*                                ArrowRightSpacer;                                  // 0x0228(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               BarSizeSB;                                         // 0x0230(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonBorder*                          BorderXPBar;                                       // 0x0238(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Check;                                             // 0x0240(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidgetSwitcher*                        CompletionSwitcher;                                // 0x0248(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       ProgressValue;                                     // 0x0250(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Segment1;                                          // 0x0258(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Segment2;                                          // 0x0260(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Segment3;                                          // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Segment4;                                          // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Segment5;                                          // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Segment6;                                          // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Segment7;                                          // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USpacer*                                Spacer_0;                                          // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USpacer*                                Spacer_1;                                          // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USpacer*                                Spacer_2;                                          // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USpacer*                                Spacer_3;                                          // 0x02A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USpacer*                                Spacer_4;                                          // 0x02B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USpacer*                                Spacer_5;                                          // 0x02B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USpacer*                                Spacer_6;                                          // 0x02C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USpacer*                                Spacer_7;                                          // 0x02C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Unlock;                                            // 0x02D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 XpBar;                                             // 0x02D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	bool                                          ShowText;                                          // 0x02E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ShowBar;                                           // 0x02E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsSmallProgressBar;                                // 0x02E2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_ChallengeProgressWidget(int32 EntryPoint);
	void PreConstruct(bool IsDesignTime);
	void Construct();
	void Update(int32 Achieved, int32 Required, float PercentComplete, float ThresholdPercent);
	void SegmentHack(int32 NumSegments);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ChallengeProgressWidget_C">();
	}
	static class UChallengeProgressWidget_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UChallengeProgressWidget_C>();
	}
};
static_assert(alignof(UChallengeProgressWidget_C) == 0x000008, "Wrong alignment on UChallengeProgressWidget_C");
static_assert(sizeof(UChallengeProgressWidget_C) == 0x0002E8, "Wrong size on UChallengeProgressWidget_C");
static_assert(offsetof(UChallengeProgressWidget_C, UberGraphFrame) == 0x000218, "Member 'UChallengeProgressWidget_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UChallengeProgressWidget_C, ArrowLeftSpacer) == 0x000220, "Member 'UChallengeProgressWidget_C::ArrowLeftSpacer' has a wrong offset!");
static_assert(offsetof(UChallengeProgressWidget_C, ArrowRightSpacer) == 0x000228, "Member 'UChallengeProgressWidget_C::ArrowRightSpacer' has a wrong offset!");
static_assert(offsetof(UChallengeProgressWidget_C, BarSizeSB) == 0x000230, "Member 'UChallengeProgressWidget_C::BarSizeSB' has a wrong offset!");
static_assert(offsetof(UChallengeProgressWidget_C, BorderXPBar) == 0x000238, "Member 'UChallengeProgressWidget_C::BorderXPBar' has a wrong offset!");
static_assert(offsetof(UChallengeProgressWidget_C, Check) == 0x000240, "Member 'UChallengeProgressWidget_C::Check' has a wrong offset!");
static_assert(offsetof(UChallengeProgressWidget_C, CompletionSwitcher) == 0x000248, "Member 'UChallengeProgressWidget_C::CompletionSwitcher' has a wrong offset!");
static_assert(offsetof(UChallengeProgressWidget_C, ProgressValue) == 0x000250, "Member 'UChallengeProgressWidget_C::ProgressValue' has a wrong offset!");
static_assert(offsetof(UChallengeProgressWidget_C, Segment1) == 0x000258, "Member 'UChallengeProgressWidget_C::Segment1' has a wrong offset!");
static_assert(offsetof(UChallengeProgressWidget_C, Segment2) == 0x000260, "Member 'UChallengeProgressWidget_C::Segment2' has a wrong offset!");
static_assert(offsetof(UChallengeProgressWidget_C, Segment3) == 0x000268, "Member 'UChallengeProgressWidget_C::Segment3' has a wrong offset!");
static_assert(offsetof(UChallengeProgressWidget_C, Segment4) == 0x000270, "Member 'UChallengeProgressWidget_C::Segment4' has a wrong offset!");
static_assert(offsetof(UChallengeProgressWidget_C, Segment5) == 0x000278, "Member 'UChallengeProgressWidget_C::Segment5' has a wrong offset!");
static_assert(offsetof(UChallengeProgressWidget_C, Segment6) == 0x000280, "Member 'UChallengeProgressWidget_C::Segment6' has a wrong offset!");
static_assert(offsetof(UChallengeProgressWidget_C, Segment7) == 0x000288, "Member 'UChallengeProgressWidget_C::Segment7' has a wrong offset!");
static_assert(offsetof(UChallengeProgressWidget_C, Spacer_0) == 0x000290, "Member 'UChallengeProgressWidget_C::Spacer_0' has a wrong offset!");
static_assert(offsetof(UChallengeProgressWidget_C, Spacer_1) == 0x000298, "Member 'UChallengeProgressWidget_C::Spacer_1' has a wrong offset!");
static_assert(offsetof(UChallengeProgressWidget_C, Spacer_2) == 0x0002A0, "Member 'UChallengeProgressWidget_C::Spacer_2' has a wrong offset!");
static_assert(offsetof(UChallengeProgressWidget_C, Spacer_3) == 0x0002A8, "Member 'UChallengeProgressWidget_C::Spacer_3' has a wrong offset!");
static_assert(offsetof(UChallengeProgressWidget_C, Spacer_4) == 0x0002B0, "Member 'UChallengeProgressWidget_C::Spacer_4' has a wrong offset!");
static_assert(offsetof(UChallengeProgressWidget_C, Spacer_5) == 0x0002B8, "Member 'UChallengeProgressWidget_C::Spacer_5' has a wrong offset!");
static_assert(offsetof(UChallengeProgressWidget_C, Spacer_6) == 0x0002C0, "Member 'UChallengeProgressWidget_C::Spacer_6' has a wrong offset!");
static_assert(offsetof(UChallengeProgressWidget_C, Spacer_7) == 0x0002C8, "Member 'UChallengeProgressWidget_C::Spacer_7' has a wrong offset!");
static_assert(offsetof(UChallengeProgressWidget_C, Unlock) == 0x0002D0, "Member 'UChallengeProgressWidget_C::Unlock' has a wrong offset!");
static_assert(offsetof(UChallengeProgressWidget_C, XpBar) == 0x0002D8, "Member 'UChallengeProgressWidget_C::XpBar' has a wrong offset!");
static_assert(offsetof(UChallengeProgressWidget_C, ShowText) == 0x0002E0, "Member 'UChallengeProgressWidget_C::ShowText' has a wrong offset!");
static_assert(offsetof(UChallengeProgressWidget_C, ShowBar) == 0x0002E1, "Member 'UChallengeProgressWidget_C::ShowBar' has a wrong offset!");
static_assert(offsetof(UChallengeProgressWidget_C, IsSmallProgressBar) == 0x0002E2, "Member 'UChallengeProgressWidget_C::IsSmallProgressBar' has a wrong offset!");

}

