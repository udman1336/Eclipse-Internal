#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GamepadMappingInfo

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function GamepadMappingInfo.GamepadMappingInfo_C.ExecuteUbergraph_GamepadMappingInfo
// 0x0004 (0x0004 - 0x0000)
struct GamepadMappingInfo_C_ExecuteUbergraph_GamepadMappingInfo final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GamepadMappingInfo_C_ExecuteUbergraph_GamepadMappingInfo) == 0x000004, "Wrong alignment on GamepadMappingInfo_C_ExecuteUbergraph_GamepadMappingInfo");
static_assert(sizeof(GamepadMappingInfo_C_ExecuteUbergraph_GamepadMappingInfo) == 0x000004, "Wrong size on GamepadMappingInfo_C_ExecuteUbergraph_GamepadMappingInfo");
static_assert(offsetof(GamepadMappingInfo_C_ExecuteUbergraph_GamepadMappingInfo, EntryPoint) == 0x000000, "Member 'GamepadMappingInfo_C_ExecuteUbergraph_GamepadMappingInfo::EntryPoint' has a wrong offset!");

// Function GamepadMappingInfo.GamepadMappingInfo_C.Update Displayed Mapping
// 0x0110 (0x0110 - 0x0000)
struct GamepadMappingInfo_C_Update_Displayed_Mapping final
{
public:
	int32                                         Platform;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Mode;                                              // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Configuration;                                     // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             T_Mode_Combat;                                     // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             T_Mode_Build;                                      // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable1;                                // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   Temp_text_Variable;                                // 0x0028(0x0018)()
	class FText                                   Temp_text_Variable1;                               // 0x0040(0x0018)()
	class FText                                   K2Node_Select_Default;                             // 0x0058(0x0018)()
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable1;                               // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_72[0x2];                                       // 0x0072(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable12;                               // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable12;                              // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select1_Default;                            // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable123;                             // 0x007A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7B[0x1];                                       // 0x007B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             CallFunc_Array_Get_Item;                           // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable123;                              // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue1;              // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select12_Default;                           // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             CallFunc_Array_Get_Item1;                          // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable1234;                             // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue12;             // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             CallFunc_Array_Get_Item12;                         // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue123;            // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             CallFunc_Array_Get_Item123;                        // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue1234;           // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             CallFunc_Array_Get_Item1234;                       // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue12345;          // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             CallFunc_Array_Get_Item12345;                      // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue123456;         // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue1234567;        // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             CallFunc_Array_Get_Item123456;                     // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             CallFunc_Array_Get_Item1234567;                    // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UTexture2D*>                     K2Node_Select123_Default;                          // 0x00F8(0x0010)(ZeroConstructor, ReferenceParm)
	class UTexture2D*                             K2Node_Select1234_Default;                         // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GamepadMappingInfo_C_Update_Displayed_Mapping) == 0x000008, "Wrong alignment on GamepadMappingInfo_C_Update_Displayed_Mapping");
static_assert(sizeof(GamepadMappingInfo_C_Update_Displayed_Mapping) == 0x000110, "Wrong size on GamepadMappingInfo_C_Update_Displayed_Mapping");
static_assert(offsetof(GamepadMappingInfo_C_Update_Displayed_Mapping, Platform) == 0x000000, "Member 'GamepadMappingInfo_C_Update_Displayed_Mapping::Platform' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Update_Displayed_Mapping, Mode) == 0x000004, "Member 'GamepadMappingInfo_C_Update_Displayed_Mapping::Mode' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Update_Displayed_Mapping, Configuration) == 0x000008, "Member 'GamepadMappingInfo_C_Update_Displayed_Mapping::Configuration' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Update_Displayed_Mapping, T_Mode_Combat) == 0x000010, "Member 'GamepadMappingInfo_C_Update_Displayed_Mapping::T_Mode_Combat' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Update_Displayed_Mapping, T_Mode_Build) == 0x000018, "Member 'GamepadMappingInfo_C_Update_Displayed_Mapping::T_Mode_Build' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Update_Displayed_Mapping, Temp_int_Variable) == 0x000020, "Member 'GamepadMappingInfo_C_Update_Displayed_Mapping::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Update_Displayed_Mapping, Temp_int_Variable1) == 0x000024, "Member 'GamepadMappingInfo_C_Update_Displayed_Mapping::Temp_int_Variable1' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Update_Displayed_Mapping, Temp_text_Variable) == 0x000028, "Member 'GamepadMappingInfo_C_Update_Displayed_Mapping::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Update_Displayed_Mapping, Temp_text_Variable1) == 0x000040, "Member 'GamepadMappingInfo_C_Update_Displayed_Mapping::Temp_text_Variable1' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Update_Displayed_Mapping, K2Node_Select_Default) == 0x000058, "Member 'GamepadMappingInfo_C_Update_Displayed_Mapping::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Update_Displayed_Mapping, Temp_byte_Variable) == 0x000070, "Member 'GamepadMappingInfo_C_Update_Displayed_Mapping::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Update_Displayed_Mapping, Temp_byte_Variable1) == 0x000071, "Member 'GamepadMappingInfo_C_Update_Displayed_Mapping::Temp_byte_Variable1' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Update_Displayed_Mapping, Temp_int_Variable12) == 0x000074, "Member 'GamepadMappingInfo_C_Update_Displayed_Mapping::Temp_int_Variable12' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Update_Displayed_Mapping, Temp_byte_Variable12) == 0x000078, "Member 'GamepadMappingInfo_C_Update_Displayed_Mapping::Temp_byte_Variable12' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Update_Displayed_Mapping, K2Node_Select1_Default) == 0x000079, "Member 'GamepadMappingInfo_C_Update_Displayed_Mapping::K2Node_Select1_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Update_Displayed_Mapping, Temp_byte_Variable123) == 0x00007A, "Member 'GamepadMappingInfo_C_Update_Displayed_Mapping::Temp_byte_Variable123' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Update_Displayed_Mapping, CallFunc_Conv_ByteToInt_ReturnValue) == 0x00007C, "Member 'GamepadMappingInfo_C_Update_Displayed_Mapping::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Update_Displayed_Mapping, CallFunc_Array_Get_Item) == 0x000080, "Member 'GamepadMappingInfo_C_Update_Displayed_Mapping::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Update_Displayed_Mapping, Temp_int_Variable123) == 0x000088, "Member 'GamepadMappingInfo_C_Update_Displayed_Mapping::Temp_int_Variable123' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Update_Displayed_Mapping, CallFunc_Conv_ByteToInt_ReturnValue1) == 0x00008C, "Member 'GamepadMappingInfo_C_Update_Displayed_Mapping::CallFunc_Conv_ByteToInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Update_Displayed_Mapping, K2Node_Select12_Default) == 0x000090, "Member 'GamepadMappingInfo_C_Update_Displayed_Mapping::K2Node_Select12_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Update_Displayed_Mapping, CallFunc_Array_Get_Item1) == 0x000098, "Member 'GamepadMappingInfo_C_Update_Displayed_Mapping::CallFunc_Array_Get_Item1' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Update_Displayed_Mapping, Temp_int_Variable1234) == 0x0000A0, "Member 'GamepadMappingInfo_C_Update_Displayed_Mapping::Temp_int_Variable1234' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Update_Displayed_Mapping, CallFunc_Conv_ByteToInt_ReturnValue12) == 0x0000A4, "Member 'GamepadMappingInfo_C_Update_Displayed_Mapping::CallFunc_Conv_ByteToInt_ReturnValue12' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Update_Displayed_Mapping, CallFunc_Array_Get_Item12) == 0x0000A8, "Member 'GamepadMappingInfo_C_Update_Displayed_Mapping::CallFunc_Array_Get_Item12' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Update_Displayed_Mapping, CallFunc_Conv_ByteToInt_ReturnValue123) == 0x0000B0, "Member 'GamepadMappingInfo_C_Update_Displayed_Mapping::CallFunc_Conv_ByteToInt_ReturnValue123' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Update_Displayed_Mapping, CallFunc_Array_Get_Item123) == 0x0000B8, "Member 'GamepadMappingInfo_C_Update_Displayed_Mapping::CallFunc_Array_Get_Item123' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Update_Displayed_Mapping, CallFunc_Conv_ByteToInt_ReturnValue1234) == 0x0000C0, "Member 'GamepadMappingInfo_C_Update_Displayed_Mapping::CallFunc_Conv_ByteToInt_ReturnValue1234' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Update_Displayed_Mapping, CallFunc_Array_Get_Item1234) == 0x0000C8, "Member 'GamepadMappingInfo_C_Update_Displayed_Mapping::CallFunc_Array_Get_Item1234' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Update_Displayed_Mapping, CallFunc_Conv_ByteToInt_ReturnValue12345) == 0x0000D0, "Member 'GamepadMappingInfo_C_Update_Displayed_Mapping::CallFunc_Conv_ByteToInt_ReturnValue12345' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Update_Displayed_Mapping, CallFunc_Array_Get_Item12345) == 0x0000D8, "Member 'GamepadMappingInfo_C_Update_Displayed_Mapping::CallFunc_Array_Get_Item12345' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Update_Displayed_Mapping, CallFunc_Conv_ByteToInt_ReturnValue123456) == 0x0000E0, "Member 'GamepadMappingInfo_C_Update_Displayed_Mapping::CallFunc_Conv_ByteToInt_ReturnValue123456' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Update_Displayed_Mapping, CallFunc_Conv_ByteToInt_ReturnValue1234567) == 0x0000E4, "Member 'GamepadMappingInfo_C_Update_Displayed_Mapping::CallFunc_Conv_ByteToInt_ReturnValue1234567' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Update_Displayed_Mapping, CallFunc_Array_Get_Item123456) == 0x0000E8, "Member 'GamepadMappingInfo_C_Update_Displayed_Mapping::CallFunc_Array_Get_Item123456' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Update_Displayed_Mapping, CallFunc_Array_Get_Item1234567) == 0x0000F0, "Member 'GamepadMappingInfo_C_Update_Displayed_Mapping::CallFunc_Array_Get_Item1234567' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Update_Displayed_Mapping, K2Node_Select123_Default) == 0x0000F8, "Member 'GamepadMappingInfo_C_Update_Displayed_Mapping::K2Node_Select123_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Update_Displayed_Mapping, K2Node_Select1234_Default) == 0x000108, "Member 'GamepadMappingInfo_C_Update_Displayed_Mapping::K2Node_Select1234_Default' has a wrong offset!");

// Function GamepadMappingInfo.GamepadMappingInfo_C.OnConfigChanged
// 0x0018 (0x0018 - 0x0000)
struct GamepadMappingInfo_C_OnConfigChanged final
{
public:
	int32                                         Mode;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Config;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortGlobalUIContext*                   CallFunc_GetContext_ReturnValue;                   // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESubGame                                      CallFunc_GetSubGame_ReturnValue;                   // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GamepadMappingInfo_C_OnConfigChanged) == 0x000008, "Wrong alignment on GamepadMappingInfo_C_OnConfigChanged");
static_assert(sizeof(GamepadMappingInfo_C_OnConfigChanged) == 0x000018, "Wrong size on GamepadMappingInfo_C_OnConfigChanged");
static_assert(offsetof(GamepadMappingInfo_C_OnConfigChanged, Mode) == 0x000000, "Member 'GamepadMappingInfo_C_OnConfigChanged::Mode' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_OnConfigChanged, Config) == 0x000004, "Member 'GamepadMappingInfo_C_OnConfigChanged::Config' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_OnConfigChanged, CallFunc_GetContext_ReturnValue) == 0x000008, "Member 'GamepadMappingInfo_C_OnConfigChanged::CallFunc_GetContext_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_OnConfigChanged, CallFunc_GetSubGame_ReturnValue) == 0x000010, "Member 'GamepadMappingInfo_C_OnConfigChanged::CallFunc_GetSubGame_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_OnConfigChanged, K2Node_SwitchEnum_CmpSuccess) == 0x000011, "Member 'GamepadMappingInfo_C_OnConfigChanged::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function GamepadMappingInfo.GamepadMappingInfo_C.HandleConfigChanged_Athena
// 0x1940 (0x1940 - 0x0000)
struct GamepadMappingInfo_C_HandleConfigChanged_Athena final
{
public:
	int32                                         Mode;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Config;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   Temp_text_Variable;                                // 0x0008(0x0018)()
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable1;                               // 0x0028(0x0018)()
	int32                                         Temp_int_Variable;                                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable12;                              // 0x0048(0x0018)()
	class FText                                   Temp_text_Variable123;                             // 0x0060(0x0018)()
	class FText                                   Temp_text_Variable1234;                            // 0x0078(0x0018)()
	class FText                                   Temp_text_Variable12345;                           // 0x0090(0x0018)()
	int32                                         Temp_int_Variable1;                                // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default;                             // 0x00B0(0x0018)()
	class FText                                   Temp_text_Variable123456;                          // 0x00C8(0x0018)()
	class FText                                   Temp_text_Variable1234567;                         // 0x00E0(0x0018)()
	class FText                                   Temp_text_Variable12345678;                        // 0x00F8(0x0018)()
	class FText                                   Temp_text_Variable123456789;                       // 0x0110(0x0018)()
	int32                                         Temp_int_Variable12;                               // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select1_Default;                            // 0x0130(0x0018)()
	class FText                                   Temp_text_Variable12345678910;                     // 0x0148(0x0018)()
	class FText                                   Temp_text_Variable1234567891011;                   // 0x0160(0x0018)()
	class FText                                   Temp_text_Variable123456789101112;                 // 0x0178(0x0018)()
	class FText                                   Temp_text_Variable12345678910111213;               // 0x0190(0x0018)()
	int32                                         Temp_int_Variable123;                              // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1AC[0x4];                                      // 0x01AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select12_Default;                           // 0x01B0(0x0018)()
	class FText                                   Temp_text_Variable1234567891011121314;             // 0x01C8(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415;           // 0x01E0(0x0018)()
	class FText                                   Temp_text_Variable12345678910111213141516;         // 0x01F8(0x0018)()
	class FText                                   Temp_text_Variable1234567891011121314151617;       // 0x0210(0x0018)()
	int32                                         Temp_int_Variable1234;                             // 0x0228(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22C[0x4];                                      // 0x022C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select123_Default;                          // 0x0230(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718;     // 0x0248(0x0018)()
	class FText                                   Temp_text_Variable12345678910111213141516171819;   // 0x0260(0x0018)()
	class FText                                   Temp_text_Variable1234567891011121314151617181920; // 0x0278(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021; // 0x0290(0x0018)()
	int32                                         Temp_int_Variable12345;                            // 0x02A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2AC[0x4];                                      // 0x02AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select1234_Default;                         // 0x02B0(0x0018)()
	class FText                                   Temp_text_Variable12345678910111213141516171819202122; // 0x02C8(0x0018)()
	class FText                                   Temp_text_Variable1234567891011121314151617181920212223; // 0x02E0(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324; // 0x02F8(0x0018)()
	class FText                                   Temp_text_Variable12345678910111213141516171819202122232425; // 0x0310(0x0018)()
	int32                                         Temp_int_Variable123456;                           // 0x0328(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32C[0x4];                                      // 0x032C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select12345_Default;                        // 0x0330(0x0018)()
	class FText                                   Temp_text_Variable1234567891011121314151617181920212223242526; // 0x0348(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627; // 0x0360(0x0018)()
	class FText                                   Temp_text_Variable12345678910111213141516171819202122232425262728; // 0x0378(0x0018)()
	class FText                                   Temp_text_Variable1234567891011121314151617181920212223242526272829; // 0x0390(0x0018)()
	int32                                         Temp_int_Variable1234567;                          // 0x03A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3AC[0x4];                                      // 0x03AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select123456_Default;                       // 0x03B0(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930; // 0x03C8(0x0018)()
	class FText                                   Temp_text_Variable12345678910111213141516171819202122232425262728293031; // 0x03E0(0x0018)()
	class FText                                   Temp_text_Variable1234567891011121314151617181920212223242526272829303132; // 0x03F8(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233; // 0x0410(0x0018)()
	int32                                         Temp_int_Variable12345678;                         // 0x0428(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42C[0x4];                                      // 0x042C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select1234567_Default;                      // 0x0430(0x0018)()
	class FText                                   Temp_text_Variable12345678910111213141516171819202122232425262728293031323334; // 0x0448(0x0018)()
	class FText                                   Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435; // 0x0460(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536; // 0x0478(0x0018)()
	class FText                                   Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637; // 0x0490(0x0018)()
	int32                                         Temp_int_Variable123456789;                        // 0x04A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4AC[0x4];                                      // 0x04AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select12345678_Default;                     // 0x04B0(0x0018)()
	class FText                                   Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738; // 0x04C8(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839; // 0x04E0(0x0018)()
	class FText                                   Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637383940; // 0x04F8(0x0018)()
	class FText                                   Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738394041; // 0x0510(0x0018)()
	int32                                         Temp_int_Variable12345678910;                      // 0x0528(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_52C[0x4];                                      // 0x052C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select123456789_Default;                    // 0x0530(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142; // 0x0548(0x0018)()
	class FText                                   Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637383940414243; // 0x0560(0x0018)()
	class FText                                   Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738394041424344; // 0x0578(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445; // 0x0590(0x0018)()
	int32                                         Temp_int_Variable1234567891011;                    // 0x05A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5AC[0x4];                                      // 0x05AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select12345678910_Default;                  // 0x05B0(0x0018)()
	class FText                                   Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637383940414243444546; // 0x05C8(0x0018)()
	class FText                                   Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738394041424344454647; // 0x05E0(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748; // 0x05F8(0x0018)()
	class FText                                   Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849; // 0x0610(0x0018)()
	int32                                         Temp_int_Variable123456789101112;                  // 0x0628(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_62C[0x4];                                      // 0x062C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select1234567891011_Default;                // 0x0630(0x0018)()
	class FText                                   Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950; // 0x0648(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051; // 0x0660(0x0018)()
	class FText                                   Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152; // 0x0678(0x0018)()
	class FText                                   Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253; // 0x0690(0x0018)()
	int32                                         Temp_int_Variable12345678910111213;                // 0x06A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6AC[0x4];                                      // 0x06AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select123456789101112_Default;              // 0x06B0(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354; // 0x06C8(0x0018)()
	class FText                                   Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455; // 0x06E0(0x0018)()
	class FText                                   Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556; // 0x06F8(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657; // 0x0710(0x0018)()
	int32                                         Temp_int_Variable1234567891011121314;              // 0x0728(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_72C[0x4];                                      // 0x072C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select12345678910111213_Default;            // 0x0730(0x0018)()
	class FText                                   Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758; // 0x0748(0x0018)()
	class FText                                   Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859; // 0x0760(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960; // 0x0778(0x0018)()
	class FText                                   Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061; // 0x0790(0x0018)()
	int32                                         Temp_int_Variable123456789101112131415;            // 0x07A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7AC[0x4];                                      // 0x07AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select1234567891011121314_Default;          // 0x07B0(0x0018)()
	class FText                                   Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162; // 0x07C8(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263; // 0x07E0(0x0018)()
	class FText                                   Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364; // 0x07F8(0x0018)()
	class FText                                   Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465; // 0x0810(0x0018)()
	int32                                         Temp_int_Variable12345678910111213141516;          // 0x0828(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_82C[0x4];                                      // 0x082C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select123456789101112131415_Default;        // 0x0830(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566; // 0x0848(0x0018)()
	class FText                                   Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667; // 0x0860(0x0018)()
	class FText                                   Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768; // 0x0878(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869; // 0x0890(0x0018)()
	int32                                         Temp_int_Variable1234567891011121314151617;        // 0x08A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8AC[0x4];                                      // 0x08AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select12345678910111213141516_Default;      // 0x08B0(0x0018)()
	class FText                                   Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970; // 0x08C8(0x0018)()
	class FText                                   Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071; // 0x08E0(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172; // 0x08F8(0x0018)()
	class FText                                   Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273; // 0x0910(0x0018)()
	int32                                         Temp_int_Variable123456789101112131415161718;      // 0x0928(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_92C[0x4];                                      // 0x092C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select1234567891011121314151617_Default;    // 0x0930(0x0018)()
	class FText                                   Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374; // 0x0948(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475; // 0x0960(0x0018)()
	class FText                                   Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576; // 0x0978(0x0018)()
	class FText                                   Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677; // 0x0990(0x0018)()
	int32                                         Temp_int_Variable12345678910111213141516171819;    // 0x09A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9AC[0x4];                                      // 0x09AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select123456789101112131415161718_Default;  // 0x09B0(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778; // 0x09C8(0x0018)()
	class FText                                   Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879; // 0x09E0(0x0018)()
	class FText                                   Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980; // 0x09F8(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081; // 0x0A10(0x0018)()
	int32                                         Temp_int_Variable1234567891011121314151617181920;  // 0x0A28(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A2C[0x4];                                      // 0x0A2C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select12345678910111213141516171819_Default; // 0x0A30(0x0018)()
	class FText                                   Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182; // 0x0A48(0x0018)()
	class FText                                   Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283; // 0x0A60(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384; // 0x0A78(0x0018)()
	class FText                                   Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485; // 0x0A90(0x0018)()
	int32                                         Temp_int_Variable123456789101112131415161718192021; // 0x0AA8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AAC[0x4];                                      // 0x0AAC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select1234567891011121314151617181920_Default; // 0x0AB0(0x0018)()
	class FText                                   Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586; // 0x0AC8(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687; // 0x0AE0(0x0018)()
	class FText                                   Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788; // 0x0AF8(0x0018)()
	class FText                                   Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889; // 0x0B10(0x0018)()
	int32                                         Temp_int_Variable12345678910111213141516171819202122; // 0x0B28(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B2C[0x4];                                      // 0x0B2C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select123456789101112131415161718192021_Default; // 0x0B30(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990; // 0x0B48(0x0018)()
	class FText                                   Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091; // 0x0B60(0x0018)()
	class FText                                   Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192; // 0x0B78(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293; // 0x0B90(0x0018)()
	int32                                         Temp_int_Variable1234567891011121314151617181920212223; // 0x0BA8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BAC[0x4];                                      // 0x0BAC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select12345678910111213141516171819202122_Default; // 0x0BB0(0x0018)()
	class FText                                   Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394; // 0x0BC8(0x0018)()
	class FText                                   Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495; // 0x0BE0(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596; // 0x0BF8(0x0018)()
	class FText                                   Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697; // 0x0C10(0x0018)()
	int32                                         Temp_int_Variable123456789101112131415161718192021222324; // 0x0C28(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C2C[0x4];                                      // 0x0C2C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select1234567891011121314151617181920212223_Default; // 0x0C30(0x0018)()
	class FText                                   Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798; // 0x0C48(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899; // 0x0C60(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100; // 0x0C78(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101; // 0x0C90(0x0018)()
	int32                                         Temp_int_Variable12345678910111213141516171819202122232425; // 0x0CA8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CAC[0x4];                                      // 0x0CAC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select123456789101112131415161718192021222324_Default; // 0x0CB0(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102; // 0x0CC8(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103; // 0x0CE0(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104; // 0x0CF8(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105; // 0x0D10(0x0018)()
	int32                                         Temp_int_Variable1234567891011121314151617181920212223242526; // 0x0D28(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D2C[0x4];                                      // 0x0D2C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select12345678910111213141516171819202122232425_Default; // 0x0D30(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106; // 0x0D48(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107; // 0x0D60(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108; // 0x0D78(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109; // 0x0D90(0x0018)()
	int32                                         Temp_int_Variable123456789101112131415161718192021222324252627; // 0x0DA8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DAC[0x4];                                      // 0x0DAC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select1234567891011121314151617181920212223242526_Default; // 0x0DB0(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110; // 0x0DC8(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111; // 0x0DE0(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112; // 0x0DF8(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113; // 0x0E10(0x0018)()
	int32                                         Temp_int_Variable12345678910111213141516171819202122232425262728; // 0x0E28(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E2C[0x4];                                      // 0x0E2C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select123456789101112131415161718192021222324252627_Default; // 0x0E30(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114; // 0x0E48(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115; // 0x0E60(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116; // 0x0E78(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117; // 0x0E90(0x0018)()
	int32                                         Temp_int_Variable1234567891011121314151617181920212223242526272829; // 0x0EA8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EAC[0x4];                                      // 0x0EAC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select12345678910111213141516171819202122232425262728_Default; // 0x0EB0(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118; // 0x0EC8(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119; // 0x0EE0(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120; // 0x0EF8(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121; // 0x0F10(0x0018)()
	int32                                         Temp_int_Variable123456789101112131415161718192021222324252627282930; // 0x0F28(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F2C[0x4];                                      // 0x0F2C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select1234567891011121314151617181920212223242526272829_Default; // 0x0F30(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122; // 0x0F48(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123; // 0x0F60(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124; // 0x0F78(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125; // 0x0F90(0x0018)()
	int32                                         Temp_int_Variable12345678910111213141516171819202122232425262728293031; // 0x0FA8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FAC[0x4];                                      // 0x0FAC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select123456789101112131415161718192021222324252627282930_Default; // 0x0FB0(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126; // 0x0FC8(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127; // 0x0FE0(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128; // 0x0FF8(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129; // 0x1010(0x0018)()
	int32                                         Temp_int_Variable1234567891011121314151617181920212223242526272829303132; // 0x1028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_102C[0x4];                                     // 0x102C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select12345678910111213141516171819202122232425262728293031_Default; // 0x1030(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130; // 0x1048(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131; // 0x1060(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132; // 0x1078(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133; // 0x1090(0x0018)()
	int32                                         Temp_int_Variable123456789101112131415161718192021222324252627282930313233; // 0x10A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10AC[0x4];                                     // 0x10AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select1234567891011121314151617181920212223242526272829303132_Default; // 0x10B0(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134; // 0x10C8(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135; // 0x10E0(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136; // 0x10F8(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137; // 0x1110(0x0018)()
	int32                                         Temp_int_Variable12345678910111213141516171819202122232425262728293031323334; // 0x1128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_112C[0x4];                                     // 0x112C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select123456789101112131415161718192021222324252627282930313233_Default; // 0x1130(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138; // 0x1148(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139; // 0x1160(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140; // 0x1178(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141; // 0x1190(0x0018)()
	int32                                         Temp_int_Variable1234567891011121314151617181920212223242526272829303132333435; // 0x11A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11AC[0x4];                                     // 0x11AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select12345678910111213141516171819202122232425262728293031323334_Default; // 0x11B0(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142; // 0x11C8(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143; // 0x11E0(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144; // 0x11F8(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145; // 0x1210(0x0018)()
	int32                                         Temp_int_Variable123456789101112131415161718192021222324252627282930313233343536; // 0x1228(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_122C[0x4];                                     // 0x122C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select1234567891011121314151617181920212223242526272829303132333435_Default; // 0x1230(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146; // 0x1248(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147; // 0x1260(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148; // 0x1278(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149; // 0x1290(0x0018)()
	int32                                         Temp_int_Variable12345678910111213141516171819202122232425262728293031323334353637; // 0x12A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12AC[0x4];                                     // 0x12AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select123456789101112131415161718192021222324252627282930313233343536_Default; // 0x12B0(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150; // 0x12C8(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151; // 0x12E0(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152; // 0x12F8(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153; // 0x1310(0x0018)()
	int32                                         Temp_int_Variable1234567891011121314151617181920212223242526272829303132333435363738; // 0x1328(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_132C[0x4];                                     // 0x132C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select12345678910111213141516171819202122232425262728293031323334353637_Default; // 0x1330(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154; // 0x1348(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155; // 0x1360(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156; // 0x1378(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157; // 0x1390(0x0018)()
	int32                                         Temp_int_Variable123456789101112131415161718192021222324252627282930313233343536373839; // 0x13A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13AC[0x4];                                     // 0x13AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select1234567891011121314151617181920212223242526272829303132333435363738_Default; // 0x13B0(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158; // 0x13C8(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159; // 0x13E0(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160; // 0x13F8(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161; // 0x1410(0x0018)()
	int32                                         Temp_int_Variable12345678910111213141516171819202122232425262728293031323334353637383940; // 0x1428(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_142C[0x4];                                     // 0x142C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select123456789101112131415161718192021222324252627282930313233343536373839_Default; // 0x1430(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162; // 0x1448(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163; // 0x1460(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164; // 0x1478(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165; // 0x1490(0x0018)()
	int32                                         Temp_int_Variable1234567891011121314151617181920212223242526272829303132333435363738394041; // 0x14A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14AC[0x4];                                     // 0x14AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select12345678910111213141516171819202122232425262728293031323334353637383940_Default; // 0x14B0(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166; // 0x14C8(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167; // 0x14E0(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168; // 0x14F8(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169; // 0x1510(0x0018)()
	int32                                         Temp_int_Variable123456789101112131415161718192021222324252627282930313233343536373839404142; // 0x1528(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_152C[0x4];                                     // 0x152C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select1234567891011121314151617181920212223242526272829303132333435363738394041_Default; // 0x1530(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170; // 0x1548(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171; // 0x1560(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172; // 0x1578(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173; // 0x1590(0x0018)()
	int32                                         Temp_int_Variable12345678910111213141516171819202122232425262728293031323334353637383940414243; // 0x15A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15AC[0x4];                                     // 0x15AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select123456789101112131415161718192021222324252627282930313233343536373839404142_Default; // 0x15B0(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174; // 0x15C8(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175; // 0x15E0(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176; // 0x15F8(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177; // 0x1610(0x0018)()
	int32                                         Temp_int_Variable1234567891011121314151617181920212223242526272829303132333435363738394041424344; // 0x1628(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_162C[0x4];                                     // 0x162C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select12345678910111213141516171819202122232425262728293031323334353637383940414243_Default; // 0x1630(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178; // 0x1648(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179; // 0x1660(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180; // 0x1678(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181; // 0x1690(0x0018)()
	int32                                         Temp_int_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445; // 0x16A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16AC[0x4];                                     // 0x16AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select1234567891011121314151617181920212223242526272829303132333435363738394041424344_Default; // 0x16B0(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182; // 0x16C8(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183; // 0x16E0(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184; // 0x16F8(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185; // 0x1710(0x0018)()
	int32                                         Temp_int_Variable12345678910111213141516171819202122232425262728293031323334353637383940414243444546; // 0x1728(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_172C[0x4];                                     // 0x172C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select123456789101112131415161718192021222324252627282930313233343536373839404142434445_Default; // 0x1730(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186; // 0x1748(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187; // 0x1760(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188; // 0x1778(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189; // 0x1790(0x0018)()
	int32                                         Temp_int_Variable1234567891011121314151617181920212223242526272829303132333435363738394041424344454647; // 0x17A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_17AC[0x4];                                     // 0x17AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select12345678910111213141516171819202122232425262728293031323334353637383940414243444546_Default; // 0x17B0(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190; // 0x17C8(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191; // 0x17E0(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192; // 0x17F8(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193; // 0x1810(0x0018)()
	int32                                         Temp_int_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748; // 0x1828(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_182C[0x4];                                     // 0x182C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select1234567891011121314151617181920212223242526272829303132333435363738394041424344454647_Default; // 0x1830(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194; // 0x1848(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195; // 0x1860(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196; // 0x1878(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197; // 0x1890(0x0018)()
	class FText                                   K2Node_Select123456789101112131415161718192021222324252627282930313233343536373839404142434445464748_Default; // 0x18A8(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198; // 0x18C0(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199; // 0x18D8(0x0018)()
	class FText                                   CallFunc_MakeLiteralText_ReturnValue;              // 0x18F0(0x0018)()
	class FText                                   CallFunc_MakeLiteralText_ReturnValue1;             // 0x1908(0x0018)()
	int32                                         Temp_int_Variable12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849; // 0x1920(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1924[0x4];                                     // 0x1924(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849_Default; // 0x1928(0x0018)()
};
static_assert(alignof(GamepadMappingInfo_C_HandleConfigChanged_Athena) == 0x000008, "Wrong alignment on GamepadMappingInfo_C_HandleConfigChanged_Athena");
static_assert(sizeof(GamepadMappingInfo_C_HandleConfigChanged_Athena) == 0x001940, "Wrong size on GamepadMappingInfo_C_HandleConfigChanged_Athena");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Mode) == 0x000000, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Mode' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Config) == 0x000004, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Config' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable) == 0x000008, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, K2Node_SwitchInteger_CmpSuccess) == 0x000020, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable1) == 0x000028, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable1' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_int_Variable) == 0x000040, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable12) == 0x000048, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable12' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123) == 0x000060, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable1234) == 0x000078, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable1234' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable12345) == 0x000090, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable12345' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_int_Variable1) == 0x0000A8, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_int_Variable1' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, K2Node_Select_Default) == 0x0000B0, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456) == 0x0000C8, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable1234567) == 0x0000E0, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable1234567' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable12345678) == 0x0000F8, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable12345678' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789) == 0x000110, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_int_Variable12) == 0x000128, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_int_Variable12' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, K2Node_Select1_Default) == 0x000130, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::K2Node_Select1_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable12345678910) == 0x000148, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable12345678910' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable1234567891011) == 0x000160, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable1234567891011' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112) == 0x000178, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable12345678910111213) == 0x000190, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable12345678910111213' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_int_Variable123) == 0x0001A8, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_int_Variable123' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, K2Node_Select12_Default) == 0x0001B0, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::K2Node_Select12_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable1234567891011121314) == 0x0001C8, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable1234567891011121314' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415) == 0x0001E0, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable12345678910111213141516) == 0x0001F8, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable12345678910111213141516' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable1234567891011121314151617) == 0x000210, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable1234567891011121314151617' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_int_Variable1234) == 0x000228, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_int_Variable1234' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, K2Node_Select123_Default) == 0x000230, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::K2Node_Select123_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718) == 0x000248, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable12345678910111213141516171819) == 0x000260, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable12345678910111213141516171819' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable1234567891011121314151617181920) == 0x000278, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable1234567891011121314151617181920' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021) == 0x000290, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_int_Variable12345) == 0x0002A8, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_int_Variable12345' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, K2Node_Select1234_Default) == 0x0002B0, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::K2Node_Select1234_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable12345678910111213141516171819202122) == 0x0002C8, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable12345678910111213141516171819202122' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable1234567891011121314151617181920212223) == 0x0002E0, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable1234567891011121314151617181920212223' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324) == 0x0002F8, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable12345678910111213141516171819202122232425) == 0x000310, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable12345678910111213141516171819202122232425' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_int_Variable123456) == 0x000328, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_int_Variable123456' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, K2Node_Select12345_Default) == 0x000330, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::K2Node_Select12345_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable1234567891011121314151617181920212223242526) == 0x000348, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable1234567891011121314151617181920212223242526' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627) == 0x000360, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable12345678910111213141516171819202122232425262728) == 0x000378, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable12345678910111213141516171819202122232425262728' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable1234567891011121314151617181920212223242526272829) == 0x000390, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable1234567891011121314151617181920212223242526272829' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_int_Variable1234567) == 0x0003A8, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_int_Variable1234567' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, K2Node_Select123456_Default) == 0x0003B0, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::K2Node_Select123456_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930) == 0x0003C8, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable12345678910111213141516171819202122232425262728293031) == 0x0003E0, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable12345678910111213141516171819202122232425262728293031' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable1234567891011121314151617181920212223242526272829303132) == 0x0003F8, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable1234567891011121314151617181920212223242526272829303132' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233) == 0x000410, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_int_Variable12345678) == 0x000428, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_int_Variable12345678' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, K2Node_Select1234567_Default) == 0x000430, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::K2Node_Select1234567_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable12345678910111213141516171819202122232425262728293031323334) == 0x000448, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable12345678910111213141516171819202122232425262728293031323334' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435) == 0x000460, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536) == 0x000478, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637) == 0x000490, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_int_Variable123456789) == 0x0004A8, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_int_Variable123456789' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, K2Node_Select12345678_Default) == 0x0004B0, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::K2Node_Select12345678_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738) == 0x0004C8, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839) == 0x0004E0, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637383940) == 0x0004F8, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637383940' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738394041) == 0x000510, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738394041' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_int_Variable12345678910) == 0x000528, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_int_Variable12345678910' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, K2Node_Select123456789_Default) == 0x000530, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::K2Node_Select123456789_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142) == 0x000548, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637383940414243) == 0x000560, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637383940414243' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738394041424344) == 0x000578, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738394041424344' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445) == 0x000590, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_int_Variable1234567891011) == 0x0005A8, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_int_Variable1234567891011' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, K2Node_Select12345678910_Default) == 0x0005B0, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::K2Node_Select12345678910_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637383940414243444546) == 0x0005C8, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637383940414243444546' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738394041424344454647) == 0x0005E0, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738394041424344454647' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748) == 0x0005F8, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849) == 0x000610, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_int_Variable123456789101112) == 0x000628, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_int_Variable123456789101112' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, K2Node_Select1234567891011_Default) == 0x000630, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::K2Node_Select1234567891011_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950) == 0x000648, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051) == 0x000660, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152) == 0x000678, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253) == 0x000690, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_int_Variable12345678910111213) == 0x0006A8, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_int_Variable12345678910111213' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, K2Node_Select123456789101112_Default) == 0x0006B0, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::K2Node_Select123456789101112_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354) == 0x0006C8, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455) == 0x0006E0, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556) == 0x0006F8, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657) == 0x000710, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_int_Variable1234567891011121314) == 0x000728, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_int_Variable1234567891011121314' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, K2Node_Select12345678910111213_Default) == 0x000730, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::K2Node_Select12345678910111213_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758) == 0x000748, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859) == 0x000760, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960) == 0x000778, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061) == 0x000790, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_int_Variable123456789101112131415) == 0x0007A8, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_int_Variable123456789101112131415' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, K2Node_Select1234567891011121314_Default) == 0x0007B0, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::K2Node_Select1234567891011121314_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162) == 0x0007C8, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263) == 0x0007E0, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364) == 0x0007F8, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465) == 0x000810, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_int_Variable12345678910111213141516) == 0x000828, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_int_Variable12345678910111213141516' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, K2Node_Select123456789101112131415_Default) == 0x000830, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::K2Node_Select123456789101112131415_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566) == 0x000848, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667) == 0x000860, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768) == 0x000878, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869) == 0x000890, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_int_Variable1234567891011121314151617) == 0x0008A8, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_int_Variable1234567891011121314151617' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, K2Node_Select12345678910111213141516_Default) == 0x0008B0, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::K2Node_Select12345678910111213141516_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970) == 0x0008C8, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071) == 0x0008E0, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172) == 0x0008F8, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273) == 0x000910, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_int_Variable123456789101112131415161718) == 0x000928, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_int_Variable123456789101112131415161718' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, K2Node_Select1234567891011121314151617_Default) == 0x000930, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::K2Node_Select1234567891011121314151617_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374) == 0x000948, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475) == 0x000960, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576) == 0x000978, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677) == 0x000990, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_int_Variable12345678910111213141516171819) == 0x0009A8, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_int_Variable12345678910111213141516171819' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, K2Node_Select123456789101112131415161718_Default) == 0x0009B0, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::K2Node_Select123456789101112131415161718_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778) == 0x0009C8, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879) == 0x0009E0, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980) == 0x0009F8, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081) == 0x000A10, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_int_Variable1234567891011121314151617181920) == 0x000A28, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_int_Variable1234567891011121314151617181920' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, K2Node_Select12345678910111213141516171819_Default) == 0x000A30, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::K2Node_Select12345678910111213141516171819_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182) == 0x000A48, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283) == 0x000A60, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384) == 0x000A78, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485) == 0x000A90, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_int_Variable123456789101112131415161718192021) == 0x000AA8, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_int_Variable123456789101112131415161718192021' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, K2Node_Select1234567891011121314151617181920_Default) == 0x000AB0, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::K2Node_Select1234567891011121314151617181920_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586) == 0x000AC8, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687) == 0x000AE0, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788) == 0x000AF8, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889) == 0x000B10, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_int_Variable12345678910111213141516171819202122) == 0x000B28, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_int_Variable12345678910111213141516171819202122' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, K2Node_Select123456789101112131415161718192021_Default) == 0x000B30, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::K2Node_Select123456789101112131415161718192021_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990) == 0x000B48, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091) == 0x000B60, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192) == 0x000B78, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293) == 0x000B90, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_int_Variable1234567891011121314151617181920212223) == 0x000BA8, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_int_Variable1234567891011121314151617181920212223' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, K2Node_Select12345678910111213141516171819202122_Default) == 0x000BB0, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::K2Node_Select12345678910111213141516171819202122_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394) == 0x000BC8, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495) == 0x000BE0, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596) == 0x000BF8, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697) == 0x000C10, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_int_Variable123456789101112131415161718192021222324) == 0x000C28, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_int_Variable123456789101112131415161718192021222324' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, K2Node_Select1234567891011121314151617181920212223_Default) == 0x000C30, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::K2Node_Select1234567891011121314151617181920212223_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798) == 0x000C48, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899) == 0x000C60, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100) == 0x000C78, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101) == 0x000C90, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_int_Variable12345678910111213141516171819202122232425) == 0x000CA8, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_int_Variable12345678910111213141516171819202122232425' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, K2Node_Select123456789101112131415161718192021222324_Default) == 0x000CB0, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::K2Node_Select123456789101112131415161718192021222324_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102) == 0x000CC8, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103) == 0x000CE0, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104) == 0x000CF8, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105) == 0x000D10, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_int_Variable1234567891011121314151617181920212223242526) == 0x000D28, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_int_Variable1234567891011121314151617181920212223242526' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, K2Node_Select12345678910111213141516171819202122232425_Default) == 0x000D30, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::K2Node_Select12345678910111213141516171819202122232425_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106) == 0x000D48, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107) == 0x000D60, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108) == 0x000D78, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109) == 0x000D90, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_int_Variable123456789101112131415161718192021222324252627) == 0x000DA8, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_int_Variable123456789101112131415161718192021222324252627' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, K2Node_Select1234567891011121314151617181920212223242526_Default) == 0x000DB0, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::K2Node_Select1234567891011121314151617181920212223242526_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110) == 0x000DC8, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111) == 0x000DE0, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112) == 0x000DF8, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113) == 0x000E10, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_int_Variable12345678910111213141516171819202122232425262728) == 0x000E28, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_int_Variable12345678910111213141516171819202122232425262728' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, K2Node_Select123456789101112131415161718192021222324252627_Default) == 0x000E30, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::K2Node_Select123456789101112131415161718192021222324252627_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114) == 0x000E48, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115) == 0x000E60, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116) == 0x000E78, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117) == 0x000E90, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_int_Variable1234567891011121314151617181920212223242526272829) == 0x000EA8, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_int_Variable1234567891011121314151617181920212223242526272829' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, K2Node_Select12345678910111213141516171819202122232425262728_Default) == 0x000EB0, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::K2Node_Select12345678910111213141516171819202122232425262728_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118) == 0x000EC8, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119) == 0x000EE0, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120) == 0x000EF8, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121) == 0x000F10, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_int_Variable123456789101112131415161718192021222324252627282930) == 0x000F28, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_int_Variable123456789101112131415161718192021222324252627282930' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, K2Node_Select1234567891011121314151617181920212223242526272829_Default) == 0x000F30, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::K2Node_Select1234567891011121314151617181920212223242526272829_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122) == 0x000F48, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123) == 0x000F60, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124) == 0x000F78, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125) == 0x000F90, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_int_Variable12345678910111213141516171819202122232425262728293031) == 0x000FA8, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_int_Variable12345678910111213141516171819202122232425262728293031' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, K2Node_Select123456789101112131415161718192021222324252627282930_Default) == 0x000FB0, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::K2Node_Select123456789101112131415161718192021222324252627282930_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126) == 0x000FC8, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127) == 0x000FE0, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128) == 0x000FF8, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129) == 0x001010, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_int_Variable1234567891011121314151617181920212223242526272829303132) == 0x001028, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_int_Variable1234567891011121314151617181920212223242526272829303132' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, K2Node_Select12345678910111213141516171819202122232425262728293031_Default) == 0x001030, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::K2Node_Select12345678910111213141516171819202122232425262728293031_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130) == 0x001048, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131) == 0x001060, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132) == 0x001078, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133) == 0x001090, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_int_Variable123456789101112131415161718192021222324252627282930313233) == 0x0010A8, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_int_Variable123456789101112131415161718192021222324252627282930313233' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, K2Node_Select1234567891011121314151617181920212223242526272829303132_Default) == 0x0010B0, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::K2Node_Select1234567891011121314151617181920212223242526272829303132_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134) == 0x0010C8, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135) == 0x0010E0, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136) == 0x0010F8, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137) == 0x001110, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_int_Variable12345678910111213141516171819202122232425262728293031323334) == 0x001128, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_int_Variable12345678910111213141516171819202122232425262728293031323334' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, K2Node_Select123456789101112131415161718192021222324252627282930313233_Default) == 0x001130, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::K2Node_Select123456789101112131415161718192021222324252627282930313233_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138) == 0x001148, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139) == 0x001160, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140) == 0x001178, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141) == 0x001190, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_int_Variable1234567891011121314151617181920212223242526272829303132333435) == 0x0011A8, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_int_Variable1234567891011121314151617181920212223242526272829303132333435' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, K2Node_Select12345678910111213141516171819202122232425262728293031323334_Default) == 0x0011B0, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::K2Node_Select12345678910111213141516171819202122232425262728293031323334_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142) == 0x0011C8, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143) == 0x0011E0, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144) == 0x0011F8, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145) == 0x001210, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_int_Variable123456789101112131415161718192021222324252627282930313233343536) == 0x001228, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_int_Variable123456789101112131415161718192021222324252627282930313233343536' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, K2Node_Select1234567891011121314151617181920212223242526272829303132333435_Default) == 0x001230, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::K2Node_Select1234567891011121314151617181920212223242526272829303132333435_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146) == 0x001248, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147) == 0x001260, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148) == 0x001278, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149) == 0x001290, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_int_Variable12345678910111213141516171819202122232425262728293031323334353637) == 0x0012A8, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_int_Variable12345678910111213141516171819202122232425262728293031323334353637' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, K2Node_Select123456789101112131415161718192021222324252627282930313233343536_Default) == 0x0012B0, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::K2Node_Select123456789101112131415161718192021222324252627282930313233343536_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150) == 0x0012C8, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151) == 0x0012E0, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152) == 0x0012F8, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153) == 0x001310, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_int_Variable1234567891011121314151617181920212223242526272829303132333435363738) == 0x001328, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_int_Variable1234567891011121314151617181920212223242526272829303132333435363738' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, K2Node_Select12345678910111213141516171819202122232425262728293031323334353637_Default) == 0x001330, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::K2Node_Select12345678910111213141516171819202122232425262728293031323334353637_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154) == 0x001348, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155) == 0x001360, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156) == 0x001378, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157) == 0x001390, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_int_Variable123456789101112131415161718192021222324252627282930313233343536373839) == 0x0013A8, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_int_Variable123456789101112131415161718192021222324252627282930313233343536373839' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, K2Node_Select1234567891011121314151617181920212223242526272829303132333435363738_Default) == 0x0013B0, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::K2Node_Select1234567891011121314151617181920212223242526272829303132333435363738_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158) == 0x0013C8, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159) == 0x0013E0, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160) == 0x0013F8, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161) == 0x001410, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_int_Variable12345678910111213141516171819202122232425262728293031323334353637383940) == 0x001428, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_int_Variable12345678910111213141516171819202122232425262728293031323334353637383940' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, K2Node_Select123456789101112131415161718192021222324252627282930313233343536373839_Default) == 0x001430, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::K2Node_Select123456789101112131415161718192021222324252627282930313233343536373839_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162) == 0x001448, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163) == 0x001460, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164) == 0x001478, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165) == 0x001490, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_int_Variable1234567891011121314151617181920212223242526272829303132333435363738394041) == 0x0014A8, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_int_Variable1234567891011121314151617181920212223242526272829303132333435363738394041' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, K2Node_Select12345678910111213141516171819202122232425262728293031323334353637383940_Default) == 0x0014B0, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::K2Node_Select12345678910111213141516171819202122232425262728293031323334353637383940_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166) == 0x0014C8, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167) == 0x0014E0, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168) == 0x0014F8, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169) == 0x001510, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_int_Variable123456789101112131415161718192021222324252627282930313233343536373839404142) == 0x001528, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_int_Variable123456789101112131415161718192021222324252627282930313233343536373839404142' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, K2Node_Select1234567891011121314151617181920212223242526272829303132333435363738394041_Default) == 0x001530, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::K2Node_Select1234567891011121314151617181920212223242526272829303132333435363738394041_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170) == 0x001548, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171) == 0x001560, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172) == 0x001578, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173) == 0x001590, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_int_Variable12345678910111213141516171819202122232425262728293031323334353637383940414243) == 0x0015A8, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_int_Variable12345678910111213141516171819202122232425262728293031323334353637383940414243' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, K2Node_Select123456789101112131415161718192021222324252627282930313233343536373839404142_Default) == 0x0015B0, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::K2Node_Select123456789101112131415161718192021222324252627282930313233343536373839404142_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174) == 0x0015C8, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175) == 0x0015E0, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176) == 0x0015F8, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177) == 0x001610, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_int_Variable1234567891011121314151617181920212223242526272829303132333435363738394041424344) == 0x001628, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_int_Variable1234567891011121314151617181920212223242526272829303132333435363738394041424344' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, K2Node_Select12345678910111213141516171819202122232425262728293031323334353637383940414243_Default) == 0x001630, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::K2Node_Select12345678910111213141516171819202122232425262728293031323334353637383940414243_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178) == 0x001648, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179) == 0x001660, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180) == 0x001678, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181) == 0x001690, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_int_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445) == 0x0016A8, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_int_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, K2Node_Select1234567891011121314151617181920212223242526272829303132333435363738394041424344_Default) == 0x0016B0, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::K2Node_Select1234567891011121314151617181920212223242526272829303132333435363738394041424344_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182) == 0x0016C8, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183) == 0x0016E0, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184) == 0x0016F8, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185) == 0x001710, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_int_Variable12345678910111213141516171819202122232425262728293031323334353637383940414243444546) == 0x001728, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_int_Variable12345678910111213141516171819202122232425262728293031323334353637383940414243444546' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, K2Node_Select123456789101112131415161718192021222324252627282930313233343536373839404142434445_Default) == 0x001730, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::K2Node_Select123456789101112131415161718192021222324252627282930313233343536373839404142434445_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186) == 0x001748, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187) == 0x001760, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188) == 0x001778, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189) == 0x001790, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_int_Variable1234567891011121314151617181920212223242526272829303132333435363738394041424344454647) == 0x0017A8, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_int_Variable1234567891011121314151617181920212223242526272829303132333435363738394041424344454647' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, K2Node_Select12345678910111213141516171819202122232425262728293031323334353637383940414243444546_Default) == 0x0017B0, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::K2Node_Select12345678910111213141516171819202122232425262728293031323334353637383940414243444546_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190) == 0x0017C8, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191) == 0x0017E0, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192) == 0x0017F8, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193) == 0x001810, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_int_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748) == 0x001828, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_int_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, K2Node_Select1234567891011121314151617181920212223242526272829303132333435363738394041424344454647_Default) == 0x001830, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::K2Node_Select1234567891011121314151617181920212223242526272829303132333435363738394041424344454647_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194) == 0x001848, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195) == 0x001860, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196) == 0x001878, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197) == 0x001890, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, K2Node_Select123456789101112131415161718192021222324252627282930313233343536373839404142434445464748_Default) == 0x0018A8, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::K2Node_Select123456789101112131415161718192021222324252627282930313233343536373839404142434445464748_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198) == 0x0018C0, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199) == 0x0018D8, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, CallFunc_MakeLiteralText_ReturnValue) == 0x0018F0, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::CallFunc_MakeLiteralText_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, CallFunc_MakeLiteralText_ReturnValue1) == 0x001908, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::CallFunc_MakeLiteralText_ReturnValue1' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, Temp_int_Variable12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849) == 0x001920, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::Temp_int_Variable12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged_Athena, K2Node_Select12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849_Default) == 0x001928, "Member 'GamepadMappingInfo_C_HandleConfigChanged_Athena::K2Node_Select12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849_Default' has a wrong offset!");

// Function GamepadMappingInfo.GamepadMappingInfo_C.HandleConfigChanged
// 0x000C (0x000C - 0x0000)
struct GamepadMappingInfo_C_HandleConfigChanged final
{
public:
	int32                                         Mode;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Config;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GamepadMappingInfo_C_HandleConfigChanged) == 0x000004, "Wrong alignment on GamepadMappingInfo_C_HandleConfigChanged");
static_assert(sizeof(GamepadMappingInfo_C_HandleConfigChanged) == 0x00000C, "Wrong size on GamepadMappingInfo_C_HandleConfigChanged");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged, Mode) == 0x000000, "Member 'GamepadMappingInfo_C_HandleConfigChanged::Mode' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged, Config) == 0x000004, "Member 'GamepadMappingInfo_C_HandleConfigChanged::Config' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_HandleConfigChanged, K2Node_SwitchInteger_CmpSuccess) == 0x000008, "Member 'GamepadMappingInfo_C_HandleConfigChanged::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");

// Function GamepadMappingInfo.GamepadMappingInfo_C.Handle Config Changed STW Build Mode
// 0x0800 (0x0800 - 0x0000)
struct GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode final
{
public:
	int32                                         Config;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0008(0x0018)()
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   Temp_text_Variable1;                               // 0x0028(0x0018)()
	class FText                                   Temp_text_Variable12;                              // 0x0040(0x0018)()
	int32                                         Temp_int_Variable1;                                // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default;                             // 0x0060(0x0018)()
	class FText                                   Temp_text_Variable123;                             // 0x0078(0x0018)()
	class FText                                   Temp_text_Variable1234;                            // 0x0090(0x0018)()
	int32                                         Temp_int_Variable12;                               // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select1_Default;                            // 0x00B0(0x0018)()
	class FText                                   Temp_text_Variable12345;                           // 0x00C8(0x0018)()
	class FText                                   Temp_text_Variable123456;                          // 0x00E0(0x0018)()
	int32                                         Temp_int_Variable123;                              // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select12_Default;                           // 0x0100(0x0018)()
	class FText                                   Temp_text_Variable1234567;                         // 0x0118(0x0018)()
	class FText                                   Temp_text_Variable12345678;                        // 0x0130(0x0018)()
	int32                                         Temp_int_Variable1234;                             // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14C[0x4];                                      // 0x014C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select123_Default;                          // 0x0150(0x0018)()
	class FText                                   Temp_text_Variable123456789;                       // 0x0168(0x0018)()
	class FText                                   Temp_text_Variable12345678910;                     // 0x0180(0x0018)()
	int32                                         Temp_int_Variable12345;                            // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19C[0x4];                                      // 0x019C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select1234_Default;                         // 0x01A0(0x0018)()
	class FText                                   Temp_text_Variable1234567891011;                   // 0x01B8(0x0018)()
	class FText                                   Temp_text_Variable123456789101112;                 // 0x01D0(0x0018)()
	int32                                         Temp_int_Variable123456;                           // 0x01E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1EC[0x4];                                      // 0x01EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select12345_Default;                        // 0x01F0(0x0018)()
	class FText                                   Temp_text_Variable12345678910111213;               // 0x0208(0x0018)()
	class FText                                   Temp_text_Variable1234567891011121314;             // 0x0220(0x0018)()
	int32                                         Temp_int_Variable1234567;                          // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_23C[0x4];                                      // 0x023C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select123456_Default;                       // 0x0240(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415;           // 0x0258(0x0018)()
	class FText                                   Temp_text_Variable12345678910111213141516;         // 0x0270(0x0018)()
	int32                                         Temp_int_Variable12345678;                         // 0x0288(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_28C[0x4];                                      // 0x028C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select1234567_Default;                      // 0x0290(0x0018)()
	class FText                                   Temp_text_Variable1234567891011121314151617;       // 0x02A8(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718;     // 0x02C0(0x0018)()
	int32                                         Temp_int_Variable123456789;                        // 0x02D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2DC[0x4];                                      // 0x02DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select12345678_Default;                     // 0x02E0(0x0018)()
	class FText                                   Temp_text_Variable12345678910111213141516171819;   // 0x02F8(0x0018)()
	class FText                                   Temp_text_Variable1234567891011121314151617181920; // 0x0310(0x0018)()
	int32                                         Temp_int_Variable12345678910;                      // 0x0328(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32C[0x4];                                      // 0x032C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select123456789_Default;                    // 0x0330(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021; // 0x0348(0x0018)()
	class FText                                   Temp_text_Variable12345678910111213141516171819202122; // 0x0360(0x0018)()
	int32                                         Temp_int_Variable1234567891011;                    // 0x0378(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37C[0x4];                                      // 0x037C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select12345678910_Default;                  // 0x0380(0x0018)()
	class FText                                   Temp_text_Variable1234567891011121314151617181920212223; // 0x0398(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324; // 0x03B0(0x0018)()
	int32                                         Temp_int_Variable123456789101112;                  // 0x03C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3CC[0x4];                                      // 0x03CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select1234567891011_Default;                // 0x03D0(0x0018)()
	class FText                                   Temp_text_Variable12345678910111213141516171819202122232425; // 0x03E8(0x0018)()
	class FText                                   Temp_text_Variable1234567891011121314151617181920212223242526; // 0x0400(0x0018)()
	int32                                         Temp_int_Variable12345678910111213;                // 0x0418(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41C[0x4];                                      // 0x041C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select123456789101112_Default;              // 0x0420(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627; // 0x0438(0x0018)()
	class FText                                   Temp_text_Variable12345678910111213141516171819202122232425262728; // 0x0450(0x0018)()
	int32                                         Temp_int_Variable1234567891011121314;              // 0x0468(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_46C[0x4];                                      // 0x046C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select12345678910111213_Default;            // 0x0470(0x0018)()
	class FText                                   Temp_text_Variable1234567891011121314151617181920212223242526272829; // 0x0488(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930; // 0x04A0(0x0018)()
	int32                                         Temp_int_Variable123456789101112131415;            // 0x04B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4BC[0x4];                                      // 0x04BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select1234567891011121314_Default;          // 0x04C0(0x0018)()
	class FText                                   Temp_text_Variable12345678910111213141516171819202122232425262728293031; // 0x04D8(0x0018)()
	class FText                                   Temp_text_Variable1234567891011121314151617181920212223242526272829303132; // 0x04F0(0x0018)()
	int32                                         Temp_int_Variable12345678910111213141516;          // 0x0508(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50C[0x4];                                      // 0x050C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select123456789101112131415_Default;        // 0x0510(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233; // 0x0528(0x0018)()
	class FText                                   Temp_text_Variable12345678910111213141516171819202122232425262728293031323334; // 0x0540(0x0018)()
	int32                                         Temp_int_Variable1234567891011121314151617;        // 0x0558(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_55C[0x4];                                      // 0x055C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select12345678910111213141516_Default;      // 0x0560(0x0018)()
	class FText                                   Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435; // 0x0578(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536; // 0x0590(0x0018)()
	int32                                         Temp_int_Variable123456789101112131415161718;      // 0x05A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5AC[0x4];                                      // 0x05AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select1234567891011121314151617_Default;    // 0x05B0(0x0018)()
	class FText                                   Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637; // 0x05C8(0x0018)()
	class FText                                   Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738; // 0x05E0(0x0018)()
	int32                                         Temp_int_Variable12345678910111213141516171819;    // 0x05F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FC[0x4];                                      // 0x05FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select123456789101112131415161718_Default;  // 0x0600(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839; // 0x0618(0x0018)()
	class FText                                   Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637383940; // 0x0630(0x0018)()
	int32                                         Temp_int_Variable1234567891011121314151617181920;  // 0x0648(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64C[0x4];                                      // 0x064C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select12345678910111213141516171819_Default; // 0x0650(0x0018)()
	class FText                                   Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738394041; // 0x0668(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142; // 0x0680(0x0018)()
	int32                                         Temp_int_Variable123456789101112131415161718192021; // 0x0698(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69C[0x4];                                      // 0x069C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select1234567891011121314151617181920_Default; // 0x06A0(0x0018)()
	class FText                                   Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637383940414243; // 0x06B8(0x0018)()
	class FText                                   Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738394041424344; // 0x06D0(0x0018)()
	int32                                         Temp_int_Variable12345678910111213141516171819202122; // 0x06E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6EC[0x4];                                      // 0x06EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select123456789101112131415161718192021_Default; // 0x06F0(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445; // 0x0708(0x0018)()
	class FText                                   Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637383940414243444546; // 0x0720(0x0018)()
	int32                                         Temp_int_Variable1234567891011121314151617181920212223; // 0x0738(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_73C[0x4];                                      // 0x073C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select12345678910111213141516171819202122_Default; // 0x0740(0x0018)()
	class FText                                   Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738394041424344454647; // 0x0758(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748; // 0x0770(0x0018)()
	class FText                                   K2Node_Select1234567891011121314151617181920212223_Default; // 0x0788(0x0018)()
	int32                                         Temp_int_Array_Index_Variable;                     // 0x07A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A4[0x4];                                      // 0x07A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonTextBlock*                       CallFunc_Array_Get_Item;                           // 0x07A8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x07B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7B4[0x4];                                      // 0x07B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849; // 0x07B8(0x0018)()
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x07D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable123456789101112131415161718192021222324; // 0x07D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x07D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D9[0x7];                                      // 0x07D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select123456789101112131415161718192021222324_Default; // 0x07E0(0x0018)()
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x07F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode) == 0x000008, "Wrong alignment on GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode");
static_assert(sizeof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode) == 0x000800, "Wrong size on GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, Config) == 0x000000, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::Config' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, Temp_text_Variable) == 0x000008, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, K2Node_SwitchInteger_CmpSuccess) == 0x000020, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, Temp_int_Variable) == 0x000024, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, Temp_text_Variable1) == 0x000028, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::Temp_text_Variable1' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, Temp_text_Variable12) == 0x000040, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::Temp_text_Variable12' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, Temp_int_Variable1) == 0x000058, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::Temp_int_Variable1' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, K2Node_Select_Default) == 0x000060, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, Temp_text_Variable123) == 0x000078, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::Temp_text_Variable123' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, Temp_text_Variable1234) == 0x000090, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::Temp_text_Variable1234' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, Temp_int_Variable12) == 0x0000A8, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::Temp_int_Variable12' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, K2Node_Select1_Default) == 0x0000B0, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::K2Node_Select1_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, Temp_text_Variable12345) == 0x0000C8, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::Temp_text_Variable12345' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, Temp_text_Variable123456) == 0x0000E0, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::Temp_text_Variable123456' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, Temp_int_Variable123) == 0x0000F8, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::Temp_int_Variable123' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, K2Node_Select12_Default) == 0x000100, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::K2Node_Select12_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, Temp_text_Variable1234567) == 0x000118, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::Temp_text_Variable1234567' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, Temp_text_Variable12345678) == 0x000130, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::Temp_text_Variable12345678' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, Temp_int_Variable1234) == 0x000148, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::Temp_int_Variable1234' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, K2Node_Select123_Default) == 0x000150, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::K2Node_Select123_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, Temp_text_Variable123456789) == 0x000168, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::Temp_text_Variable123456789' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, Temp_text_Variable12345678910) == 0x000180, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::Temp_text_Variable12345678910' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, Temp_int_Variable12345) == 0x000198, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::Temp_int_Variable12345' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, K2Node_Select1234_Default) == 0x0001A0, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::K2Node_Select1234_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, Temp_text_Variable1234567891011) == 0x0001B8, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::Temp_text_Variable1234567891011' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, Temp_text_Variable123456789101112) == 0x0001D0, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::Temp_text_Variable123456789101112' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, Temp_int_Variable123456) == 0x0001E8, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::Temp_int_Variable123456' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, K2Node_Select12345_Default) == 0x0001F0, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::K2Node_Select12345_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, Temp_text_Variable12345678910111213) == 0x000208, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::Temp_text_Variable12345678910111213' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, Temp_text_Variable1234567891011121314) == 0x000220, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::Temp_text_Variable1234567891011121314' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, Temp_int_Variable1234567) == 0x000238, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::Temp_int_Variable1234567' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, K2Node_Select123456_Default) == 0x000240, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::K2Node_Select123456_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, Temp_text_Variable123456789101112131415) == 0x000258, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::Temp_text_Variable123456789101112131415' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, Temp_text_Variable12345678910111213141516) == 0x000270, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::Temp_text_Variable12345678910111213141516' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, Temp_int_Variable12345678) == 0x000288, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::Temp_int_Variable12345678' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, K2Node_Select1234567_Default) == 0x000290, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::K2Node_Select1234567_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, Temp_text_Variable1234567891011121314151617) == 0x0002A8, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::Temp_text_Variable1234567891011121314151617' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, Temp_text_Variable123456789101112131415161718) == 0x0002C0, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::Temp_text_Variable123456789101112131415161718' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, Temp_int_Variable123456789) == 0x0002D8, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::Temp_int_Variable123456789' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, K2Node_Select12345678_Default) == 0x0002E0, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::K2Node_Select12345678_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, Temp_text_Variable12345678910111213141516171819) == 0x0002F8, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::Temp_text_Variable12345678910111213141516171819' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, Temp_text_Variable1234567891011121314151617181920) == 0x000310, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::Temp_text_Variable1234567891011121314151617181920' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, Temp_int_Variable12345678910) == 0x000328, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::Temp_int_Variable12345678910' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, K2Node_Select123456789_Default) == 0x000330, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::K2Node_Select123456789_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, Temp_text_Variable123456789101112131415161718192021) == 0x000348, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::Temp_text_Variable123456789101112131415161718192021' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, Temp_text_Variable12345678910111213141516171819202122) == 0x000360, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::Temp_text_Variable12345678910111213141516171819202122' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, Temp_int_Variable1234567891011) == 0x000378, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::Temp_int_Variable1234567891011' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, K2Node_Select12345678910_Default) == 0x000380, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::K2Node_Select12345678910_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, Temp_text_Variable1234567891011121314151617181920212223) == 0x000398, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::Temp_text_Variable1234567891011121314151617181920212223' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, Temp_text_Variable123456789101112131415161718192021222324) == 0x0003B0, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::Temp_text_Variable123456789101112131415161718192021222324' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, Temp_int_Variable123456789101112) == 0x0003C8, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::Temp_int_Variable123456789101112' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, K2Node_Select1234567891011_Default) == 0x0003D0, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::K2Node_Select1234567891011_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, Temp_text_Variable12345678910111213141516171819202122232425) == 0x0003E8, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::Temp_text_Variable12345678910111213141516171819202122232425' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, Temp_text_Variable1234567891011121314151617181920212223242526) == 0x000400, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::Temp_text_Variable1234567891011121314151617181920212223242526' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, Temp_int_Variable12345678910111213) == 0x000418, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::Temp_int_Variable12345678910111213' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, K2Node_Select123456789101112_Default) == 0x000420, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::K2Node_Select123456789101112_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, Temp_text_Variable123456789101112131415161718192021222324252627) == 0x000438, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::Temp_text_Variable123456789101112131415161718192021222324252627' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, Temp_text_Variable12345678910111213141516171819202122232425262728) == 0x000450, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::Temp_text_Variable12345678910111213141516171819202122232425262728' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, Temp_int_Variable1234567891011121314) == 0x000468, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::Temp_int_Variable1234567891011121314' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, K2Node_Select12345678910111213_Default) == 0x000470, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::K2Node_Select12345678910111213_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, Temp_text_Variable1234567891011121314151617181920212223242526272829) == 0x000488, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::Temp_text_Variable1234567891011121314151617181920212223242526272829' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, Temp_text_Variable123456789101112131415161718192021222324252627282930) == 0x0004A0, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::Temp_text_Variable123456789101112131415161718192021222324252627282930' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, Temp_int_Variable123456789101112131415) == 0x0004B8, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::Temp_int_Variable123456789101112131415' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, K2Node_Select1234567891011121314_Default) == 0x0004C0, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::K2Node_Select1234567891011121314_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, Temp_text_Variable12345678910111213141516171819202122232425262728293031) == 0x0004D8, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::Temp_text_Variable12345678910111213141516171819202122232425262728293031' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, Temp_text_Variable1234567891011121314151617181920212223242526272829303132) == 0x0004F0, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::Temp_text_Variable1234567891011121314151617181920212223242526272829303132' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, Temp_int_Variable12345678910111213141516) == 0x000508, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::Temp_int_Variable12345678910111213141516' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, K2Node_Select123456789101112131415_Default) == 0x000510, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::K2Node_Select123456789101112131415_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, Temp_text_Variable123456789101112131415161718192021222324252627282930313233) == 0x000528, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::Temp_text_Variable123456789101112131415161718192021222324252627282930313233' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, Temp_text_Variable12345678910111213141516171819202122232425262728293031323334) == 0x000540, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::Temp_text_Variable12345678910111213141516171819202122232425262728293031323334' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, Temp_int_Variable1234567891011121314151617) == 0x000558, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::Temp_int_Variable1234567891011121314151617' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, K2Node_Select12345678910111213141516_Default) == 0x000560, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::K2Node_Select12345678910111213141516_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435) == 0x000578, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536) == 0x000590, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, Temp_int_Variable123456789101112131415161718) == 0x0005A8, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::Temp_int_Variable123456789101112131415161718' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, K2Node_Select1234567891011121314151617_Default) == 0x0005B0, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::K2Node_Select1234567891011121314151617_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637) == 0x0005C8, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738) == 0x0005E0, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, Temp_int_Variable12345678910111213141516171819) == 0x0005F8, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::Temp_int_Variable12345678910111213141516171819' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, K2Node_Select123456789101112131415161718_Default) == 0x000600, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::K2Node_Select123456789101112131415161718_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839) == 0x000618, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637383940) == 0x000630, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637383940' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, Temp_int_Variable1234567891011121314151617181920) == 0x000648, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::Temp_int_Variable1234567891011121314151617181920' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, K2Node_Select12345678910111213141516171819_Default) == 0x000650, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::K2Node_Select12345678910111213141516171819_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738394041) == 0x000668, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738394041' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142) == 0x000680, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, Temp_int_Variable123456789101112131415161718192021) == 0x000698, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::Temp_int_Variable123456789101112131415161718192021' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, K2Node_Select1234567891011121314151617181920_Default) == 0x0006A0, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::K2Node_Select1234567891011121314151617181920_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637383940414243) == 0x0006B8, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637383940414243' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738394041424344) == 0x0006D0, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738394041424344' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, Temp_int_Variable12345678910111213141516171819202122) == 0x0006E8, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::Temp_int_Variable12345678910111213141516171819202122' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, K2Node_Select123456789101112131415161718192021_Default) == 0x0006F0, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::K2Node_Select123456789101112131415161718192021_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445) == 0x000708, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637383940414243444546) == 0x000720, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637383940414243444546' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, Temp_int_Variable1234567891011121314151617181920212223) == 0x000738, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::Temp_int_Variable1234567891011121314151617181920212223' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, K2Node_Select12345678910111213141516171819202122_Default) == 0x000740, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::K2Node_Select12345678910111213141516171819202122_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738394041424344454647) == 0x000758, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738394041424344454647' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748) == 0x000770, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445464748' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, K2Node_Select1234567891011121314151617181920212223_Default) == 0x000788, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::K2Node_Select1234567891011121314151617181920212223_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, Temp_int_Array_Index_Variable) == 0x0007A0, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, CallFunc_Array_Get_Item) == 0x0007A8, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, CallFunc_Array_Length_ReturnValue) == 0x0007B0, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849) == 0x0007B8, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, Temp_int_Loop_Counter_Variable) == 0x0007D0, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, Temp_int_Variable123456789101112131415161718192021222324) == 0x0007D4, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::Temp_int_Variable123456789101112131415161718192021222324' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, CallFunc_Less_IntInt_ReturnValue) == 0x0007D8, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, K2Node_Select123456789101112131415161718192021222324_Default) == 0x0007E0, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::K2Node_Select123456789101112131415161718192021222324_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode, CallFunc_Add_IntInt_ReturnValue) == 0x0007F8, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function GamepadMappingInfo.GamepadMappingInfo_C.Handle Config Changed STW Combat Mode
// 0x0810 (0x0810 - 0x0000)
struct GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode final
{
public:
	int32                                         Config;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0010(0x0018)()
	class FText                                   Temp_text_Variable1;                               // 0x0028(0x0018)()
	int32                                         Temp_int_Variable1;                                // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default;                             // 0x0048(0x0018)()
	class FText                                   Temp_text_Variable12;                              // 0x0060(0x0018)()
	class FText                                   Temp_text_Variable123;                             // 0x0078(0x0018)()
	int32                                         Temp_int_Variable12;                               // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select1_Default;                            // 0x0098(0x0018)()
	class FText                                   Temp_text_Variable1234;                            // 0x00B0(0x0018)()
	class FText                                   Temp_text_Variable12345;                           // 0x00C8(0x0018)()
	int32                                         Temp_int_Variable123;                              // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select12_Default;                           // 0x00E8(0x0018)()
	class FText                                   Temp_text_Variable123456;                          // 0x0100(0x0018)()
	class FText                                   Temp_text_Variable1234567;                         // 0x0118(0x0018)()
	int32                                         Temp_int_Variable1234;                             // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_134[0x4];                                      // 0x0134(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select123_Default;                          // 0x0138(0x0018)()
	class FText                                   Temp_text_Variable12345678;                        // 0x0150(0x0018)()
	class FText                                   Temp_text_Variable123456789;                       // 0x0168(0x0018)()
	int32                                         Temp_int_Variable12345;                            // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_184[0x4];                                      // 0x0184(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select1234_Default;                         // 0x0188(0x0018)()
	class FText                                   Temp_text_Variable12345678910;                     // 0x01A0(0x0018)()
	class FText                                   Temp_text_Variable1234567891011;                   // 0x01B8(0x0018)()
	int32                                         Temp_int_Variable123456;                           // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D4[0x4];                                      // 0x01D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select12345_Default;                        // 0x01D8(0x0018)()
	class FText                                   Temp_text_Variable123456789101112;                 // 0x01F0(0x0018)()
	class FText                                   Temp_text_Variable12345678910111213;               // 0x0208(0x0018)()
	int32                                         Temp_int_Variable1234567;                          // 0x0220(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_224[0x4];                                      // 0x0224(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select123456_Default;                       // 0x0228(0x0018)()
	class FText                                   Temp_text_Variable1234567891011121314;             // 0x0240(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415;           // 0x0258(0x0018)()
	int32                                         Temp_int_Variable12345678;                         // 0x0270(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_274[0x4];                                      // 0x0274(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select1234567_Default;                      // 0x0278(0x0018)()
	class FText                                   Temp_text_Variable12345678910111213141516;         // 0x0290(0x0018)()
	class FText                                   Temp_text_Variable1234567891011121314151617;       // 0x02A8(0x0018)()
	int32                                         Temp_int_Variable123456789;                        // 0x02C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C4[0x4];                                      // 0x02C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select12345678_Default;                     // 0x02C8(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718;     // 0x02E0(0x0018)()
	class FText                                   Temp_text_Variable12345678910111213141516171819;   // 0x02F8(0x0018)()
	int32                                         Temp_int_Variable12345678910;                      // 0x0310(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_314[0x4];                                      // 0x0314(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select123456789_Default;                    // 0x0318(0x0018)()
	class FText                                   Temp_text_Variable1234567891011121314151617181920; // 0x0330(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021; // 0x0348(0x0018)()
	int32                                         Temp_int_Variable1234567891011;                    // 0x0360(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_364[0x4];                                      // 0x0364(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select12345678910_Default;                  // 0x0368(0x0018)()
	class FText                                   Temp_text_Variable12345678910111213141516171819202122; // 0x0380(0x0018)()
	class FText                                   Temp_text_Variable1234567891011121314151617181920212223; // 0x0398(0x0018)()
	int32                                         Temp_int_Variable123456789101112;                  // 0x03B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B4[0x4];                                      // 0x03B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select1234567891011_Default;                // 0x03B8(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324; // 0x03D0(0x0018)()
	class FText                                   Temp_text_Variable12345678910111213141516171819202122232425; // 0x03E8(0x0018)()
	int32                                         Temp_int_Variable12345678910111213;                // 0x0400(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_404[0x4];                                      // 0x0404(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select123456789101112_Default;              // 0x0408(0x0018)()
	class FText                                   Temp_text_Variable1234567891011121314151617181920212223242526; // 0x0420(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627; // 0x0438(0x0018)()
	int32                                         Temp_int_Variable1234567891011121314;              // 0x0450(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_454[0x4];                                      // 0x0454(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select12345678910111213_Default;            // 0x0458(0x0018)()
	class FText                                   Temp_text_Variable12345678910111213141516171819202122232425262728; // 0x0470(0x0018)()
	class FText                                   Temp_text_Variable1234567891011121314151617181920212223242526272829; // 0x0488(0x0018)()
	int32                                         Temp_int_Variable123456789101112131415;            // 0x04A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A4[0x4];                                      // 0x04A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select1234567891011121314_Default;          // 0x04A8(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930; // 0x04C0(0x0018)()
	class FText                                   Temp_text_Variable12345678910111213141516171819202122232425262728293031; // 0x04D8(0x0018)()
	int32                                         Temp_int_Variable12345678910111213141516;          // 0x04F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4F4[0x4];                                      // 0x04F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select123456789101112131415_Default;        // 0x04F8(0x0018)()
	class FText                                   Temp_text_Variable1234567891011121314151617181920212223242526272829303132; // 0x0510(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233; // 0x0528(0x0018)()
	int32                                         Temp_int_Variable1234567891011121314151617;        // 0x0540(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_544[0x4];                                      // 0x0544(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select12345678910111213141516_Default;      // 0x0548(0x0018)()
	class FText                                   Temp_text_Variable12345678910111213141516171819202122232425262728293031323334; // 0x0560(0x0018)()
	class FText                                   Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435; // 0x0578(0x0018)()
	int32                                         Temp_int_Variable123456789101112131415161718;      // 0x0590(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_594[0x4];                                      // 0x0594(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select1234567891011121314151617_Default;    // 0x0598(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536; // 0x05B0(0x0018)()
	class FText                                   Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637; // 0x05C8(0x0018)()
	int32                                         Temp_int_Variable12345678910111213141516171819;    // 0x05E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5E4[0x4];                                      // 0x05E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select123456789101112131415161718_Default;  // 0x05E8(0x0018)()
	class FText                                   Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738; // 0x0600(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839; // 0x0618(0x0018)()
	int32                                         Temp_int_Variable1234567891011121314151617181920;  // 0x0630(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_634[0x4];                                      // 0x0634(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select12345678910111213141516171819_Default; // 0x0638(0x0018)()
	class FText                                   Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637383940; // 0x0650(0x0018)()
	class FText                                   Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738394041; // 0x0668(0x0018)()
	int32                                         Temp_int_Variable123456789101112131415161718192021; // 0x0680(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_684[0x4];                                      // 0x0684(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select1234567891011121314151617181920_Default; // 0x0688(0x0018)()
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142; // 0x06A0(0x0018)()
	class FText                                   Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637383940414243; // 0x06B8(0x0018)()
	class FText                                   K2Node_Select123456789101112131415161718192021_Default; // 0x06D0(0x0018)()
	int32                                         Temp_int_Array_Index_Variable;                     // 0x06E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6EC[0x4];                                      // 0x06EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738394041424344; // 0x06F0(0x0018)()
	class UFortInputData*                         CallFunc_GetFortInputDataForBlueprint_ReturnValue; // 0x0708(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortInputData*                         CallFunc_GetFortInputDataForBlueprint_ReturnValue1; // 0x0710(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetDeployHoverboardLabel_ReturnValue;     // 0x0718(0x0018)()
	class FText                                   CallFunc_GetAbility2Label_ReturnValue;             // 0x0730(0x0018)()
	class UFortInputData*                         CallFunc_GetFortInputDataForBlueprint_ReturnValue12; // 0x0748(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortInputData*                         CallFunc_GetFortInputDataForBlueprint_ReturnValue123; // 0x0750(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetAbility1Label_ReturnValue;             // 0x0758(0x0018)()
	class FText                                   CallFunc_GetAbility3Label_ReturnValue;             // 0x0770(0x0018)()
	class FText                                   CallFunc_MakeLiteralText_ReturnValue;              // 0x0788(0x0018)()
	class FText                                   CallFunc_MakeLiteralText_ReturnValue1;             // 0x07A0(0x0018)()
	class UCommonTextBlock*                       CallFunc_Array_Get_Item;                           // 0x07B8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x07C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C4[0x4];                                      // 0x07C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445; // 0x07C8(0x0018)()
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x07E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable12345678910111213141516171819202122; // 0x07E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x07E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7E9[0x7];                                      // 0x07E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select12345678910111213141516171819202122_Default; // 0x07F0(0x0018)()
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0808(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode) == 0x000008, "Wrong alignment on GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode");
static_assert(sizeof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode) == 0x000810, "Wrong size on GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, Config) == 0x000000, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::Config' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, Temp_int_Variable) == 0x000004, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, K2Node_SwitchInteger_CmpSuccess) == 0x000008, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, Temp_text_Variable) == 0x000010, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, Temp_text_Variable1) == 0x000028, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::Temp_text_Variable1' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, Temp_int_Variable1) == 0x000040, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::Temp_int_Variable1' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, K2Node_Select_Default) == 0x000048, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, Temp_text_Variable12) == 0x000060, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::Temp_text_Variable12' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, Temp_text_Variable123) == 0x000078, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::Temp_text_Variable123' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, Temp_int_Variable12) == 0x000090, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::Temp_int_Variable12' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, K2Node_Select1_Default) == 0x000098, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::K2Node_Select1_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, Temp_text_Variable1234) == 0x0000B0, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::Temp_text_Variable1234' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, Temp_text_Variable12345) == 0x0000C8, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::Temp_text_Variable12345' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, Temp_int_Variable123) == 0x0000E0, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::Temp_int_Variable123' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, K2Node_Select12_Default) == 0x0000E8, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::K2Node_Select12_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, Temp_text_Variable123456) == 0x000100, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::Temp_text_Variable123456' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, Temp_text_Variable1234567) == 0x000118, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::Temp_text_Variable1234567' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, Temp_int_Variable1234) == 0x000130, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::Temp_int_Variable1234' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, K2Node_Select123_Default) == 0x000138, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::K2Node_Select123_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, Temp_text_Variable12345678) == 0x000150, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::Temp_text_Variable12345678' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, Temp_text_Variable123456789) == 0x000168, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::Temp_text_Variable123456789' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, Temp_int_Variable12345) == 0x000180, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::Temp_int_Variable12345' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, K2Node_Select1234_Default) == 0x000188, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::K2Node_Select1234_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, Temp_text_Variable12345678910) == 0x0001A0, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::Temp_text_Variable12345678910' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, Temp_text_Variable1234567891011) == 0x0001B8, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::Temp_text_Variable1234567891011' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, Temp_int_Variable123456) == 0x0001D0, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::Temp_int_Variable123456' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, K2Node_Select12345_Default) == 0x0001D8, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::K2Node_Select12345_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, Temp_text_Variable123456789101112) == 0x0001F0, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::Temp_text_Variable123456789101112' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, Temp_text_Variable12345678910111213) == 0x000208, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::Temp_text_Variable12345678910111213' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, Temp_int_Variable1234567) == 0x000220, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::Temp_int_Variable1234567' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, K2Node_Select123456_Default) == 0x000228, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::K2Node_Select123456_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, Temp_text_Variable1234567891011121314) == 0x000240, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::Temp_text_Variable1234567891011121314' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, Temp_text_Variable123456789101112131415) == 0x000258, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::Temp_text_Variable123456789101112131415' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, Temp_int_Variable12345678) == 0x000270, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::Temp_int_Variable12345678' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, K2Node_Select1234567_Default) == 0x000278, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::K2Node_Select1234567_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, Temp_text_Variable12345678910111213141516) == 0x000290, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::Temp_text_Variable12345678910111213141516' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, Temp_text_Variable1234567891011121314151617) == 0x0002A8, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::Temp_text_Variable1234567891011121314151617' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, Temp_int_Variable123456789) == 0x0002C0, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::Temp_int_Variable123456789' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, K2Node_Select12345678_Default) == 0x0002C8, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::K2Node_Select12345678_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, Temp_text_Variable123456789101112131415161718) == 0x0002E0, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::Temp_text_Variable123456789101112131415161718' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, Temp_text_Variable12345678910111213141516171819) == 0x0002F8, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::Temp_text_Variable12345678910111213141516171819' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, Temp_int_Variable12345678910) == 0x000310, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::Temp_int_Variable12345678910' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, K2Node_Select123456789_Default) == 0x000318, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::K2Node_Select123456789_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, Temp_text_Variable1234567891011121314151617181920) == 0x000330, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::Temp_text_Variable1234567891011121314151617181920' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, Temp_text_Variable123456789101112131415161718192021) == 0x000348, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::Temp_text_Variable123456789101112131415161718192021' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, Temp_int_Variable1234567891011) == 0x000360, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::Temp_int_Variable1234567891011' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, K2Node_Select12345678910_Default) == 0x000368, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::K2Node_Select12345678910_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, Temp_text_Variable12345678910111213141516171819202122) == 0x000380, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::Temp_text_Variable12345678910111213141516171819202122' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, Temp_text_Variable1234567891011121314151617181920212223) == 0x000398, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::Temp_text_Variable1234567891011121314151617181920212223' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, Temp_int_Variable123456789101112) == 0x0003B0, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::Temp_int_Variable123456789101112' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, K2Node_Select1234567891011_Default) == 0x0003B8, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::K2Node_Select1234567891011_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, Temp_text_Variable123456789101112131415161718192021222324) == 0x0003D0, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::Temp_text_Variable123456789101112131415161718192021222324' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, Temp_text_Variable12345678910111213141516171819202122232425) == 0x0003E8, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::Temp_text_Variable12345678910111213141516171819202122232425' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, Temp_int_Variable12345678910111213) == 0x000400, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::Temp_int_Variable12345678910111213' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, K2Node_Select123456789101112_Default) == 0x000408, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::K2Node_Select123456789101112_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, Temp_text_Variable1234567891011121314151617181920212223242526) == 0x000420, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::Temp_text_Variable1234567891011121314151617181920212223242526' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, Temp_text_Variable123456789101112131415161718192021222324252627) == 0x000438, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::Temp_text_Variable123456789101112131415161718192021222324252627' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, Temp_int_Variable1234567891011121314) == 0x000450, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::Temp_int_Variable1234567891011121314' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, K2Node_Select12345678910111213_Default) == 0x000458, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::K2Node_Select12345678910111213_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, Temp_text_Variable12345678910111213141516171819202122232425262728) == 0x000470, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::Temp_text_Variable12345678910111213141516171819202122232425262728' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, Temp_text_Variable1234567891011121314151617181920212223242526272829) == 0x000488, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::Temp_text_Variable1234567891011121314151617181920212223242526272829' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, Temp_int_Variable123456789101112131415) == 0x0004A0, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::Temp_int_Variable123456789101112131415' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, K2Node_Select1234567891011121314_Default) == 0x0004A8, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::K2Node_Select1234567891011121314_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, Temp_text_Variable123456789101112131415161718192021222324252627282930) == 0x0004C0, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::Temp_text_Variable123456789101112131415161718192021222324252627282930' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, Temp_text_Variable12345678910111213141516171819202122232425262728293031) == 0x0004D8, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::Temp_text_Variable12345678910111213141516171819202122232425262728293031' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, Temp_int_Variable12345678910111213141516) == 0x0004F0, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::Temp_int_Variable12345678910111213141516' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, K2Node_Select123456789101112131415_Default) == 0x0004F8, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::K2Node_Select123456789101112131415_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, Temp_text_Variable1234567891011121314151617181920212223242526272829303132) == 0x000510, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::Temp_text_Variable1234567891011121314151617181920212223242526272829303132' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, Temp_text_Variable123456789101112131415161718192021222324252627282930313233) == 0x000528, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::Temp_text_Variable123456789101112131415161718192021222324252627282930313233' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, Temp_int_Variable1234567891011121314151617) == 0x000540, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::Temp_int_Variable1234567891011121314151617' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, K2Node_Select12345678910111213141516_Default) == 0x000548, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::K2Node_Select12345678910111213141516_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, Temp_text_Variable12345678910111213141516171819202122232425262728293031323334) == 0x000560, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::Temp_text_Variable12345678910111213141516171819202122232425262728293031323334' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435) == 0x000578, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, Temp_int_Variable123456789101112131415161718) == 0x000590, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::Temp_int_Variable123456789101112131415161718' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, K2Node_Select1234567891011121314151617_Default) == 0x000598, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::K2Node_Select1234567891011121314151617_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536) == 0x0005B0, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637) == 0x0005C8, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, Temp_int_Variable12345678910111213141516171819) == 0x0005E0, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::Temp_int_Variable12345678910111213141516171819' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, K2Node_Select123456789101112131415161718_Default) == 0x0005E8, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::K2Node_Select123456789101112131415161718_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738) == 0x000600, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839) == 0x000618, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, Temp_int_Variable1234567891011121314151617181920) == 0x000630, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::Temp_int_Variable1234567891011121314151617181920' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, K2Node_Select12345678910111213141516171819_Default) == 0x000638, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::K2Node_Select12345678910111213141516171819_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637383940) == 0x000650, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637383940' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738394041) == 0x000668, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738394041' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, Temp_int_Variable123456789101112131415161718192021) == 0x000680, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::Temp_int_Variable123456789101112131415161718192021' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, K2Node_Select1234567891011121314151617181920_Default) == 0x000688, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::K2Node_Select1234567891011121314151617181920_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142) == 0x0006A0, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637383940414243) == 0x0006B8, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::Temp_text_Variable12345678910111213141516171819202122232425262728293031323334353637383940414243' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, K2Node_Select123456789101112131415161718192021_Default) == 0x0006D0, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::K2Node_Select123456789101112131415161718192021_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, Temp_int_Array_Index_Variable) == 0x0006E8, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738394041424344) == 0x0006F0, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::Temp_text_Variable1234567891011121314151617181920212223242526272829303132333435363738394041424344' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, CallFunc_GetFortInputDataForBlueprint_ReturnValue) == 0x000708, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::CallFunc_GetFortInputDataForBlueprint_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, CallFunc_GetFortInputDataForBlueprint_ReturnValue1) == 0x000710, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::CallFunc_GetFortInputDataForBlueprint_ReturnValue1' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, CallFunc_GetDeployHoverboardLabel_ReturnValue) == 0x000718, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::CallFunc_GetDeployHoverboardLabel_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, CallFunc_GetAbility2Label_ReturnValue) == 0x000730, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::CallFunc_GetAbility2Label_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, CallFunc_GetFortInputDataForBlueprint_ReturnValue12) == 0x000748, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::CallFunc_GetFortInputDataForBlueprint_ReturnValue12' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, CallFunc_GetFortInputDataForBlueprint_ReturnValue123) == 0x000750, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::CallFunc_GetFortInputDataForBlueprint_ReturnValue123' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, CallFunc_GetAbility1Label_ReturnValue) == 0x000758, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::CallFunc_GetAbility1Label_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, CallFunc_GetAbility3Label_ReturnValue) == 0x000770, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::CallFunc_GetAbility3Label_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, CallFunc_MakeLiteralText_ReturnValue) == 0x000788, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::CallFunc_MakeLiteralText_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, CallFunc_MakeLiteralText_ReturnValue1) == 0x0007A0, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::CallFunc_MakeLiteralText_ReturnValue1' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, CallFunc_Array_Get_Item) == 0x0007B8, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, CallFunc_Array_Length_ReturnValue) == 0x0007C0, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445) == 0x0007C8, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::Temp_text_Variable123456789101112131415161718192021222324252627282930313233343536373839404142434445' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, Temp_int_Loop_Counter_Variable) == 0x0007E0, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, Temp_int_Variable12345678910111213141516171819202122) == 0x0007E4, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::Temp_int_Variable12345678910111213141516171819202122' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, CallFunc_Less_IntInt_ReturnValue) == 0x0007E8, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, K2Node_Select12345678910111213141516171819202122_Default) == 0x0007F0, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::K2Node_Select12345678910111213141516171819202122_Default' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode, CallFunc_Add_IntInt_ReturnValue) == 0x000808, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function GamepadMappingInfo.GamepadMappingInfo_C.Handle Config Changed Hide or Show Unused Text Lines
// 0x000A (0x000A - 0x0000)
struct GamepadMappingInfo_C_Handle_Config_Changed_Hide_or_Show_Unused_Text_Lines final
{
public:
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable1;                               // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              CallFunc_GetDesiredSlateVisibilityForAbilityChordFromTextDisplay_DesiredSlateVisibility; // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              CallFunc_GetDesiredSlateVisibilityForAbilityChordFromTextDisplay_DesiredSlateVisibility1; // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              CallFunc_GetDesiredSlateVisibilityForAbilityChordFromTextDisplay_DesiredSlateVisibility12; // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue1;         // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GamepadMappingInfo_C_Handle_Config_Changed_Hide_or_Show_Unused_Text_Lines) == 0x000001, "Wrong alignment on GamepadMappingInfo_C_Handle_Config_Changed_Hide_or_Show_Unused_Text_Lines");
static_assert(sizeof(GamepadMappingInfo_C_Handle_Config_Changed_Hide_or_Show_Unused_Text_Lines) == 0x00000A, "Wrong size on GamepadMappingInfo_C_Handle_Config_Changed_Hide_or_Show_Unused_Text_Lines");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_Hide_or_Show_Unused_Text_Lines, Temp_byte_Variable) == 0x000000, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_Hide_or_Show_Unused_Text_Lines::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_Hide_or_Show_Unused_Text_Lines, Temp_byte_Variable1) == 0x000001, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_Hide_or_Show_Unused_Text_Lines::Temp_byte_Variable1' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_Hide_or_Show_Unused_Text_Lines, Temp_bool_Variable) == 0x000002, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_Hide_or_Show_Unused_Text_Lines::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_Hide_or_Show_Unused_Text_Lines, CallFunc_GetDesiredSlateVisibilityForAbilityChordFromTextDisplay_DesiredSlateVisibility) == 0x000003, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_Hide_or_Show_Unused_Text_Lines::CallFunc_GetDesiredSlateVisibilityForAbilityChordFromTextDisplay_DesiredSlateVisibility' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_Hide_or_Show_Unused_Text_Lines, CallFunc_GetDesiredSlateVisibilityForAbilityChordFromTextDisplay_DesiredSlateVisibility1) == 0x000004, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_Hide_or_Show_Unused_Text_Lines::CallFunc_GetDesiredSlateVisibilityForAbilityChordFromTextDisplay_DesiredSlateVisibility1' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_Hide_or_Show_Unused_Text_Lines, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000005, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_Hide_or_Show_Unused_Text_Lines::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_Hide_or_Show_Unused_Text_Lines, CallFunc_GetDesiredSlateVisibilityForAbilityChordFromTextDisplay_DesiredSlateVisibility12) == 0x000006, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_Hide_or_Show_Unused_Text_Lines::CallFunc_GetDesiredSlateVisibilityForAbilityChordFromTextDisplay_DesiredSlateVisibility12' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_Hide_or_Show_Unused_Text_Lines, CallFunc_EqualEqual_ByteByte_ReturnValue1) == 0x000007, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_Hide_or_Show_Unused_Text_Lines::CallFunc_EqualEqual_ByteByte_ReturnValue1' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_Hide_or_Show_Unused_Text_Lines, CallFunc_BooleanOR_ReturnValue) == 0x000008, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_Hide_or_Show_Unused_Text_Lines::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_Handle_Config_Changed_Hide_or_Show_Unused_Text_Lines, K2Node_Select_Default) == 0x000009, "Member 'GamepadMappingInfo_C_Handle_Config_Changed_Hide_or_Show_Unused_Text_Lines::K2Node_Select_Default' has a wrong offset!");

// Function GamepadMappingInfo.GamepadMappingInfo_C.InitializeListOfButtonLabelTextWidgets
// 0x0090 (0x0090 - 0x0000)
struct GamepadMappingInfo_C_InitializeListOfButtonLabelTextWidgets final
{
public:
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue1;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue12;                  // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue123;                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue1234;                // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue12345;               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue123456;              // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue1234567;             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue12345678;            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue123456789;           // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue12345678910;         // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue1234567891011;       // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue123456789101112;     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue12345678910111213;   // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue1234567891011121314; // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue123456789101112131415; // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue12345678910111213141516; // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue1234567891011121314151617; // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue123456789101112131415161718; // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue12345678910111213141516171819; // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue1234567891011121314151617181920; // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue123456789101112131415161718192021; // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue12345678910111213141516171819202122; // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue1234567891011121314151617181920212223; // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue123456789101112131415161718192021222324; // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue12345678910111213141516171819202122232425; // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue1234567891011121314151617181920212223242526; // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue123456789101112131415161718192021222324252627; // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue12345678910111213141516171819202122232425262728; // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue1234567891011121314151617181920212223242526272829; // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue123456789101112131415161718192021222324252627282930; // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue12345678910111213141516171819202122232425262728293031; // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue1234567891011121314151617181920212223242526272829303132; // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue123456789101112131415161718192021222324252627282930313233; // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue12345678910111213141516171819202122232425262728293031323334; // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue1234567891011121314151617181920212223242526272829303132333435; // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GamepadMappingInfo_C_InitializeListOfButtonLabelTextWidgets) == 0x000004, "Wrong alignment on GamepadMappingInfo_C_InitializeListOfButtonLabelTextWidgets");
static_assert(sizeof(GamepadMappingInfo_C_InitializeListOfButtonLabelTextWidgets) == 0x000090, "Wrong size on GamepadMappingInfo_C_InitializeListOfButtonLabelTextWidgets");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonLabelTextWidgets, CallFunc_Array_Add_ReturnValue) == 0x000000, "Member 'GamepadMappingInfo_C_InitializeListOfButtonLabelTextWidgets::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonLabelTextWidgets, CallFunc_Array_Add_ReturnValue1) == 0x000004, "Member 'GamepadMappingInfo_C_InitializeListOfButtonLabelTextWidgets::CallFunc_Array_Add_ReturnValue1' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonLabelTextWidgets, CallFunc_Array_Add_ReturnValue12) == 0x000008, "Member 'GamepadMappingInfo_C_InitializeListOfButtonLabelTextWidgets::CallFunc_Array_Add_ReturnValue12' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonLabelTextWidgets, CallFunc_Array_Add_ReturnValue123) == 0x00000C, "Member 'GamepadMappingInfo_C_InitializeListOfButtonLabelTextWidgets::CallFunc_Array_Add_ReturnValue123' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonLabelTextWidgets, CallFunc_Array_Add_ReturnValue1234) == 0x000010, "Member 'GamepadMappingInfo_C_InitializeListOfButtonLabelTextWidgets::CallFunc_Array_Add_ReturnValue1234' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonLabelTextWidgets, CallFunc_Array_Add_ReturnValue12345) == 0x000014, "Member 'GamepadMappingInfo_C_InitializeListOfButtonLabelTextWidgets::CallFunc_Array_Add_ReturnValue12345' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonLabelTextWidgets, CallFunc_Array_Add_ReturnValue123456) == 0x000018, "Member 'GamepadMappingInfo_C_InitializeListOfButtonLabelTextWidgets::CallFunc_Array_Add_ReturnValue123456' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonLabelTextWidgets, CallFunc_Array_Add_ReturnValue1234567) == 0x00001C, "Member 'GamepadMappingInfo_C_InitializeListOfButtonLabelTextWidgets::CallFunc_Array_Add_ReturnValue1234567' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonLabelTextWidgets, CallFunc_Array_Add_ReturnValue12345678) == 0x000020, "Member 'GamepadMappingInfo_C_InitializeListOfButtonLabelTextWidgets::CallFunc_Array_Add_ReturnValue12345678' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonLabelTextWidgets, CallFunc_Array_Add_ReturnValue123456789) == 0x000024, "Member 'GamepadMappingInfo_C_InitializeListOfButtonLabelTextWidgets::CallFunc_Array_Add_ReturnValue123456789' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonLabelTextWidgets, CallFunc_Array_Add_ReturnValue12345678910) == 0x000028, "Member 'GamepadMappingInfo_C_InitializeListOfButtonLabelTextWidgets::CallFunc_Array_Add_ReturnValue12345678910' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonLabelTextWidgets, CallFunc_Array_Add_ReturnValue1234567891011) == 0x00002C, "Member 'GamepadMappingInfo_C_InitializeListOfButtonLabelTextWidgets::CallFunc_Array_Add_ReturnValue1234567891011' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonLabelTextWidgets, CallFunc_Array_Add_ReturnValue123456789101112) == 0x000030, "Member 'GamepadMappingInfo_C_InitializeListOfButtonLabelTextWidgets::CallFunc_Array_Add_ReturnValue123456789101112' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonLabelTextWidgets, CallFunc_Array_Add_ReturnValue12345678910111213) == 0x000034, "Member 'GamepadMappingInfo_C_InitializeListOfButtonLabelTextWidgets::CallFunc_Array_Add_ReturnValue12345678910111213' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonLabelTextWidgets, CallFunc_Array_Add_ReturnValue1234567891011121314) == 0x000038, "Member 'GamepadMappingInfo_C_InitializeListOfButtonLabelTextWidgets::CallFunc_Array_Add_ReturnValue1234567891011121314' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonLabelTextWidgets, CallFunc_Array_Add_ReturnValue123456789101112131415) == 0x00003C, "Member 'GamepadMappingInfo_C_InitializeListOfButtonLabelTextWidgets::CallFunc_Array_Add_ReturnValue123456789101112131415' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonLabelTextWidgets, CallFunc_Array_Add_ReturnValue12345678910111213141516) == 0x000040, "Member 'GamepadMappingInfo_C_InitializeListOfButtonLabelTextWidgets::CallFunc_Array_Add_ReturnValue12345678910111213141516' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonLabelTextWidgets, CallFunc_Array_Add_ReturnValue1234567891011121314151617) == 0x000044, "Member 'GamepadMappingInfo_C_InitializeListOfButtonLabelTextWidgets::CallFunc_Array_Add_ReturnValue1234567891011121314151617' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonLabelTextWidgets, CallFunc_Array_Add_ReturnValue123456789101112131415161718) == 0x000048, "Member 'GamepadMappingInfo_C_InitializeListOfButtonLabelTextWidgets::CallFunc_Array_Add_ReturnValue123456789101112131415161718' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonLabelTextWidgets, CallFunc_Array_Add_ReturnValue12345678910111213141516171819) == 0x00004C, "Member 'GamepadMappingInfo_C_InitializeListOfButtonLabelTextWidgets::CallFunc_Array_Add_ReturnValue12345678910111213141516171819' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonLabelTextWidgets, CallFunc_Array_Add_ReturnValue1234567891011121314151617181920) == 0x000050, "Member 'GamepadMappingInfo_C_InitializeListOfButtonLabelTextWidgets::CallFunc_Array_Add_ReturnValue1234567891011121314151617181920' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonLabelTextWidgets, CallFunc_Array_Add_ReturnValue123456789101112131415161718192021) == 0x000054, "Member 'GamepadMappingInfo_C_InitializeListOfButtonLabelTextWidgets::CallFunc_Array_Add_ReturnValue123456789101112131415161718192021' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonLabelTextWidgets, CallFunc_Array_Add_ReturnValue12345678910111213141516171819202122) == 0x000058, "Member 'GamepadMappingInfo_C_InitializeListOfButtonLabelTextWidgets::CallFunc_Array_Add_ReturnValue12345678910111213141516171819202122' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonLabelTextWidgets, CallFunc_Array_Add_ReturnValue1234567891011121314151617181920212223) == 0x00005C, "Member 'GamepadMappingInfo_C_InitializeListOfButtonLabelTextWidgets::CallFunc_Array_Add_ReturnValue1234567891011121314151617181920212223' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonLabelTextWidgets, CallFunc_Array_Add_ReturnValue123456789101112131415161718192021222324) == 0x000060, "Member 'GamepadMappingInfo_C_InitializeListOfButtonLabelTextWidgets::CallFunc_Array_Add_ReturnValue123456789101112131415161718192021222324' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonLabelTextWidgets, CallFunc_Array_Add_ReturnValue12345678910111213141516171819202122232425) == 0x000064, "Member 'GamepadMappingInfo_C_InitializeListOfButtonLabelTextWidgets::CallFunc_Array_Add_ReturnValue12345678910111213141516171819202122232425' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonLabelTextWidgets, CallFunc_Array_Add_ReturnValue1234567891011121314151617181920212223242526) == 0x000068, "Member 'GamepadMappingInfo_C_InitializeListOfButtonLabelTextWidgets::CallFunc_Array_Add_ReturnValue1234567891011121314151617181920212223242526' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonLabelTextWidgets, CallFunc_Array_Add_ReturnValue123456789101112131415161718192021222324252627) == 0x00006C, "Member 'GamepadMappingInfo_C_InitializeListOfButtonLabelTextWidgets::CallFunc_Array_Add_ReturnValue123456789101112131415161718192021222324252627' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonLabelTextWidgets, CallFunc_Array_Add_ReturnValue12345678910111213141516171819202122232425262728) == 0x000070, "Member 'GamepadMappingInfo_C_InitializeListOfButtonLabelTextWidgets::CallFunc_Array_Add_ReturnValue12345678910111213141516171819202122232425262728' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonLabelTextWidgets, CallFunc_Array_Add_ReturnValue1234567891011121314151617181920212223242526272829) == 0x000074, "Member 'GamepadMappingInfo_C_InitializeListOfButtonLabelTextWidgets::CallFunc_Array_Add_ReturnValue1234567891011121314151617181920212223242526272829' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonLabelTextWidgets, CallFunc_Array_Add_ReturnValue123456789101112131415161718192021222324252627282930) == 0x000078, "Member 'GamepadMappingInfo_C_InitializeListOfButtonLabelTextWidgets::CallFunc_Array_Add_ReturnValue123456789101112131415161718192021222324252627282930' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonLabelTextWidgets, CallFunc_Array_Add_ReturnValue12345678910111213141516171819202122232425262728293031) == 0x00007C, "Member 'GamepadMappingInfo_C_InitializeListOfButtonLabelTextWidgets::CallFunc_Array_Add_ReturnValue12345678910111213141516171819202122232425262728293031' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonLabelTextWidgets, CallFunc_Array_Add_ReturnValue1234567891011121314151617181920212223242526272829303132) == 0x000080, "Member 'GamepadMappingInfo_C_InitializeListOfButtonLabelTextWidgets::CallFunc_Array_Add_ReturnValue1234567891011121314151617181920212223242526272829303132' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonLabelTextWidgets, CallFunc_Array_Add_ReturnValue123456789101112131415161718192021222324252627282930313233) == 0x000084, "Member 'GamepadMappingInfo_C_InitializeListOfButtonLabelTextWidgets::CallFunc_Array_Add_ReturnValue123456789101112131415161718192021222324252627282930313233' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonLabelTextWidgets, CallFunc_Array_Add_ReturnValue12345678910111213141516171819202122232425262728293031323334) == 0x000088, "Member 'GamepadMappingInfo_C_InitializeListOfButtonLabelTextWidgets::CallFunc_Array_Add_ReturnValue12345678910111213141516171819202122232425262728293031323334' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonLabelTextWidgets, CallFunc_Array_Add_ReturnValue1234567891011121314151617181920212223242526272829303132333435) == 0x00008C, "Member 'GamepadMappingInfo_C_InitializeListOfButtonLabelTextWidgets::CallFunc_Array_Add_ReturnValue1234567891011121314151617181920212223242526272829303132333435' has a wrong offset!");

// Function GamepadMappingInfo.GamepadMappingInfo_C.InitializeListOfButtonTextForSTWCombatProBuild
// 0x04F8 (0x04F8 - 0x0000)
struct GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild final
{
public:
	TArray<class FText>                           ButtonTextLabels;                                  // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	class FText                                   Temp_text_Variable;                                // 0x0010(0x0018)(ConstParm)
	class FText                                   Temp_text_Variable1;                               // 0x0028(0x0018)(ConstParm)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue1;                   // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortInputData*                         CallFunc_GetFortInputDataForBlueprint_ReturnValue; // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortInputData*                         CallFunc_GetFortInputDataForBlueprint_ReturnValue1; // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetBuildingEditResetLabel_ReturnValue;    // 0x0058(0x0018)()
	class FText                                   CallFunc_GetRotateBuildingTapRepairHoldLabel_ReturnValue; // 0x0070(0x0018)()
	int32                                         CallFunc_Array_Add_ReturnValue12;                  // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue123;                 // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortInputData*                         CallFunc_GetFortInputDataForBlueprint_ReturnValue12; // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortInputData*                         CallFunc_GetFortInputDataForBlueprint_ReturnValue123; // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetLookLabel_ReturnValue;                 // 0x00A0(0x0018)()
	class FText                                   CallFunc_GetJumpLabel_ReturnValue;                 // 0x00B8(0x0018)()
	int32                                         CallFunc_Array_Add_ReturnValue1234;                // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue12345;               // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortInputData*                         CallFunc_GetFortInputDataForBlueprint_ReturnValue1234; // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortInputData*                         CallFunc_GetFortInputDataForBlueprint_ReturnValue12345; // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetEditBuildingPieceHoldLabel_ReturnValue; // 0x00E8(0x0018)()
	class FText                                   CallFunc_GetSwitchQuickbarLabel_ReturnValue;       // 0x0100(0x0018)()
	int32                                         CallFunc_Array_Add_ReturnValue123456;              // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue1234567;             // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortInputData*                         CallFunc_GetFortInputDataForBlueprint_ReturnValue123456; // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortInputData*                         CallFunc_GetFortInputDataForBlueprint_ReturnValue1234567; // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetTrapInventoryHoldLabel_ReturnValue;    // 0x0130(0x0018)()
	class FText                                   CallFunc_GetInteractTapHoldLabel_ReturnValue;      // 0x0148(0x0018)()
	int32                                         CallFunc_Array_Add_ReturnValue12345678;            // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue123456789;           // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortInputData*                         CallFunc_GetFortInputDataForBlueprint_ReturnValue12345678; // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortInputData*                         CallFunc_GetFortInputDataForBlueprint_ReturnValue123456789; // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetPickTrapTapHoldLabel_ReturnValue;      // 0x0178(0x0018)()
	class FText                                   CallFunc_GetHarvestWeaponLabel_ReturnValue;        // 0x0190(0x0018)()
	int32                                         CallFunc_Array_Add_ReturnValue12345678910;         // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue1234567891011;       // 0x01AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortInputData*                         CallFunc_GetFortInputDataForBlueprint_ReturnValue12345678910; // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortInputData*                         CallFunc_GetFortInputDataForBlueprint_ReturnValue1234567891011; // 0x01B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetNextBuildingPieceLabel_ReturnValue;    // 0x01C0(0x0018)()
	class FText                                   CallFunc_GetPlaceBuildingOrTrapConfirmLabel_ReturnValue; // 0x01D8(0x0018)()
	int32                                         CallFunc_Array_Add_ReturnValue123456789101112;     // 0x01F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue12345678910111213;   // 0x01F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortInputData*                         CallFunc_GetFortInputDataForBlueprint_ReturnValue123456789101112; // 0x01F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortInputData*                         CallFunc_GetFortInputDataForBlueprint_ReturnValue12345678910111213; // 0x0200(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetGameMenuLabel_ReturnValue;             // 0x0208(0x0018)()
	class FText                                   CallFunc_GetToggleFullScreenMapLabel_ReturnValue;  // 0x0220(0x0018)()
	int32                                         CallFunc_Array_Add_ReturnValue1234567891011121314; // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue123456789101112131415; // 0x023C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortInputData*                         CallFunc_GetFortInputDataForBlueprint_ReturnValue1234567891011121314; // 0x0240(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortInputData*                         CallFunc_GetFortInputDataForBlueprint_ReturnValue123456789101112131415; // 0x0248(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetGadget2Label_ReturnValue;              // 0x0250(0x0018)()
	class FText                                   CallFunc_GetGadget2Label_ReturnValue1;             // 0x0268(0x0018)()
	int32                                         CallFunc_Array_Add_ReturnValue12345678910111213141516; // 0x0280(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue1234567891011121314151617; // 0x0284(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortInputData*                         CallFunc_GetFortInputDataForBlueprint_ReturnValue12345678910111213141516; // 0x0288(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortInputData*                         CallFunc_GetFortInputDataForBlueprint_ReturnValue1234567891011121314151617; // 0x0290(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetGadget1Label_ReturnValue;              // 0x0298(0x0018)()
	class FText                                   CallFunc_GetGadget1Label_ReturnValue1;             // 0x02B0(0x0018)()
	int32                                         CallFunc_Array_Add_ReturnValue123456789101112131415161718; // 0x02C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue12345678910111213141516171819; // 0x02CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortInputData*                         CallFunc_GetFortInputDataForBlueprint_ReturnValue123456789101112131415161718; // 0x02D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortInputData*                         CallFunc_GetFortInputDataForBlueprint_ReturnValue12345678910111213141516171819; // 0x02D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetToggleInventoryLabel_ReturnValue;      // 0x02E0(0x0018)()
	class FText                                   CallFunc_GetToggleInventoryLabel_ReturnValue1;     // 0x02F8(0x0018)()
	int32                                         CallFunc_Array_Add_ReturnValue1234567891011121314151617181920; // 0x0310(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue123456789101112131415161718192021; // 0x0314(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortInputData*                         CallFunc_GetFortInputDataForBlueprint_ReturnValue1234567891011121314151617181920; // 0x0318(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortInputData*                         CallFunc_GetFortInputDataForBlueprint_ReturnValue123456789101112131415161718192021; // 0x0320(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetEmoteOrQuickChatLabel_ReturnValue;     // 0x0328(0x0018)()
	class FText                                   CallFunc_GetEmoteOrQuickChatLabel_ReturnValue1;    // 0x0340(0x0018)()
	int32                                         CallFunc_Array_Add_ReturnValue12345678910111213141516171819202122; // 0x0358(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue1234567891011121314151617181920212223; // 0x035C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortInputData*                         CallFunc_GetFortInputDataForBlueprint_ReturnValue12345678910111213141516171819202122; // 0x0360(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortInputData*                         CallFunc_GetFortInputDataForBlueprint_ReturnValue1234567891011121314151617181920212223; // 0x0368(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetAutoSprintLabel_ReturnValue;           // 0x0370(0x0018)()
	class FText                                   CallFunc_GetAutoSprintLabel_ReturnValue1;          // 0x0388(0x0018)()
	int32                                         CallFunc_Array_Add_ReturnValue123456789101112131415161718192021222324; // 0x03A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue12345678910111213141516171819202122232425; // 0x03A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortInputData*                         CallFunc_GetFortInputDataForBlueprint_ReturnValue123456789101112131415161718192021222324; // 0x03A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortInputData*                         CallFunc_GetFortInputDataForBlueprint_ReturnValue12345678910111213141516171819202122232425; // 0x03B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetSprintLabel_ReturnValue;               // 0x03B8(0x0018)()
	class FText                                   CallFunc_GetSprintLabel_ReturnValue1;              // 0x03D0(0x0018)()
	int32                                         CallFunc_Array_Add_ReturnValue1234567891011121314151617181920212223242526; // 0x03E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue123456789101112131415161718192021222324252627; // 0x03EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortInputData*                         CallFunc_GetFortInputDataForBlueprint_ReturnValue1234567891011121314151617181920212223242526; // 0x03F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortInputData*                         CallFunc_GetFortInputDataForBlueprint_ReturnValue123456789101112131415161718192021222324252627; // 0x03F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetMoveLabel_ReturnValue;                 // 0x0400(0x0018)()
	class FText                                   CallFunc_GetMoveLabel_ReturnValue1;                // 0x0418(0x0018)()
	int32                                         CallFunc_Array_Add_ReturnValue12345678910111213141516171819202122232425262728; // 0x0430(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue1234567891011121314151617181920212223242526272829; // 0x0434(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortInputData*                         CallFunc_GetFortInputDataForBlueprint_ReturnValue12345678910111213141516171819202122232425262728; // 0x0438(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortInputData*                         CallFunc_GetFortInputDataForBlueprint_ReturnValue1234567891011121314151617181920212223242526272829; // 0x0440(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetPreviousBuildingPieceLabel_ReturnValue; // 0x0448(0x0018)()
	class FText                                   CallFunc_GetChangeMaterialLabel_ReturnValue;       // 0x0460(0x0018)()
	int32                                         CallFunc_Array_Add_ReturnValue123456789101112131415161718192021222324252627282930; // 0x0478(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue12345678910111213141516171819202122232425262728293031; // 0x047C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   Temp_text_Variable12;                              // 0x0480(0x0018)(ConstParm)
	class FText                                   Temp_text_Variable123;                             // 0x0498(0x0018)(ConstParm)
	int32                                         CallFunc_Array_Add_ReturnValue1234567891011121314151617181920212223242526272829303132; // 0x04B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue123456789101112131415161718192021222324252627282930313233; // 0x04B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   Temp_text_Variable1234;                            // 0x04B8(0x0018)(ConstParm)
	int32                                         CallFunc_Array_Add_ReturnValue12345678910111213141516171819202122232425262728293031323334; // 0x04D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4D4[0x4];                                      // 0x04D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_MakeLiteralText_ReturnValue;              // 0x04D8(0x0018)()
	int32                                         CallFunc_Array_Add_ReturnValue1234567891011121314151617181920212223242526272829303132333435; // 0x04F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild) == 0x000008, "Wrong alignment on GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild");
static_assert(sizeof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild) == 0x0004F8, "Wrong size on GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, ButtonTextLabels) == 0x000000, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::ButtonTextLabels' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, Temp_text_Variable) == 0x000010, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, Temp_text_Variable1) == 0x000028, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::Temp_text_Variable1' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_Array_Add_ReturnValue) == 0x000040, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_Array_Add_ReturnValue1) == 0x000044, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_Array_Add_ReturnValue1' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_GetFortInputDataForBlueprint_ReturnValue) == 0x000048, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_GetFortInputDataForBlueprint_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_GetFortInputDataForBlueprint_ReturnValue1) == 0x000050, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_GetFortInputDataForBlueprint_ReturnValue1' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_GetBuildingEditResetLabel_ReturnValue) == 0x000058, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_GetBuildingEditResetLabel_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_GetRotateBuildingTapRepairHoldLabel_ReturnValue) == 0x000070, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_GetRotateBuildingTapRepairHoldLabel_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_Array_Add_ReturnValue12) == 0x000088, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_Array_Add_ReturnValue12' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_Array_Add_ReturnValue123) == 0x00008C, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_Array_Add_ReturnValue123' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_GetFortInputDataForBlueprint_ReturnValue12) == 0x000090, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_GetFortInputDataForBlueprint_ReturnValue12' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_GetFortInputDataForBlueprint_ReturnValue123) == 0x000098, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_GetFortInputDataForBlueprint_ReturnValue123' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_GetLookLabel_ReturnValue) == 0x0000A0, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_GetLookLabel_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_GetJumpLabel_ReturnValue) == 0x0000B8, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_GetJumpLabel_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_Array_Add_ReturnValue1234) == 0x0000D0, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_Array_Add_ReturnValue1234' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_Array_Add_ReturnValue12345) == 0x0000D4, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_Array_Add_ReturnValue12345' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_GetFortInputDataForBlueprint_ReturnValue1234) == 0x0000D8, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_GetFortInputDataForBlueprint_ReturnValue1234' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_GetFortInputDataForBlueprint_ReturnValue12345) == 0x0000E0, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_GetFortInputDataForBlueprint_ReturnValue12345' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_GetEditBuildingPieceHoldLabel_ReturnValue) == 0x0000E8, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_GetEditBuildingPieceHoldLabel_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_GetSwitchQuickbarLabel_ReturnValue) == 0x000100, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_GetSwitchQuickbarLabel_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_Array_Add_ReturnValue123456) == 0x000118, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_Array_Add_ReturnValue123456' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_Array_Add_ReturnValue1234567) == 0x00011C, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_Array_Add_ReturnValue1234567' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_GetFortInputDataForBlueprint_ReturnValue123456) == 0x000120, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_GetFortInputDataForBlueprint_ReturnValue123456' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_GetFortInputDataForBlueprint_ReturnValue1234567) == 0x000128, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_GetFortInputDataForBlueprint_ReturnValue1234567' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_GetTrapInventoryHoldLabel_ReturnValue) == 0x000130, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_GetTrapInventoryHoldLabel_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_GetInteractTapHoldLabel_ReturnValue) == 0x000148, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_GetInteractTapHoldLabel_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_Array_Add_ReturnValue12345678) == 0x000160, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_Array_Add_ReturnValue12345678' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_Array_Add_ReturnValue123456789) == 0x000164, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_Array_Add_ReturnValue123456789' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_GetFortInputDataForBlueprint_ReturnValue12345678) == 0x000168, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_GetFortInputDataForBlueprint_ReturnValue12345678' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_GetFortInputDataForBlueprint_ReturnValue123456789) == 0x000170, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_GetFortInputDataForBlueprint_ReturnValue123456789' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_GetPickTrapTapHoldLabel_ReturnValue) == 0x000178, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_GetPickTrapTapHoldLabel_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_GetHarvestWeaponLabel_ReturnValue) == 0x000190, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_GetHarvestWeaponLabel_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_Array_Add_ReturnValue12345678910) == 0x0001A8, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_Array_Add_ReturnValue12345678910' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_Array_Add_ReturnValue1234567891011) == 0x0001AC, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_Array_Add_ReturnValue1234567891011' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_GetFortInputDataForBlueprint_ReturnValue12345678910) == 0x0001B0, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_GetFortInputDataForBlueprint_ReturnValue12345678910' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_GetFortInputDataForBlueprint_ReturnValue1234567891011) == 0x0001B8, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_GetFortInputDataForBlueprint_ReturnValue1234567891011' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_GetNextBuildingPieceLabel_ReturnValue) == 0x0001C0, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_GetNextBuildingPieceLabel_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_GetPlaceBuildingOrTrapConfirmLabel_ReturnValue) == 0x0001D8, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_GetPlaceBuildingOrTrapConfirmLabel_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_Array_Add_ReturnValue123456789101112) == 0x0001F0, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_Array_Add_ReturnValue123456789101112' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_Array_Add_ReturnValue12345678910111213) == 0x0001F4, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_Array_Add_ReturnValue12345678910111213' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_GetFortInputDataForBlueprint_ReturnValue123456789101112) == 0x0001F8, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_GetFortInputDataForBlueprint_ReturnValue123456789101112' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_GetFortInputDataForBlueprint_ReturnValue12345678910111213) == 0x000200, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_GetFortInputDataForBlueprint_ReturnValue12345678910111213' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_GetGameMenuLabel_ReturnValue) == 0x000208, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_GetGameMenuLabel_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_GetToggleFullScreenMapLabel_ReturnValue) == 0x000220, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_GetToggleFullScreenMapLabel_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_Array_Add_ReturnValue1234567891011121314) == 0x000238, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_Array_Add_ReturnValue1234567891011121314' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_Array_Add_ReturnValue123456789101112131415) == 0x00023C, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_Array_Add_ReturnValue123456789101112131415' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_GetFortInputDataForBlueprint_ReturnValue1234567891011121314) == 0x000240, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_GetFortInputDataForBlueprint_ReturnValue1234567891011121314' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_GetFortInputDataForBlueprint_ReturnValue123456789101112131415) == 0x000248, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_GetFortInputDataForBlueprint_ReturnValue123456789101112131415' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_GetGadget2Label_ReturnValue) == 0x000250, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_GetGadget2Label_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_GetGadget2Label_ReturnValue1) == 0x000268, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_GetGadget2Label_ReturnValue1' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_Array_Add_ReturnValue12345678910111213141516) == 0x000280, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_Array_Add_ReturnValue12345678910111213141516' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_Array_Add_ReturnValue1234567891011121314151617) == 0x000284, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_Array_Add_ReturnValue1234567891011121314151617' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_GetFortInputDataForBlueprint_ReturnValue12345678910111213141516) == 0x000288, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_GetFortInputDataForBlueprint_ReturnValue12345678910111213141516' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_GetFortInputDataForBlueprint_ReturnValue1234567891011121314151617) == 0x000290, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_GetFortInputDataForBlueprint_ReturnValue1234567891011121314151617' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_GetGadget1Label_ReturnValue) == 0x000298, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_GetGadget1Label_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_GetGadget1Label_ReturnValue1) == 0x0002B0, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_GetGadget1Label_ReturnValue1' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_Array_Add_ReturnValue123456789101112131415161718) == 0x0002C8, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_Array_Add_ReturnValue123456789101112131415161718' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_Array_Add_ReturnValue12345678910111213141516171819) == 0x0002CC, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_Array_Add_ReturnValue12345678910111213141516171819' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_GetFortInputDataForBlueprint_ReturnValue123456789101112131415161718) == 0x0002D0, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_GetFortInputDataForBlueprint_ReturnValue123456789101112131415161718' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_GetFortInputDataForBlueprint_ReturnValue12345678910111213141516171819) == 0x0002D8, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_GetFortInputDataForBlueprint_ReturnValue12345678910111213141516171819' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_GetToggleInventoryLabel_ReturnValue) == 0x0002E0, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_GetToggleInventoryLabel_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_GetToggleInventoryLabel_ReturnValue1) == 0x0002F8, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_GetToggleInventoryLabel_ReturnValue1' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_Array_Add_ReturnValue1234567891011121314151617181920) == 0x000310, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_Array_Add_ReturnValue1234567891011121314151617181920' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_Array_Add_ReturnValue123456789101112131415161718192021) == 0x000314, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_Array_Add_ReturnValue123456789101112131415161718192021' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_GetFortInputDataForBlueprint_ReturnValue1234567891011121314151617181920) == 0x000318, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_GetFortInputDataForBlueprint_ReturnValue1234567891011121314151617181920' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_GetFortInputDataForBlueprint_ReturnValue123456789101112131415161718192021) == 0x000320, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_GetFortInputDataForBlueprint_ReturnValue123456789101112131415161718192021' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_GetEmoteOrQuickChatLabel_ReturnValue) == 0x000328, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_GetEmoteOrQuickChatLabel_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_GetEmoteOrQuickChatLabel_ReturnValue1) == 0x000340, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_GetEmoteOrQuickChatLabel_ReturnValue1' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_Array_Add_ReturnValue12345678910111213141516171819202122) == 0x000358, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_Array_Add_ReturnValue12345678910111213141516171819202122' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_Array_Add_ReturnValue1234567891011121314151617181920212223) == 0x00035C, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_Array_Add_ReturnValue1234567891011121314151617181920212223' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_GetFortInputDataForBlueprint_ReturnValue12345678910111213141516171819202122) == 0x000360, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_GetFortInputDataForBlueprint_ReturnValue12345678910111213141516171819202122' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_GetFortInputDataForBlueprint_ReturnValue1234567891011121314151617181920212223) == 0x000368, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_GetFortInputDataForBlueprint_ReturnValue1234567891011121314151617181920212223' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_GetAutoSprintLabel_ReturnValue) == 0x000370, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_GetAutoSprintLabel_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_GetAutoSprintLabel_ReturnValue1) == 0x000388, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_GetAutoSprintLabel_ReturnValue1' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_Array_Add_ReturnValue123456789101112131415161718192021222324) == 0x0003A0, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_Array_Add_ReturnValue123456789101112131415161718192021222324' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_Array_Add_ReturnValue12345678910111213141516171819202122232425) == 0x0003A4, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_Array_Add_ReturnValue12345678910111213141516171819202122232425' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_GetFortInputDataForBlueprint_ReturnValue123456789101112131415161718192021222324) == 0x0003A8, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_GetFortInputDataForBlueprint_ReturnValue123456789101112131415161718192021222324' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_GetFortInputDataForBlueprint_ReturnValue12345678910111213141516171819202122232425) == 0x0003B0, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_GetFortInputDataForBlueprint_ReturnValue12345678910111213141516171819202122232425' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_GetSprintLabel_ReturnValue) == 0x0003B8, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_GetSprintLabel_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_GetSprintLabel_ReturnValue1) == 0x0003D0, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_GetSprintLabel_ReturnValue1' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_Array_Add_ReturnValue1234567891011121314151617181920212223242526) == 0x0003E8, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_Array_Add_ReturnValue1234567891011121314151617181920212223242526' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_Array_Add_ReturnValue123456789101112131415161718192021222324252627) == 0x0003EC, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_Array_Add_ReturnValue123456789101112131415161718192021222324252627' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_GetFortInputDataForBlueprint_ReturnValue1234567891011121314151617181920212223242526) == 0x0003F0, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_GetFortInputDataForBlueprint_ReturnValue1234567891011121314151617181920212223242526' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_GetFortInputDataForBlueprint_ReturnValue123456789101112131415161718192021222324252627) == 0x0003F8, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_GetFortInputDataForBlueprint_ReturnValue123456789101112131415161718192021222324252627' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_GetMoveLabel_ReturnValue) == 0x000400, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_GetMoveLabel_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_GetMoveLabel_ReturnValue1) == 0x000418, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_GetMoveLabel_ReturnValue1' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_Array_Add_ReturnValue12345678910111213141516171819202122232425262728) == 0x000430, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_Array_Add_ReturnValue12345678910111213141516171819202122232425262728' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_Array_Add_ReturnValue1234567891011121314151617181920212223242526272829) == 0x000434, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_Array_Add_ReturnValue1234567891011121314151617181920212223242526272829' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_GetFortInputDataForBlueprint_ReturnValue12345678910111213141516171819202122232425262728) == 0x000438, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_GetFortInputDataForBlueprint_ReturnValue12345678910111213141516171819202122232425262728' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_GetFortInputDataForBlueprint_ReturnValue1234567891011121314151617181920212223242526272829) == 0x000440, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_GetFortInputDataForBlueprint_ReturnValue1234567891011121314151617181920212223242526272829' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_GetPreviousBuildingPieceLabel_ReturnValue) == 0x000448, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_GetPreviousBuildingPieceLabel_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_GetChangeMaterialLabel_ReturnValue) == 0x000460, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_GetChangeMaterialLabel_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_Array_Add_ReturnValue123456789101112131415161718192021222324252627282930) == 0x000478, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_Array_Add_ReturnValue123456789101112131415161718192021222324252627282930' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_Array_Add_ReturnValue12345678910111213141516171819202122232425262728293031) == 0x00047C, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_Array_Add_ReturnValue12345678910111213141516171819202122232425262728293031' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, Temp_text_Variable12) == 0x000480, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::Temp_text_Variable12' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, Temp_text_Variable123) == 0x000498, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::Temp_text_Variable123' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_Array_Add_ReturnValue1234567891011121314151617181920212223242526272829303132) == 0x0004B0, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_Array_Add_ReturnValue1234567891011121314151617181920212223242526272829303132' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_Array_Add_ReturnValue123456789101112131415161718192021222324252627282930313233) == 0x0004B4, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_Array_Add_ReturnValue123456789101112131415161718192021222324252627282930313233' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, Temp_text_Variable1234) == 0x0004B8, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::Temp_text_Variable1234' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_Array_Add_ReturnValue12345678910111213141516171819202122232425262728293031323334) == 0x0004D0, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_Array_Add_ReturnValue12345678910111213141516171819202122232425262728293031323334' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_MakeLiteralText_ReturnValue) == 0x0004D8, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_MakeLiteralText_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild, CallFunc_Array_Add_ReturnValue1234567891011121314151617181920212223242526272829303132333435) == 0x0004F0, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild::CallFunc_Array_Add_ReturnValue1234567891011121314151617181920212223242526272829303132333435' has a wrong offset!");

// Function GamepadMappingInfo.GamepadMappingInfo_C.GetDesiredSlateVisibilityForAbilityChordFromTextDisplay
// 0x0050 (0x0050 - 0x0000)
struct GamepadMappingInfo_C_GetDesiredSlateVisibilityForAbilityChordFromTextDisplay final
{
public:
	class UTextBlock*                             TextWidget;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              DesiredSlateVisibility;                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetText_ReturnValue;                      // 0x0010(0x0018)()
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable1;                               // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_MakeLiteralText_ReturnValue;              // 0x0030(0x0018)()
	bool                                          CallFunc_EqualEqual_TextText_ReturnValue;          // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GamepadMappingInfo_C_GetDesiredSlateVisibilityForAbilityChordFromTextDisplay) == 0x000008, "Wrong alignment on GamepadMappingInfo_C_GetDesiredSlateVisibilityForAbilityChordFromTextDisplay");
static_assert(sizeof(GamepadMappingInfo_C_GetDesiredSlateVisibilityForAbilityChordFromTextDisplay) == 0x000050, "Wrong size on GamepadMappingInfo_C_GetDesiredSlateVisibilityForAbilityChordFromTextDisplay");
static_assert(offsetof(GamepadMappingInfo_C_GetDesiredSlateVisibilityForAbilityChordFromTextDisplay, TextWidget) == 0x000000, "Member 'GamepadMappingInfo_C_GetDesiredSlateVisibilityForAbilityChordFromTextDisplay::TextWidget' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_GetDesiredSlateVisibilityForAbilityChordFromTextDisplay, DesiredSlateVisibility) == 0x000008, "Member 'GamepadMappingInfo_C_GetDesiredSlateVisibilityForAbilityChordFromTextDisplay::DesiredSlateVisibility' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_GetDesiredSlateVisibilityForAbilityChordFromTextDisplay, Temp_bool_Variable) == 0x000009, "Member 'GamepadMappingInfo_C_GetDesiredSlateVisibilityForAbilityChordFromTextDisplay::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_GetDesiredSlateVisibilityForAbilityChordFromTextDisplay, CallFunc_GetText_ReturnValue) == 0x000010, "Member 'GamepadMappingInfo_C_GetDesiredSlateVisibilityForAbilityChordFromTextDisplay::CallFunc_GetText_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_GetDesiredSlateVisibilityForAbilityChordFromTextDisplay, Temp_byte_Variable) == 0x000028, "Member 'GamepadMappingInfo_C_GetDesiredSlateVisibilityForAbilityChordFromTextDisplay::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_GetDesiredSlateVisibilityForAbilityChordFromTextDisplay, Temp_byte_Variable1) == 0x000029, "Member 'GamepadMappingInfo_C_GetDesiredSlateVisibilityForAbilityChordFromTextDisplay::Temp_byte_Variable1' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_GetDesiredSlateVisibilityForAbilityChordFromTextDisplay, CallFunc_MakeLiteralText_ReturnValue) == 0x000030, "Member 'GamepadMappingInfo_C_GetDesiredSlateVisibilityForAbilityChordFromTextDisplay::CallFunc_MakeLiteralText_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_GetDesiredSlateVisibilityForAbilityChordFromTextDisplay, CallFunc_EqualEqual_TextText_ReturnValue) == 0x000048, "Member 'GamepadMappingInfo_C_GetDesiredSlateVisibilityForAbilityChordFromTextDisplay::CallFunc_EqualEqual_TextText_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_GetDesiredSlateVisibilityForAbilityChordFromTextDisplay, K2Node_Select_Default) == 0x000049, "Member 'GamepadMappingInfo_C_GetDesiredSlateVisibilityForAbilityChordFromTextDisplay::K2Node_Select_Default' has a wrong offset!");

// Function GamepadMappingInfo.GamepadMappingInfo_C.SetTextFieldVisibilityForExtraLine
// 0x0050 (0x0050 - 0x0000)
struct GamepadMappingInfo_C_SetTextFieldVisibilityForExtraLine final
{
public:
	class UTextBlock*                             TextWidget;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetText_ReturnValue;                      // 0x0010(0x0018)()
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable1;                               // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_MakeLiteralText_ReturnValue;              // 0x0030(0x0018)()
	bool                                          CallFunc_EqualEqual_TextText_ReturnValue;          // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GamepadMappingInfo_C_SetTextFieldVisibilityForExtraLine) == 0x000008, "Wrong alignment on GamepadMappingInfo_C_SetTextFieldVisibilityForExtraLine");
static_assert(sizeof(GamepadMappingInfo_C_SetTextFieldVisibilityForExtraLine) == 0x000050, "Wrong size on GamepadMappingInfo_C_SetTextFieldVisibilityForExtraLine");
static_assert(offsetof(GamepadMappingInfo_C_SetTextFieldVisibilityForExtraLine, TextWidget) == 0x000000, "Member 'GamepadMappingInfo_C_SetTextFieldVisibilityForExtraLine::TextWidget' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_SetTextFieldVisibilityForExtraLine, Temp_bool_Variable) == 0x000008, "Member 'GamepadMappingInfo_C_SetTextFieldVisibilityForExtraLine::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_SetTextFieldVisibilityForExtraLine, CallFunc_GetText_ReturnValue) == 0x000010, "Member 'GamepadMappingInfo_C_SetTextFieldVisibilityForExtraLine::CallFunc_GetText_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_SetTextFieldVisibilityForExtraLine, Temp_byte_Variable) == 0x000028, "Member 'GamepadMappingInfo_C_SetTextFieldVisibilityForExtraLine::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_SetTextFieldVisibilityForExtraLine, Temp_byte_Variable1) == 0x000029, "Member 'GamepadMappingInfo_C_SetTextFieldVisibilityForExtraLine::Temp_byte_Variable1' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_SetTextFieldVisibilityForExtraLine, CallFunc_MakeLiteralText_ReturnValue) == 0x000030, "Member 'GamepadMappingInfo_C_SetTextFieldVisibilityForExtraLine::CallFunc_MakeLiteralText_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_SetTextFieldVisibilityForExtraLine, CallFunc_EqualEqual_TextText_ReturnValue) == 0x000048, "Member 'GamepadMappingInfo_C_SetTextFieldVisibilityForExtraLine::CallFunc_EqualEqual_TextText_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_SetTextFieldVisibilityForExtraLine, K2Node_Select_Default) == 0x000049, "Member 'GamepadMappingInfo_C_SetTextFieldVisibilityForExtraLine::K2Node_Select_Default' has a wrong offset!");

// Function GamepadMappingInfo.GamepadMappingInfo_C.InitializeListOfButtonTextForSTWCombatProCombat
// 0x0510 (0x0510 - 0x0000)
struct GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat final
{
public:
	TArray<class FText>                           ButtonTextLabels;                                  // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	class UFortInputData*                         CallFunc_GetFortInputDataForBlueprint_ReturnValue; // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetAbility2Label_ReturnValue;             // 0x0018(0x0018)()
	class UFortInputData*                         CallFunc_GetFortInputDataForBlueprint_ReturnValue1; // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortInputData*                         CallFunc_GetFortInputDataForBlueprint_ReturnValue12; // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetAbility1Label_ReturnValue;             // 0x0040(0x0018)()
	class FText                                   CallFunc_GetAbility3Label_ReturnValue;             // 0x0058(0x0018)()
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue1;                   // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue12;                  // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortInputData*                         CallFunc_GetFortInputDataForBlueprint_ReturnValue123; // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortInputData*                         CallFunc_GetFortInputDataForBlueprint_ReturnValue1234; // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetRepairImproveSpotEnemyLabel_ReturnValue; // 0x0090(0x0018)()
	class FText                                   CallFunc_GetLookLabel_ReturnValue;                 // 0x00A8(0x0018)()
	int32                                         CallFunc_Array_Add_ReturnValue123;                 // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue1234;                // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortInputData*                         CallFunc_GetFortInputDataForBlueprint_ReturnValue12345; // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortInputData*                         CallFunc_GetFortInputDataForBlueprint_ReturnValue123456; // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetJumpLabel_ReturnValue;                 // 0x00D8(0x0018)()
	class FText                                   CallFunc_GetEditBuildingPieceHoldLabel_ReturnValue; // 0x00F0(0x0018)()
	int32                                         CallFunc_Array_Add_ReturnValue12345;               // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue123456;              // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortInputData*                         CallFunc_GetFortInputDataForBlueprint_ReturnValue1234567; // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortInputData*                         CallFunc_GetFortInputDataForBlueprint_ReturnValue12345678; // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetDeployHoverboardLabel_ReturnValue;     // 0x0120(0x0018)()
	class FText                                   CallFunc_GetSwitchQuickbarLabel_ReturnValue;       // 0x0138(0x0018)()
	int32                                         CallFunc_Array_Add_ReturnValue1234567;             // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue12345678;            // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortInputData*                         CallFunc_GetFortInputDataForBlueprint_ReturnValue123456789; // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortInputData*                         CallFunc_GetFortInputDataForBlueprint_ReturnValue12345678910; // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetCraftAmmoHoldLabel_ReturnValue;        // 0x0168(0x0018)()
	class FText                                   CallFunc_GetInteractTapHoldLabel_ReturnValue;      // 0x0180(0x0018)()
	int32                                         CallFunc_Array_Add_ReturnValue123456789;           // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue12345678910;         // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortInputData*                         CallFunc_GetFortInputDataForBlueprint_ReturnValue1234567891011; // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortInputData*                         CallFunc_GetFortInputDataForBlueprint_ReturnValue123456789101112; // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetReloadTapLabel_ReturnValue;            // 0x01B0(0x0018)()
	class FText                                   CallFunc_GetHarvestWeaponLabel_ReturnValue;        // 0x01C8(0x0018)()
	int32                                         CallFunc_Array_Add_ReturnValue1234567891011;       // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue123456789101112;     // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortInputData*                         CallFunc_GetFortInputDataForBlueprint_ReturnValue12345678910111213; // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortInputData*                         CallFunc_GetFortInputDataForBlueprint_ReturnValue1234567891011121314; // 0x01F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetNextWeaponTapLabel_ReturnValue;        // 0x01F8(0x0018)()
	class FText                                   CallFunc_GetAttackConfirmLabel_ReturnValue;        // 0x0210(0x0018)()
	int32                                         CallFunc_Array_Add_ReturnValue12345678910111213;   // 0x0228(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue1234567891011121314; // 0x022C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortInputData*                         CallFunc_GetFortInputDataForBlueprint_ReturnValue123456789101112131415; // 0x0230(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortInputData*                         CallFunc_GetFortInputDataForBlueprint_ReturnValue12345678910111213141516; // 0x0238(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetGameMenuLabel_ReturnValue;             // 0x0240(0x0018)()
	class FText                                   CallFunc_GetToggleFullScreenMapLabel_ReturnValue;  // 0x0258(0x0018)()
	int32                                         CallFunc_Array_Add_ReturnValue123456789101112131415; // 0x0270(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue12345678910111213141516; // 0x0274(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortInputData*                         CallFunc_GetFortInputDataForBlueprint_ReturnValue1234567891011121314151617; // 0x0278(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortInputData*                         CallFunc_GetFortInputDataForBlueprint_ReturnValue123456789101112131415161718; // 0x0280(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetGadget2Label_ReturnValue;              // 0x0288(0x0018)()
	class FText                                   CallFunc_GetGadget2Label_ReturnValue1;             // 0x02A0(0x0018)()
	int32                                         CallFunc_Array_Add_ReturnValue1234567891011121314151617; // 0x02B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue123456789101112131415161718; // 0x02BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortInputData*                         CallFunc_GetFortInputDataForBlueprint_ReturnValue12345678910111213141516171819; // 0x02C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortInputData*                         CallFunc_GetFortInputDataForBlueprint_ReturnValue1234567891011121314151617181920; // 0x02C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetGadget1Label_ReturnValue;              // 0x02D0(0x0018)()
	class FText                                   CallFunc_GetGadget1Label_ReturnValue1;             // 0x02E8(0x0018)()
	int32                                         CallFunc_Array_Add_ReturnValue12345678910111213141516171819; // 0x0300(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue1234567891011121314151617181920; // 0x0304(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortInputData*                         CallFunc_GetFortInputDataForBlueprint_ReturnValue123456789101112131415161718192021; // 0x0308(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortInputData*                         CallFunc_GetFortInputDataForBlueprint_ReturnValue12345678910111213141516171819202122; // 0x0310(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetToggleInventoryLabel_ReturnValue;      // 0x0318(0x0018)()
	class FText                                   CallFunc_GetToggleInventoryLabel_ReturnValue1;     // 0x0330(0x0018)()
	int32                                         CallFunc_Array_Add_ReturnValue123456789101112131415161718192021; // 0x0348(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue12345678910111213141516171819202122; // 0x034C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortInputData*                         CallFunc_GetFortInputDataForBlueprint_ReturnValue1234567891011121314151617181920212223; // 0x0350(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortInputData*                         CallFunc_GetFortInputDataForBlueprint_ReturnValue123456789101112131415161718192021222324; // 0x0358(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetEmoteOrQuickChatLabel_ReturnValue;     // 0x0360(0x0018)()
	class FText                                   CallFunc_GetEmoteOrQuickChatLabel_ReturnValue1;    // 0x0378(0x0018)()
	int32                                         CallFunc_Array_Add_ReturnValue1234567891011121314151617181920212223; // 0x0390(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue123456789101112131415161718192021222324; // 0x0394(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortInputData*                         CallFunc_GetFortInputDataForBlueprint_ReturnValue12345678910111213141516171819202122232425; // 0x0398(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortInputData*                         CallFunc_GetFortInputDataForBlueprint_ReturnValue1234567891011121314151617181920212223242526; // 0x03A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetAutoSprintLabel_ReturnValue;           // 0x03A8(0x0018)()
	class FText                                   CallFunc_GetAutoSprintLabel_ReturnValue1;          // 0x03C0(0x0018)()
	int32                                         CallFunc_Array_Add_ReturnValue12345678910111213141516171819202122232425; // 0x03D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue1234567891011121314151617181920212223242526; // 0x03DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortInputData*                         CallFunc_GetFortInputDataForBlueprint_ReturnValue123456789101112131415161718192021222324252627; // 0x03E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortInputData*                         CallFunc_GetFortInputDataForBlueprint_ReturnValue12345678910111213141516171819202122232425262728; // 0x03E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetSprintLabel_ReturnValue;               // 0x03F0(0x0018)()
	class FText                                   CallFunc_GetSprintLabel_ReturnValue1;              // 0x0408(0x0018)()
	int32                                         CallFunc_Array_Add_ReturnValue123456789101112131415161718192021222324252627; // 0x0420(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue12345678910111213141516171819202122232425262728; // 0x0424(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortInputData*                         CallFunc_GetFortInputDataForBlueprint_ReturnValue1234567891011121314151617181920212223242526272829; // 0x0428(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortInputData*                         CallFunc_GetFortInputDataForBlueprint_ReturnValue123456789101112131415161718192021222324252627282930; // 0x0430(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetMoveLabel_ReturnValue;                 // 0x0438(0x0018)()
	class FText                                   CallFunc_GetMoveLabel_ReturnValue1;                // 0x0450(0x0018)()
	int32                                         CallFunc_Array_Add_ReturnValue1234567891011121314151617181920212223242526272829; // 0x0468(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue123456789101112131415161718192021222324252627282930; // 0x046C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortInputData*                         CallFunc_GetFortInputDataForBlueprint_ReturnValue12345678910111213141516171819202122232425262728293031; // 0x0470(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortInputData*                         CallFunc_GetFortInputDataForBlueprint_ReturnValue1234567891011121314151617181920212223242526272829303132; // 0x0478(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetPreviousWeaponTapLabel_ReturnValue;    // 0x0480(0x0018)()
	class FText                                   CallFunc_GetAimDownSightsHeavyMeleeLabel_ReturnValue; // 0x0498(0x0018)()
	int32                                         CallFunc_Array_Add_ReturnValue12345678910111213141516171819202122232425262728293031; // 0x04B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue1234567891011121314151617181920212223242526272829303132; // 0x04B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_MakeLiteralText_ReturnValue;              // 0x04B8(0x0018)()
	class FText                                   Temp_text_Variable;                                // 0x04D0(0x0018)(ConstParm)
	int32                                         CallFunc_Array_Add_ReturnValue123456789101112131415161718192021222324252627282930313233; // 0x04E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue12345678910111213141516171819202122232425262728293031323334; // 0x04EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   Temp_text_Variable1;                               // 0x04F0(0x0018)(ConstParm)
	int32                                         CallFunc_Array_Add_ReturnValue1234567891011121314151617181920212223242526272829303132333435; // 0x0508(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat) == 0x000008, "Wrong alignment on GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat");
static_assert(sizeof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat) == 0x000510, "Wrong size on GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, ButtonTextLabels) == 0x000000, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::ButtonTextLabels' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_GetFortInputDataForBlueprint_ReturnValue) == 0x000010, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_GetFortInputDataForBlueprint_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_GetAbility2Label_ReturnValue) == 0x000018, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_GetAbility2Label_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_GetFortInputDataForBlueprint_ReturnValue1) == 0x000030, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_GetFortInputDataForBlueprint_ReturnValue1' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_GetFortInputDataForBlueprint_ReturnValue12) == 0x000038, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_GetFortInputDataForBlueprint_ReturnValue12' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_GetAbility1Label_ReturnValue) == 0x000040, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_GetAbility1Label_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_GetAbility3Label_ReturnValue) == 0x000058, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_GetAbility3Label_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_Array_Add_ReturnValue) == 0x000070, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_Array_Add_ReturnValue1) == 0x000074, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_Array_Add_ReturnValue1' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_Array_Add_ReturnValue12) == 0x000078, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_Array_Add_ReturnValue12' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_GetFortInputDataForBlueprint_ReturnValue123) == 0x000080, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_GetFortInputDataForBlueprint_ReturnValue123' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_GetFortInputDataForBlueprint_ReturnValue1234) == 0x000088, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_GetFortInputDataForBlueprint_ReturnValue1234' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_GetRepairImproveSpotEnemyLabel_ReturnValue) == 0x000090, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_GetRepairImproveSpotEnemyLabel_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_GetLookLabel_ReturnValue) == 0x0000A8, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_GetLookLabel_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_Array_Add_ReturnValue123) == 0x0000C0, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_Array_Add_ReturnValue123' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_Array_Add_ReturnValue1234) == 0x0000C4, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_Array_Add_ReturnValue1234' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_GetFortInputDataForBlueprint_ReturnValue12345) == 0x0000C8, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_GetFortInputDataForBlueprint_ReturnValue12345' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_GetFortInputDataForBlueprint_ReturnValue123456) == 0x0000D0, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_GetFortInputDataForBlueprint_ReturnValue123456' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_GetJumpLabel_ReturnValue) == 0x0000D8, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_GetJumpLabel_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_GetEditBuildingPieceHoldLabel_ReturnValue) == 0x0000F0, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_GetEditBuildingPieceHoldLabel_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_Array_Add_ReturnValue12345) == 0x000108, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_Array_Add_ReturnValue12345' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_Array_Add_ReturnValue123456) == 0x00010C, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_Array_Add_ReturnValue123456' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_GetFortInputDataForBlueprint_ReturnValue1234567) == 0x000110, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_GetFortInputDataForBlueprint_ReturnValue1234567' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_GetFortInputDataForBlueprint_ReturnValue12345678) == 0x000118, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_GetFortInputDataForBlueprint_ReturnValue12345678' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_GetDeployHoverboardLabel_ReturnValue) == 0x000120, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_GetDeployHoverboardLabel_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_GetSwitchQuickbarLabel_ReturnValue) == 0x000138, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_GetSwitchQuickbarLabel_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_Array_Add_ReturnValue1234567) == 0x000150, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_Array_Add_ReturnValue1234567' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_Array_Add_ReturnValue12345678) == 0x000154, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_Array_Add_ReturnValue12345678' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_GetFortInputDataForBlueprint_ReturnValue123456789) == 0x000158, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_GetFortInputDataForBlueprint_ReturnValue123456789' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_GetFortInputDataForBlueprint_ReturnValue12345678910) == 0x000160, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_GetFortInputDataForBlueprint_ReturnValue12345678910' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_GetCraftAmmoHoldLabel_ReturnValue) == 0x000168, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_GetCraftAmmoHoldLabel_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_GetInteractTapHoldLabel_ReturnValue) == 0x000180, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_GetInteractTapHoldLabel_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_Array_Add_ReturnValue123456789) == 0x000198, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_Array_Add_ReturnValue123456789' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_Array_Add_ReturnValue12345678910) == 0x00019C, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_Array_Add_ReturnValue12345678910' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_GetFortInputDataForBlueprint_ReturnValue1234567891011) == 0x0001A0, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_GetFortInputDataForBlueprint_ReturnValue1234567891011' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_GetFortInputDataForBlueprint_ReturnValue123456789101112) == 0x0001A8, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_GetFortInputDataForBlueprint_ReturnValue123456789101112' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_GetReloadTapLabel_ReturnValue) == 0x0001B0, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_GetReloadTapLabel_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_GetHarvestWeaponLabel_ReturnValue) == 0x0001C8, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_GetHarvestWeaponLabel_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_Array_Add_ReturnValue1234567891011) == 0x0001E0, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_Array_Add_ReturnValue1234567891011' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_Array_Add_ReturnValue123456789101112) == 0x0001E4, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_Array_Add_ReturnValue123456789101112' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_GetFortInputDataForBlueprint_ReturnValue12345678910111213) == 0x0001E8, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_GetFortInputDataForBlueprint_ReturnValue12345678910111213' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_GetFortInputDataForBlueprint_ReturnValue1234567891011121314) == 0x0001F0, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_GetFortInputDataForBlueprint_ReturnValue1234567891011121314' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_GetNextWeaponTapLabel_ReturnValue) == 0x0001F8, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_GetNextWeaponTapLabel_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_GetAttackConfirmLabel_ReturnValue) == 0x000210, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_GetAttackConfirmLabel_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_Array_Add_ReturnValue12345678910111213) == 0x000228, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_Array_Add_ReturnValue12345678910111213' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_Array_Add_ReturnValue1234567891011121314) == 0x00022C, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_Array_Add_ReturnValue1234567891011121314' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_GetFortInputDataForBlueprint_ReturnValue123456789101112131415) == 0x000230, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_GetFortInputDataForBlueprint_ReturnValue123456789101112131415' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_GetFortInputDataForBlueprint_ReturnValue12345678910111213141516) == 0x000238, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_GetFortInputDataForBlueprint_ReturnValue12345678910111213141516' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_GetGameMenuLabel_ReturnValue) == 0x000240, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_GetGameMenuLabel_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_GetToggleFullScreenMapLabel_ReturnValue) == 0x000258, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_GetToggleFullScreenMapLabel_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_Array_Add_ReturnValue123456789101112131415) == 0x000270, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_Array_Add_ReturnValue123456789101112131415' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_Array_Add_ReturnValue12345678910111213141516) == 0x000274, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_Array_Add_ReturnValue12345678910111213141516' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_GetFortInputDataForBlueprint_ReturnValue1234567891011121314151617) == 0x000278, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_GetFortInputDataForBlueprint_ReturnValue1234567891011121314151617' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_GetFortInputDataForBlueprint_ReturnValue123456789101112131415161718) == 0x000280, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_GetFortInputDataForBlueprint_ReturnValue123456789101112131415161718' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_GetGadget2Label_ReturnValue) == 0x000288, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_GetGadget2Label_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_GetGadget2Label_ReturnValue1) == 0x0002A0, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_GetGadget2Label_ReturnValue1' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_Array_Add_ReturnValue1234567891011121314151617) == 0x0002B8, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_Array_Add_ReturnValue1234567891011121314151617' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_Array_Add_ReturnValue123456789101112131415161718) == 0x0002BC, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_Array_Add_ReturnValue123456789101112131415161718' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_GetFortInputDataForBlueprint_ReturnValue12345678910111213141516171819) == 0x0002C0, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_GetFortInputDataForBlueprint_ReturnValue12345678910111213141516171819' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_GetFortInputDataForBlueprint_ReturnValue1234567891011121314151617181920) == 0x0002C8, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_GetFortInputDataForBlueprint_ReturnValue1234567891011121314151617181920' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_GetGadget1Label_ReturnValue) == 0x0002D0, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_GetGadget1Label_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_GetGadget1Label_ReturnValue1) == 0x0002E8, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_GetGadget1Label_ReturnValue1' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_Array_Add_ReturnValue12345678910111213141516171819) == 0x000300, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_Array_Add_ReturnValue12345678910111213141516171819' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_Array_Add_ReturnValue1234567891011121314151617181920) == 0x000304, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_Array_Add_ReturnValue1234567891011121314151617181920' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_GetFortInputDataForBlueprint_ReturnValue123456789101112131415161718192021) == 0x000308, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_GetFortInputDataForBlueprint_ReturnValue123456789101112131415161718192021' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_GetFortInputDataForBlueprint_ReturnValue12345678910111213141516171819202122) == 0x000310, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_GetFortInputDataForBlueprint_ReturnValue12345678910111213141516171819202122' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_GetToggleInventoryLabel_ReturnValue) == 0x000318, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_GetToggleInventoryLabel_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_GetToggleInventoryLabel_ReturnValue1) == 0x000330, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_GetToggleInventoryLabel_ReturnValue1' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_Array_Add_ReturnValue123456789101112131415161718192021) == 0x000348, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_Array_Add_ReturnValue123456789101112131415161718192021' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_Array_Add_ReturnValue12345678910111213141516171819202122) == 0x00034C, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_Array_Add_ReturnValue12345678910111213141516171819202122' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_GetFortInputDataForBlueprint_ReturnValue1234567891011121314151617181920212223) == 0x000350, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_GetFortInputDataForBlueprint_ReturnValue1234567891011121314151617181920212223' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_GetFortInputDataForBlueprint_ReturnValue123456789101112131415161718192021222324) == 0x000358, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_GetFortInputDataForBlueprint_ReturnValue123456789101112131415161718192021222324' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_GetEmoteOrQuickChatLabel_ReturnValue) == 0x000360, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_GetEmoteOrQuickChatLabel_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_GetEmoteOrQuickChatLabel_ReturnValue1) == 0x000378, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_GetEmoteOrQuickChatLabel_ReturnValue1' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_Array_Add_ReturnValue1234567891011121314151617181920212223) == 0x000390, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_Array_Add_ReturnValue1234567891011121314151617181920212223' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_Array_Add_ReturnValue123456789101112131415161718192021222324) == 0x000394, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_Array_Add_ReturnValue123456789101112131415161718192021222324' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_GetFortInputDataForBlueprint_ReturnValue12345678910111213141516171819202122232425) == 0x000398, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_GetFortInputDataForBlueprint_ReturnValue12345678910111213141516171819202122232425' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_GetFortInputDataForBlueprint_ReturnValue1234567891011121314151617181920212223242526) == 0x0003A0, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_GetFortInputDataForBlueprint_ReturnValue1234567891011121314151617181920212223242526' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_GetAutoSprintLabel_ReturnValue) == 0x0003A8, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_GetAutoSprintLabel_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_GetAutoSprintLabel_ReturnValue1) == 0x0003C0, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_GetAutoSprintLabel_ReturnValue1' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_Array_Add_ReturnValue12345678910111213141516171819202122232425) == 0x0003D8, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_Array_Add_ReturnValue12345678910111213141516171819202122232425' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_Array_Add_ReturnValue1234567891011121314151617181920212223242526) == 0x0003DC, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_Array_Add_ReturnValue1234567891011121314151617181920212223242526' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_GetFortInputDataForBlueprint_ReturnValue123456789101112131415161718192021222324252627) == 0x0003E0, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_GetFortInputDataForBlueprint_ReturnValue123456789101112131415161718192021222324252627' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_GetFortInputDataForBlueprint_ReturnValue12345678910111213141516171819202122232425262728) == 0x0003E8, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_GetFortInputDataForBlueprint_ReturnValue12345678910111213141516171819202122232425262728' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_GetSprintLabel_ReturnValue) == 0x0003F0, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_GetSprintLabel_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_GetSprintLabel_ReturnValue1) == 0x000408, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_GetSprintLabel_ReturnValue1' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_Array_Add_ReturnValue123456789101112131415161718192021222324252627) == 0x000420, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_Array_Add_ReturnValue123456789101112131415161718192021222324252627' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_Array_Add_ReturnValue12345678910111213141516171819202122232425262728) == 0x000424, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_Array_Add_ReturnValue12345678910111213141516171819202122232425262728' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_GetFortInputDataForBlueprint_ReturnValue1234567891011121314151617181920212223242526272829) == 0x000428, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_GetFortInputDataForBlueprint_ReturnValue1234567891011121314151617181920212223242526272829' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_GetFortInputDataForBlueprint_ReturnValue123456789101112131415161718192021222324252627282930) == 0x000430, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_GetFortInputDataForBlueprint_ReturnValue123456789101112131415161718192021222324252627282930' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_GetMoveLabel_ReturnValue) == 0x000438, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_GetMoveLabel_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_GetMoveLabel_ReturnValue1) == 0x000450, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_GetMoveLabel_ReturnValue1' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_Array_Add_ReturnValue1234567891011121314151617181920212223242526272829) == 0x000468, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_Array_Add_ReturnValue1234567891011121314151617181920212223242526272829' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_Array_Add_ReturnValue123456789101112131415161718192021222324252627282930) == 0x00046C, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_Array_Add_ReturnValue123456789101112131415161718192021222324252627282930' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_GetFortInputDataForBlueprint_ReturnValue12345678910111213141516171819202122232425262728293031) == 0x000470, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_GetFortInputDataForBlueprint_ReturnValue12345678910111213141516171819202122232425262728293031' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_GetFortInputDataForBlueprint_ReturnValue1234567891011121314151617181920212223242526272829303132) == 0x000478, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_GetFortInputDataForBlueprint_ReturnValue1234567891011121314151617181920212223242526272829303132' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_GetPreviousWeaponTapLabel_ReturnValue) == 0x000480, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_GetPreviousWeaponTapLabel_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_GetAimDownSightsHeavyMeleeLabel_ReturnValue) == 0x000498, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_GetAimDownSightsHeavyMeleeLabel_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_Array_Add_ReturnValue12345678910111213141516171819202122232425262728293031) == 0x0004B0, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_Array_Add_ReturnValue12345678910111213141516171819202122232425262728293031' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_Array_Add_ReturnValue1234567891011121314151617181920212223242526272829303132) == 0x0004B4, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_Array_Add_ReturnValue1234567891011121314151617181920212223242526272829303132' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_MakeLiteralText_ReturnValue) == 0x0004B8, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_MakeLiteralText_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, Temp_text_Variable) == 0x0004D0, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_Array_Add_ReturnValue123456789101112131415161718192021222324252627282930313233) == 0x0004E8, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_Array_Add_ReturnValue123456789101112131415161718192021222324252627282930313233' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_Array_Add_ReturnValue12345678910111213141516171819202122232425262728293031323334) == 0x0004EC, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_Array_Add_ReturnValue12345678910111213141516171819202122232425262728293031323334' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, Temp_text_Variable1) == 0x0004F0, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::Temp_text_Variable1' has a wrong offset!");
static_assert(offsetof(GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat, CallFunc_Array_Add_ReturnValue1234567891011121314151617181920212223242526272829303132333435) == 0x000508, "Member 'GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat::CallFunc_Array_Add_ReturnValue1234567891011121314151617181920212223242526272829303132333435' has a wrong offset!");

// Function GamepadMappingInfo.GamepadMappingInfo_C.ClearAllComboTextLines
// 0x0018 (0x0018 - 0x0000)
struct GamepadMappingInfo_C_ClearAllComboTextLines final
{
public:
	class FText                                   CallFunc_MakeLiteralText_ReturnValue;              // 0x0000(0x0018)()
};
static_assert(alignof(GamepadMappingInfo_C_ClearAllComboTextLines) == 0x000008, "Wrong alignment on GamepadMappingInfo_C_ClearAllComboTextLines");
static_assert(sizeof(GamepadMappingInfo_C_ClearAllComboTextLines) == 0x000018, "Wrong size on GamepadMappingInfo_C_ClearAllComboTextLines");
static_assert(offsetof(GamepadMappingInfo_C_ClearAllComboTextLines, CallFunc_MakeLiteralText_ReturnValue) == 0x000000, "Member 'GamepadMappingInfo_C_ClearAllComboTextLines::CallFunc_MakeLiteralText_ReturnValue' has a wrong offset!");

}

