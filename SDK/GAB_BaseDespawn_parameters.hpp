#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GAB_BaseDespawn

#include "Basic.hpp"

#include "GameplayAbilities_structs.hpp"


namespace SDK::Params
{

// Function GAB_BaseDespawn.GAB_BaseDespawn_C.ExecuteUbergraph_GAB_BaseDespawn
// 0x00D0 (0x00D0 - 0x0000)
struct GAB_BaseDespawn_C_ExecuteUbergraph_GAB_BaseDespawn final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEventData                     K2Node_Event_EventData;                            // 0x0008(0x00A8)(ConstParm)
	bool                                          CallFunc_K2_CommitAbility_ReturnValue;             // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortAIPawn*                            K2Node_DynamicCast_AsFort_AIPawn;                  // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            CallFunc_GetController_ReturnValue;                // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GAB_BaseDespawn_C_ExecuteUbergraph_GAB_BaseDespawn) == 0x000008, "Wrong alignment on GAB_BaseDespawn_C_ExecuteUbergraph_GAB_BaseDespawn");
static_assert(sizeof(GAB_BaseDespawn_C_ExecuteUbergraph_GAB_BaseDespawn) == 0x0000D0, "Wrong size on GAB_BaseDespawn_C_ExecuteUbergraph_GAB_BaseDespawn");
static_assert(offsetof(GAB_BaseDespawn_C_ExecuteUbergraph_GAB_BaseDespawn, EntryPoint) == 0x000000, "Member 'GAB_BaseDespawn_C_ExecuteUbergraph_GAB_BaseDespawn::EntryPoint' has a wrong offset!");
static_assert(offsetof(GAB_BaseDespawn_C_ExecuteUbergraph_GAB_BaseDespawn, K2Node_Event_EventData) == 0x000008, "Member 'GAB_BaseDespawn_C_ExecuteUbergraph_GAB_BaseDespawn::K2Node_Event_EventData' has a wrong offset!");
static_assert(offsetof(GAB_BaseDespawn_C_ExecuteUbergraph_GAB_BaseDespawn, CallFunc_K2_CommitAbility_ReturnValue) == 0x0000B0, "Member 'GAB_BaseDespawn_C_ExecuteUbergraph_GAB_BaseDespawn::CallFunc_K2_CommitAbility_ReturnValue' has a wrong offset!");
static_assert(offsetof(GAB_BaseDespawn_C_ExecuteUbergraph_GAB_BaseDespawn, K2Node_DynamicCast_AsFort_AIPawn) == 0x0000B8, "Member 'GAB_BaseDespawn_C_ExecuteUbergraph_GAB_BaseDespawn::K2Node_DynamicCast_AsFort_AIPawn' has a wrong offset!");
static_assert(offsetof(GAB_BaseDespawn_C_ExecuteUbergraph_GAB_BaseDespawn, K2Node_DynamicCast_bSuccess) == 0x0000C0, "Member 'GAB_BaseDespawn_C_ExecuteUbergraph_GAB_BaseDespawn::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GAB_BaseDespawn_C_ExecuteUbergraph_GAB_BaseDespawn, CallFunc_GetController_ReturnValue) == 0x0000C8, "Member 'GAB_BaseDespawn_C_ExecuteUbergraph_GAB_BaseDespawn::CallFunc_GetController_ReturnValue' has a wrong offset!");

// Function GAB_BaseDespawn.GAB_BaseDespawn_C.K2_ActivateAbilityFromEvent
// 0x00A8 (0x00A8 - 0x0000)
struct GAB_BaseDespawn_C_K2_ActivateAbilityFromEvent final
{
public:
	struct FGameplayEventData                     EventData;                                         // 0x0000(0x00A8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(GAB_BaseDespawn_C_K2_ActivateAbilityFromEvent) == 0x000008, "Wrong alignment on GAB_BaseDespawn_C_K2_ActivateAbilityFromEvent");
static_assert(sizeof(GAB_BaseDespawn_C_K2_ActivateAbilityFromEvent) == 0x0000A8, "Wrong size on GAB_BaseDespawn_C_K2_ActivateAbilityFromEvent");
static_assert(offsetof(GAB_BaseDespawn_C_K2_ActivateAbilityFromEvent, EventData) == 0x000000, "Member 'GAB_BaseDespawn_C_K2_ActivateAbilityFromEvent::EventData' has a wrong offset!");

}

