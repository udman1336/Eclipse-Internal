#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: InterfaceAIStates

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function InterfaceAIStates.InterfaceAIStates_C.MantleStart
// 0x0028 (0x0028 - 0x0000)
struct InterfaceAIStates_C_MantleStart final
{
public:
	struct FVector                                StartPos;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MidPos;                                            // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                EndPos;                                            // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LowWall;                                           // 0x0024(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          MidWall;                                           // 0x0025(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          FullWall;                                          // 0x0026(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          WindowWall;                                        // 0x0027(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(InterfaceAIStates_C_MantleStart) == 0x000004, "Wrong alignment on InterfaceAIStates_C_MantleStart");
static_assert(sizeof(InterfaceAIStates_C_MantleStart) == 0x000028, "Wrong size on InterfaceAIStates_C_MantleStart");
static_assert(offsetof(InterfaceAIStates_C_MantleStart, StartPos) == 0x000000, "Member 'InterfaceAIStates_C_MantleStart::StartPos' has a wrong offset!");
static_assert(offsetof(InterfaceAIStates_C_MantleStart, MidPos) == 0x00000C, "Member 'InterfaceAIStates_C_MantleStart::MidPos' has a wrong offset!");
static_assert(offsetof(InterfaceAIStates_C_MantleStart, EndPos) == 0x000018, "Member 'InterfaceAIStates_C_MantleStart::EndPos' has a wrong offset!");
static_assert(offsetof(InterfaceAIStates_C_MantleStart, LowWall) == 0x000024, "Member 'InterfaceAIStates_C_MantleStart::LowWall' has a wrong offset!");
static_assert(offsetof(InterfaceAIStates_C_MantleStart, MidWall) == 0x000025, "Member 'InterfaceAIStates_C_MantleStart::MidWall' has a wrong offset!");
static_assert(offsetof(InterfaceAIStates_C_MantleStart, FullWall) == 0x000026, "Member 'InterfaceAIStates_C_MantleStart::FullWall' has a wrong offset!");
static_assert(offsetof(InterfaceAIStates_C_MantleStart, WindowWall) == 0x000027, "Member 'InterfaceAIStates_C_MantleStart::WindowWall' has a wrong offset!");

// Function InterfaceAIStates.InterfaceAIStates_C.VerifyTakerAttack
// 0x0004 (0x0004 - 0x0000)
struct InterfaceAIStates_C_VerifyTakerAttack final
{
public:
	bool                                          SpecialAttack;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Swoop;                                             // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Soul_Suck;                                         // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Portal;                                            // 0x0003(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(InterfaceAIStates_C_VerifyTakerAttack) == 0x000001, "Wrong alignment on InterfaceAIStates_C_VerifyTakerAttack");
static_assert(sizeof(InterfaceAIStates_C_VerifyTakerAttack) == 0x000004, "Wrong size on InterfaceAIStates_C_VerifyTakerAttack");
static_assert(offsetof(InterfaceAIStates_C_VerifyTakerAttack, SpecialAttack) == 0x000000, "Member 'InterfaceAIStates_C_VerifyTakerAttack::SpecialAttack' has a wrong offset!");
static_assert(offsetof(InterfaceAIStates_C_VerifyTakerAttack, Swoop) == 0x000001, "Member 'InterfaceAIStates_C_VerifyTakerAttack::Swoop' has a wrong offset!");
static_assert(offsetof(InterfaceAIStates_C_VerifyTakerAttack, Soul_Suck) == 0x000002, "Member 'InterfaceAIStates_C_VerifyTakerAttack::Soul_Suck' has a wrong offset!");
static_assert(offsetof(InterfaceAIStates_C_VerifyTakerAttack, Portal) == 0x000003, "Member 'InterfaceAIStates_C_VerifyTakerAttack::Portal' has a wrong offset!");

// Function InterfaceAIStates.InterfaceAIStates_C.ResetTakerSpecialAttackTimer
// 0x0003 (0x0003 - 0x0000)
struct InterfaceAIStates_C_ResetTakerSpecialAttackTimer final
{
public:
	bool                                          Swoop;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          SoulSuckMelee;                                     // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Portal;                                            // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(InterfaceAIStates_C_ResetTakerSpecialAttackTimer) == 0x000001, "Wrong alignment on InterfaceAIStates_C_ResetTakerSpecialAttackTimer");
static_assert(sizeof(InterfaceAIStates_C_ResetTakerSpecialAttackTimer) == 0x000003, "Wrong size on InterfaceAIStates_C_ResetTakerSpecialAttackTimer");
static_assert(offsetof(InterfaceAIStates_C_ResetTakerSpecialAttackTimer, Swoop) == 0x000000, "Member 'InterfaceAIStates_C_ResetTakerSpecialAttackTimer::Swoop' has a wrong offset!");
static_assert(offsetof(InterfaceAIStates_C_ResetTakerSpecialAttackTimer, SoulSuckMelee) == 0x000001, "Member 'InterfaceAIStates_C_ResetTakerSpecialAttackTimer::SoulSuckMelee' has a wrong offset!");
static_assert(offsetof(InterfaceAIStates_C_ResetTakerSpecialAttackTimer, Portal) == 0x000002, "Member 'InterfaceAIStates_C_ResetTakerSpecialAttackTimer::Portal' has a wrong offset!");

// Function InterfaceAIStates.InterfaceAIStates_C.TakerWallPortalBehavior
// 0x0020 (0x0020 - 0x0000)
struct InterfaceAIStates_C_TakerWallPortalBehavior final
{
public:
	class AActor*                                 BuildingPart;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBTTask_BlueprintBase*                  Task;                                              // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DesiredMoveLocation;                               // 0x0010(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Debug;                                             // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(InterfaceAIStates_C_TakerWallPortalBehavior) == 0x000008, "Wrong alignment on InterfaceAIStates_C_TakerWallPortalBehavior");
static_assert(sizeof(InterfaceAIStates_C_TakerWallPortalBehavior) == 0x000020, "Wrong size on InterfaceAIStates_C_TakerWallPortalBehavior");
static_assert(offsetof(InterfaceAIStates_C_TakerWallPortalBehavior, BuildingPart) == 0x000000, "Member 'InterfaceAIStates_C_TakerWallPortalBehavior::BuildingPart' has a wrong offset!");
static_assert(offsetof(InterfaceAIStates_C_TakerWallPortalBehavior, Task) == 0x000008, "Member 'InterfaceAIStates_C_TakerWallPortalBehavior::Task' has a wrong offset!");
static_assert(offsetof(InterfaceAIStates_C_TakerWallPortalBehavior, DesiredMoveLocation) == 0x000010, "Member 'InterfaceAIStates_C_TakerWallPortalBehavior::DesiredMoveLocation' has a wrong offset!");
static_assert(offsetof(InterfaceAIStates_C_TakerWallPortalBehavior, Debug) == 0x00001C, "Member 'InterfaceAIStates_C_TakerWallPortalBehavior::Debug' has a wrong offset!");

// Function InterfaceAIStates.InterfaceAIStates_C.IsTakerWallPortalAvailable
// 0x0001 (0x0001 - 0x0000)
struct InterfaceAIStates_C_IsTakerWallPortalAvailable final
{
public:
	bool                                          Portal_Available_;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(InterfaceAIStates_C_IsTakerWallPortalAvailable) == 0x000001, "Wrong alignment on InterfaceAIStates_C_IsTakerWallPortalAvailable");
static_assert(sizeof(InterfaceAIStates_C_IsTakerWallPortalAvailable) == 0x000001, "Wrong size on InterfaceAIStates_C_IsTakerWallPortalAvailable");
static_assert(offsetof(InterfaceAIStates_C_IsTakerWallPortalAvailable, Portal_Available_) == 0x000000, "Member 'InterfaceAIStates_C_IsTakerWallPortalAvailable::Portal_Available_' has a wrong offset!");

// Function InterfaceAIStates.InterfaceAIStates_C.TakerAttackFSM
// 0x0001 (0x0001 - 0x0000)
struct InterfaceAIStates_C_TakerAttackFSM final
{
public:
	bool                                          SuccessfulHit;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(InterfaceAIStates_C_TakerAttackFSM) == 0x000001, "Wrong alignment on InterfaceAIStates_C_TakerAttackFSM");
static_assert(sizeof(InterfaceAIStates_C_TakerAttackFSM) == 0x000001, "Wrong size on InterfaceAIStates_C_TakerAttackFSM");
static_assert(offsetof(InterfaceAIStates_C_TakerAttackFSM, SuccessfulHit) == 0x000000, "Member 'InterfaceAIStates_C_TakerAttackFSM::SuccessfulHit' has a wrong offset!");

// Function InterfaceAIStates.InterfaceAIStates_C.TakerSoulSuckSoundBegin
// 0x0001 (0x0001 - 0x0000)
struct InterfaceAIStates_C_TakerSoulSuckSoundBegin final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(InterfaceAIStates_C_TakerSoulSuckSoundBegin) == 0x000001, "Wrong alignment on InterfaceAIStates_C_TakerSoulSuckSoundBegin");
static_assert(sizeof(InterfaceAIStates_C_TakerSoulSuckSoundBegin) == 0x000001, "Wrong size on InterfaceAIStates_C_TakerSoulSuckSoundBegin");
static_assert(offsetof(InterfaceAIStates_C_TakerSoulSuckSoundBegin, Success) == 0x000000, "Member 'InterfaceAIStates_C_TakerSoulSuckSoundBegin::Success' has a wrong offset!");

// Function InterfaceAIStates.InterfaceAIStates_C.PortalAdd
// 0x0018 (0x0018 - 0x0000)
struct InterfaceAIStates_C_PortalAdd final
{
public:
	class ABuildingActor*                         BuildingActor;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABuildingActor*>                 BuildingActorList;                                 // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
};
static_assert(alignof(InterfaceAIStates_C_PortalAdd) == 0x000008, "Wrong alignment on InterfaceAIStates_C_PortalAdd");
static_assert(sizeof(InterfaceAIStates_C_PortalAdd) == 0x000018, "Wrong size on InterfaceAIStates_C_PortalAdd");
static_assert(offsetof(InterfaceAIStates_C_PortalAdd, BuildingActor) == 0x000000, "Member 'InterfaceAIStates_C_PortalAdd::BuildingActor' has a wrong offset!");
static_assert(offsetof(InterfaceAIStates_C_PortalAdd, BuildingActorList) == 0x000008, "Member 'InterfaceAIStates_C_PortalAdd::BuildingActorList' has a wrong offset!");

// Function InterfaceAIStates.InterfaceAIStates_C.PortalGet
// 0x0020 (0x0020 - 0x0000)
struct InterfaceAIStates_C_PortalGet final
{
public:
	class ABuildingActor*                         BuildingActor;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABuildingActor*>                 BuildingActorList;                                 // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	class AActor*                                 BT;                                                // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(InterfaceAIStates_C_PortalGet) == 0x000008, "Wrong alignment on InterfaceAIStates_C_PortalGet");
static_assert(sizeof(InterfaceAIStates_C_PortalGet) == 0x000020, "Wrong size on InterfaceAIStates_C_PortalGet");
static_assert(offsetof(InterfaceAIStates_C_PortalGet, BuildingActor) == 0x000000, "Member 'InterfaceAIStates_C_PortalGet::BuildingActor' has a wrong offset!");
static_assert(offsetof(InterfaceAIStates_C_PortalGet, BuildingActorList) == 0x000008, "Member 'InterfaceAIStates_C_PortalGet::BuildingActorList' has a wrong offset!");
static_assert(offsetof(InterfaceAIStates_C_PortalGet, BT) == 0x000018, "Member 'InterfaceAIStates_C_PortalGet::BT' has a wrong offset!");

// Function InterfaceAIStates.InterfaceAIStates_C.PortalCollision
// 0x0001 (0x0001 - 0x0000)
struct InterfaceAIStates_C_PortalCollision final
{
public:
	bool                                          Collide_;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(InterfaceAIStates_C_PortalCollision) == 0x000001, "Wrong alignment on InterfaceAIStates_C_PortalCollision");
static_assert(sizeof(InterfaceAIStates_C_PortalCollision) == 0x000001, "Wrong size on InterfaceAIStates_C_PortalCollision");
static_assert(offsetof(InterfaceAIStates_C_PortalCollision, Collide_) == 0x000000, "Member 'InterfaceAIStates_C_PortalCollision::Collide_' has a wrong offset!");

}

