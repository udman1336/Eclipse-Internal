#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: QuantitySelector

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "CommonInput_structs.hpp"


namespace SDK::Params
{

// Function QuantitySelector.QuantitySelector_C.ExecuteUbergraph_QuantitySelector
// 0x0080 (0x0080 - 0x0000)
struct QuantitySelector_C_ExecuteUbergraph_QuantitySelector final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonUIContext*                       CallFunc_GetContext_ReturnValue;                   // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCommonButton*                          K2Node_ComponentBoundEvent_Button1;                // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_ComponentBoundEvent_Value;                  // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonButton*                          K2Node_ComponentBoundEvent_Button;                 // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HandleMaxPressed_PassThrough;             // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HandleTransferPressed_PassThrough;        // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HandleCancelPressed_PassThrough;          // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B[0x5];                                       // 0x002B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonButton*                          K2Node_ComponentBoundEvent_Button12;               // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bUsingGamepad;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Round_ReturnValue;                        // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue1;           // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCommonInputContext*                    CallFunc_GetContext_ReturnValue1;                  // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Round_ReturnValue1;                       // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECommonInputType                              CallFunc_GetCurrentInputType_ReturnValue;          // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5E[0x2];                                       // 0x005E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonUIContext*                       CallFunc_GetContext_ReturnValue12;                 // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsBROnly_ReturnValue;                     // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(bool bUsingGamepad)>           K2Node_CreateDelegate_OutputDelegate;              // 0x0070(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(QuantitySelector_C_ExecuteUbergraph_QuantitySelector) == 0x000008, "Wrong alignment on QuantitySelector_C_ExecuteUbergraph_QuantitySelector");
static_assert(sizeof(QuantitySelector_C_ExecuteUbergraph_QuantitySelector) == 0x000080, "Wrong size on QuantitySelector_C_ExecuteUbergraph_QuantitySelector");
static_assert(offsetof(QuantitySelector_C_ExecuteUbergraph_QuantitySelector, EntryPoint) == 0x000000, "Member 'QuantitySelector_C_ExecuteUbergraph_QuantitySelector::EntryPoint' has a wrong offset!");
static_assert(offsetof(QuantitySelector_C_ExecuteUbergraph_QuantitySelector, CallFunc_GetContext_ReturnValue) == 0x000008, "Member 'QuantitySelector_C_ExecuteUbergraph_QuantitySelector::CallFunc_GetContext_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuantitySelector_C_ExecuteUbergraph_QuantitySelector, K2Node_ComponentBoundEvent_Button1) == 0x000010, "Member 'QuantitySelector_C_ExecuteUbergraph_QuantitySelector::K2Node_ComponentBoundEvent_Button1' has a wrong offset!");
static_assert(offsetof(QuantitySelector_C_ExecuteUbergraph_QuantitySelector, K2Node_ComponentBoundEvent_Value) == 0x000018, "Member 'QuantitySelector_C_ExecuteUbergraph_QuantitySelector::K2Node_ComponentBoundEvent_Value' has a wrong offset!");
static_assert(offsetof(QuantitySelector_C_ExecuteUbergraph_QuantitySelector, K2Node_ComponentBoundEvent_Button) == 0x000020, "Member 'QuantitySelector_C_ExecuteUbergraph_QuantitySelector::K2Node_ComponentBoundEvent_Button' has a wrong offset!");
static_assert(offsetof(QuantitySelector_C_ExecuteUbergraph_QuantitySelector, CallFunc_HandleMaxPressed_PassThrough) == 0x000028, "Member 'QuantitySelector_C_ExecuteUbergraph_QuantitySelector::CallFunc_HandleMaxPressed_PassThrough' has a wrong offset!");
static_assert(offsetof(QuantitySelector_C_ExecuteUbergraph_QuantitySelector, CallFunc_HandleTransferPressed_PassThrough) == 0x000029, "Member 'QuantitySelector_C_ExecuteUbergraph_QuantitySelector::CallFunc_HandleTransferPressed_PassThrough' has a wrong offset!");
static_assert(offsetof(QuantitySelector_C_ExecuteUbergraph_QuantitySelector, CallFunc_HandleCancelPressed_PassThrough) == 0x00002A, "Member 'QuantitySelector_C_ExecuteUbergraph_QuantitySelector::CallFunc_HandleCancelPressed_PassThrough' has a wrong offset!");
static_assert(offsetof(QuantitySelector_C_ExecuteUbergraph_QuantitySelector, K2Node_ComponentBoundEvent_Button12) == 0x000030, "Member 'QuantitySelector_C_ExecuteUbergraph_QuantitySelector::K2Node_ComponentBoundEvent_Button12' has a wrong offset!");
static_assert(offsetof(QuantitySelector_C_ExecuteUbergraph_QuantitySelector, K2Node_CustomEvent_bUsingGamepad) == 0x000038, "Member 'QuantitySelector_C_ExecuteUbergraph_QuantitySelector::K2Node_CustomEvent_bUsingGamepad' has a wrong offset!");
static_assert(offsetof(QuantitySelector_C_ExecuteUbergraph_QuantitySelector, CallFunc_Subtract_IntInt_ReturnValue) == 0x00003C, "Member 'QuantitySelector_C_ExecuteUbergraph_QuantitySelector::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuantitySelector_C_ExecuteUbergraph_QuantitySelector, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000040, "Member 'QuantitySelector_C_ExecuteUbergraph_QuantitySelector::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuantitySelector_C_ExecuteUbergraph_QuantitySelector, CallFunc_Round_ReturnValue) == 0x000044, "Member 'QuantitySelector_C_ExecuteUbergraph_QuantitySelector::CallFunc_Round_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuantitySelector_C_ExecuteUbergraph_QuantitySelector, CallFunc_Add_IntInt_ReturnValue) == 0x000048, "Member 'QuantitySelector_C_ExecuteUbergraph_QuantitySelector::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuantitySelector_C_ExecuteUbergraph_QuantitySelector, CallFunc_Multiply_IntFloat_ReturnValue1) == 0x00004C, "Member 'QuantitySelector_C_ExecuteUbergraph_QuantitySelector::CallFunc_Multiply_IntFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(QuantitySelector_C_ExecuteUbergraph_QuantitySelector, CallFunc_GetContext_ReturnValue1) == 0x000050, "Member 'QuantitySelector_C_ExecuteUbergraph_QuantitySelector::CallFunc_GetContext_ReturnValue1' has a wrong offset!");
static_assert(offsetof(QuantitySelector_C_ExecuteUbergraph_QuantitySelector, CallFunc_Round_ReturnValue1) == 0x000058, "Member 'QuantitySelector_C_ExecuteUbergraph_QuantitySelector::CallFunc_Round_ReturnValue1' has a wrong offset!");
static_assert(offsetof(QuantitySelector_C_ExecuteUbergraph_QuantitySelector, CallFunc_GetCurrentInputType_ReturnValue) == 0x00005C, "Member 'QuantitySelector_C_ExecuteUbergraph_QuantitySelector::CallFunc_GetCurrentInputType_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuantitySelector_C_ExecuteUbergraph_QuantitySelector, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00005D, "Member 'QuantitySelector_C_ExecuteUbergraph_QuantitySelector::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuantitySelector_C_ExecuteUbergraph_QuantitySelector, CallFunc_GetContext_ReturnValue12) == 0x000060, "Member 'QuantitySelector_C_ExecuteUbergraph_QuantitySelector::CallFunc_GetContext_ReturnValue12' has a wrong offset!");
static_assert(offsetof(QuantitySelector_C_ExecuteUbergraph_QuantitySelector, CallFunc_IsBROnly_ReturnValue) == 0x000068, "Member 'QuantitySelector_C_ExecuteUbergraph_QuantitySelector::CallFunc_IsBROnly_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuantitySelector_C_ExecuteUbergraph_QuantitySelector, K2Node_CreateDelegate_OutputDelegate) == 0x000070, "Member 'QuantitySelector_C_ExecuteUbergraph_QuantitySelector::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");

// Function QuantitySelector.QuantitySelector_C.HandleChangeInputMode
// 0x0001 (0x0001 - 0x0000)
struct QuantitySelector_C_HandleChangeInputMode final
{
public:
	bool                                          bUsingGamepad;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(QuantitySelector_C_HandleChangeInputMode) == 0x000001, "Wrong alignment on QuantitySelector_C_HandleChangeInputMode");
static_assert(sizeof(QuantitySelector_C_HandleChangeInputMode) == 0x000001, "Wrong size on QuantitySelector_C_HandleChangeInputMode");
static_assert(offsetof(QuantitySelector_C_HandleChangeInputMode, bUsingGamepad) == 0x000000, "Member 'QuantitySelector_C_HandleChangeInputMode::bUsingGamepad' has a wrong offset!");

// Function QuantitySelector.QuantitySelector_C.BndEvt__MaxButton_K2Node_ComponentBoundEvent_343_CommonButtonClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct QuantitySelector_C_BndEvt__MaxButton_K2Node_ComponentBoundEvent_343_CommonButtonClicked__DelegateSignature final
{
public:
	class UCommonButton*                          Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(QuantitySelector_C_BndEvt__MaxButton_K2Node_ComponentBoundEvent_343_CommonButtonClicked__DelegateSignature) == 0x000008, "Wrong alignment on QuantitySelector_C_BndEvt__MaxButton_K2Node_ComponentBoundEvent_343_CommonButtonClicked__DelegateSignature");
static_assert(sizeof(QuantitySelector_C_BndEvt__MaxButton_K2Node_ComponentBoundEvent_343_CommonButtonClicked__DelegateSignature) == 0x000008, "Wrong size on QuantitySelector_C_BndEvt__MaxButton_K2Node_ComponentBoundEvent_343_CommonButtonClicked__DelegateSignature");
static_assert(offsetof(QuantitySelector_C_BndEvt__MaxButton_K2Node_ComponentBoundEvent_343_CommonButtonClicked__DelegateSignature, Button) == 0x000000, "Member 'QuantitySelector_C_BndEvt__MaxButton_K2Node_ComponentBoundEvent_343_CommonButtonClicked__DelegateSignature::Button' has a wrong offset!");

// Function QuantitySelector.QuantitySelector_C.BndEvt__AnalogSlider_0_K2Node_ComponentBoundEvent_434_OnFloatValueChangedEvent__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct QuantitySelector_C_BndEvt__AnalogSlider_0_K2Node_ComponentBoundEvent_434_OnFloatValueChangedEvent__DelegateSignature final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(QuantitySelector_C_BndEvt__AnalogSlider_0_K2Node_ComponentBoundEvent_434_OnFloatValueChangedEvent__DelegateSignature) == 0x000004, "Wrong alignment on QuantitySelector_C_BndEvt__AnalogSlider_0_K2Node_ComponentBoundEvent_434_OnFloatValueChangedEvent__DelegateSignature");
static_assert(sizeof(QuantitySelector_C_BndEvt__AnalogSlider_0_K2Node_ComponentBoundEvent_434_OnFloatValueChangedEvent__DelegateSignature) == 0x000004, "Wrong size on QuantitySelector_C_BndEvt__AnalogSlider_0_K2Node_ComponentBoundEvent_434_OnFloatValueChangedEvent__DelegateSignature");
static_assert(offsetof(QuantitySelector_C_BndEvt__AnalogSlider_0_K2Node_ComponentBoundEvent_434_OnFloatValueChangedEvent__DelegateSignature, Value) == 0x000000, "Member 'QuantitySelector_C_BndEvt__AnalogSlider_0_K2Node_ComponentBoundEvent_434_OnFloatValueChangedEvent__DelegateSignature::Value' has a wrong offset!");

// Function QuantitySelector.QuantitySelector_C.BndEvt__ConfirmButton_K2Node_ComponentBoundEvent_166_CommonButtonClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct QuantitySelector_C_BndEvt__ConfirmButton_K2Node_ComponentBoundEvent_166_CommonButtonClicked__DelegateSignature final
{
public:
	class UCommonButton*                          Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(QuantitySelector_C_BndEvt__ConfirmButton_K2Node_ComponentBoundEvent_166_CommonButtonClicked__DelegateSignature) == 0x000008, "Wrong alignment on QuantitySelector_C_BndEvt__ConfirmButton_K2Node_ComponentBoundEvent_166_CommonButtonClicked__DelegateSignature");
static_assert(sizeof(QuantitySelector_C_BndEvt__ConfirmButton_K2Node_ComponentBoundEvent_166_CommonButtonClicked__DelegateSignature) == 0x000008, "Wrong size on QuantitySelector_C_BndEvt__ConfirmButton_K2Node_ComponentBoundEvent_166_CommonButtonClicked__DelegateSignature");
static_assert(offsetof(QuantitySelector_C_BndEvt__ConfirmButton_K2Node_ComponentBoundEvent_166_CommonButtonClicked__DelegateSignature, Button) == 0x000000, "Member 'QuantitySelector_C_BndEvt__ConfirmButton_K2Node_ComponentBoundEvent_166_CommonButtonClicked__DelegateSignature::Button' has a wrong offset!");

// Function QuantitySelector.QuantitySelector_C.BndEvt__IconTextButton_K2Node_ComponentBoundEvent_86_CommonButtonClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct QuantitySelector_C_BndEvt__IconTextButton_K2Node_ComponentBoundEvent_86_CommonButtonClicked__DelegateSignature final
{
public:
	class UCommonButton*                          Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(QuantitySelector_C_BndEvt__IconTextButton_K2Node_ComponentBoundEvent_86_CommonButtonClicked__DelegateSignature) == 0x000008, "Wrong alignment on QuantitySelector_C_BndEvt__IconTextButton_K2Node_ComponentBoundEvent_86_CommonButtonClicked__DelegateSignature");
static_assert(sizeof(QuantitySelector_C_BndEvt__IconTextButton_K2Node_ComponentBoundEvent_86_CommonButtonClicked__DelegateSignature) == 0x000008, "Wrong size on QuantitySelector_C_BndEvt__IconTextButton_K2Node_ComponentBoundEvent_86_CommonButtonClicked__DelegateSignature");
static_assert(offsetof(QuantitySelector_C_BndEvt__IconTextButton_K2Node_ComponentBoundEvent_86_CommonButtonClicked__DelegateSignature, Button) == 0x000000, "Member 'QuantitySelector_C_BndEvt__IconTextButton_K2Node_ComponentBoundEvent_86_CommonButtonClicked__DelegateSignature::Button' has a wrong offset!");

// Function QuantitySelector.QuantitySelector_C.SetSplitData
// 0x0078 (0x0078 - 0x0000)
struct QuantitySelector_C_SetSplitData final
{
public:
	int32                                         StartingCount;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaximumCount;                                      // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortItem*                              Item_0;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   TitleText;                                         // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   ButtonText;                                        // 0x0028(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   AdditionalInfoText;                                // 0x0040(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue1;             // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue12;            // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue1;             // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue123;           // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(QuantitySelector_C_SetSplitData) == 0x000008, "Wrong alignment on QuantitySelector_C_SetSplitData");
static_assert(sizeof(QuantitySelector_C_SetSplitData) == 0x000078, "Wrong size on QuantitySelector_C_SetSplitData");
static_assert(offsetof(QuantitySelector_C_SetSplitData, StartingCount) == 0x000000, "Member 'QuantitySelector_C_SetSplitData::StartingCount' has a wrong offset!");
static_assert(offsetof(QuantitySelector_C_SetSplitData, MaximumCount) == 0x000004, "Member 'QuantitySelector_C_SetSplitData::MaximumCount' has a wrong offset!");
static_assert(offsetof(QuantitySelector_C_SetSplitData, Item_0) == 0x000008, "Member 'QuantitySelector_C_SetSplitData::Item_0' has a wrong offset!");
static_assert(offsetof(QuantitySelector_C_SetSplitData, TitleText) == 0x000010, "Member 'QuantitySelector_C_SetSplitData::TitleText' has a wrong offset!");
static_assert(offsetof(QuantitySelector_C_SetSplitData, ButtonText) == 0x000028, "Member 'QuantitySelector_C_SetSplitData::ButtonText' has a wrong offset!");
static_assert(offsetof(QuantitySelector_C_SetSplitData, AdditionalInfoText) == 0x000040, "Member 'QuantitySelector_C_SetSplitData::AdditionalInfoText' has a wrong offset!");
static_assert(offsetof(QuantitySelector_C_SetSplitData, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000058, "Member 'QuantitySelector_C_SetSplitData::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuantitySelector_C_SetSplitData, CallFunc_Conv_IntToFloat_ReturnValue1) == 0x00005C, "Member 'QuantitySelector_C_SetSplitData::CallFunc_Conv_IntToFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(QuantitySelector_C_SetSplitData, CallFunc_Subtract_IntInt_ReturnValue) == 0x000060, "Member 'QuantitySelector_C_SetSplitData::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuantitySelector_C_SetSplitData, CallFunc_Conv_IntToFloat_ReturnValue12) == 0x000064, "Member 'QuantitySelector_C_SetSplitData::CallFunc_Conv_IntToFloat_ReturnValue12' has a wrong offset!");
static_assert(offsetof(QuantitySelector_C_SetSplitData, CallFunc_Subtract_IntInt_ReturnValue1) == 0x000068, "Member 'QuantitySelector_C_SetSplitData::CallFunc_Subtract_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(QuantitySelector_C_SetSplitData, CallFunc_Conv_IntToFloat_ReturnValue123) == 0x00006C, "Member 'QuantitySelector_C_SetSplitData::CallFunc_Conv_IntToFloat_ReturnValue123' has a wrong offset!");
static_assert(offsetof(QuantitySelector_C_SetSplitData, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000070, "Member 'QuantitySelector_C_SetSplitData::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");

// Function QuantitySelector.QuantitySelector_C.SetAdditionalText
// 0x0020 (0x0020 - 0x0000)
struct QuantitySelector_C_SetAdditionalText final
{
public:
	class FText                                   AdditionalInfoText;                                // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TextIsEmpty_ReturnValue;                  // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable1;                               // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(QuantitySelector_C_SetAdditionalText) == 0x000008, "Wrong alignment on QuantitySelector_C_SetAdditionalText");
static_assert(sizeof(QuantitySelector_C_SetAdditionalText) == 0x000020, "Wrong size on QuantitySelector_C_SetAdditionalText");
static_assert(offsetof(QuantitySelector_C_SetAdditionalText, AdditionalInfoText) == 0x000000, "Member 'QuantitySelector_C_SetAdditionalText::AdditionalInfoText' has a wrong offset!");
static_assert(offsetof(QuantitySelector_C_SetAdditionalText, Temp_byte_Variable) == 0x000018, "Member 'QuantitySelector_C_SetAdditionalText::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(QuantitySelector_C_SetAdditionalText, CallFunc_TextIsEmpty_ReturnValue) == 0x000019, "Member 'QuantitySelector_C_SetAdditionalText::CallFunc_TextIsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuantitySelector_C_SetAdditionalText, Temp_byte_Variable1) == 0x00001A, "Member 'QuantitySelector_C_SetAdditionalText::Temp_byte_Variable1' has a wrong offset!");
static_assert(offsetof(QuantitySelector_C_SetAdditionalText, Temp_bool_Variable) == 0x00001B, "Member 'QuantitySelector_C_SetAdditionalText::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(QuantitySelector_C_SetAdditionalText, K2Node_Select_Default) == 0x00001C, "Member 'QuantitySelector_C_SetAdditionalText::K2Node_Select_Default' has a wrong offset!");

// Function QuantitySelector.QuantitySelector_C.CloseSelector
// 0x0008 (0x0008 - 0x0000)
struct QuantitySelector_C_CloseSelector final
{
public:
	class UFortUIManagerWidget_NUI*               CallFunc_GetUIManagerWidget_ReturnValue;           // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(QuantitySelector_C_CloseSelector) == 0x000008, "Wrong alignment on QuantitySelector_C_CloseSelector");
static_assert(sizeof(QuantitySelector_C_CloseSelector) == 0x000008, "Wrong size on QuantitySelector_C_CloseSelector");
static_assert(offsetof(QuantitySelector_C_CloseSelector, CallFunc_GetUIManagerWidget_ReturnValue) == 0x000000, "Member 'QuantitySelector_C_CloseSelector::CallFunc_GetUIManagerWidget_ReturnValue' has a wrong offset!");

// Function QuantitySelector.QuantitySelector_C.HandleMaxPressed
// 0x0001 (0x0001 - 0x0000)
struct QuantitySelector_C_HandleMaxPressed final
{
public:
	bool                                          Passthrough;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(QuantitySelector_C_HandleMaxPressed) == 0x000001, "Wrong alignment on QuantitySelector_C_HandleMaxPressed");
static_assert(sizeof(QuantitySelector_C_HandleMaxPressed) == 0x000001, "Wrong size on QuantitySelector_C_HandleMaxPressed");
static_assert(offsetof(QuantitySelector_C_HandleMaxPressed, Passthrough) == 0x000000, "Member 'QuantitySelector_C_HandleMaxPressed::Passthrough' has a wrong offset!");

// Function QuantitySelector.QuantitySelector_C.HandleTransferPressed
// 0x0001 (0x0001 - 0x0000)
struct QuantitySelector_C_HandleTransferPressed final
{
public:
	bool                                          Passthrough;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(QuantitySelector_C_HandleTransferPressed) == 0x000001, "Wrong alignment on QuantitySelector_C_HandleTransferPressed");
static_assert(sizeof(QuantitySelector_C_HandleTransferPressed) == 0x000001, "Wrong size on QuantitySelector_C_HandleTransferPressed");
static_assert(offsetof(QuantitySelector_C_HandleTransferPressed, Passthrough) == 0x000000, "Member 'QuantitySelector_C_HandleTransferPressed::Passthrough' has a wrong offset!");

// Function QuantitySelector.QuantitySelector_C.HandleCancelPressed
// 0x0001 (0x0001 - 0x0000)
struct QuantitySelector_C_HandleCancelPressed final
{
public:
	bool                                          Passthrough;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(QuantitySelector_C_HandleCancelPressed) == 0x000001, "Wrong alignment on QuantitySelector_C_HandleCancelPressed");
static_assert(sizeof(QuantitySelector_C_HandleCancelPressed) == 0x000001, "Wrong size on QuantitySelector_C_HandleCancelPressed");
static_assert(offsetof(QuantitySelector_C_HandleCancelPressed, Passthrough) == 0x000000, "Member 'QuantitySelector_C_HandleCancelPressed::Passthrough' has a wrong offset!");

// Function QuantitySelector.QuantitySelector_C.SliderValueChanged
// 0x0004 (0x0004 - 0x0000)
struct QuantitySelector_C_SliderValueChanged final
{
public:
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(QuantitySelector_C_SliderValueChanged) == 0x000004, "Wrong alignment on QuantitySelector_C_SliderValueChanged");
static_assert(sizeof(QuantitySelector_C_SliderValueChanged) == 0x000004, "Wrong size on QuantitySelector_C_SliderValueChanged");
static_assert(offsetof(QuantitySelector_C_SliderValueChanged, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000000, "Member 'QuantitySelector_C_SliderValueChanged::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");

// Function QuantitySelector.QuantitySelector_C.SetupForInputMode
// 0x0018 (0x0018 - 0x0000)
struct QuantitySelector_C_SetupForInputMode final
{
public:
	bool                                          IsUsingGamepad;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonInputContext*                    CallFunc_GetContext_ReturnValue;                   // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECommonGamepadType                            CallFunc_GetCurrentGamepadType_ReturnValue;        // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECommonInputType                              CallFunc_GetCurrentInputType_ReturnValue;          // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum1_CmpSuccess;                     // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(QuantitySelector_C_SetupForInputMode) == 0x000008, "Wrong alignment on QuantitySelector_C_SetupForInputMode");
static_assert(sizeof(QuantitySelector_C_SetupForInputMode) == 0x000018, "Wrong size on QuantitySelector_C_SetupForInputMode");
static_assert(offsetof(QuantitySelector_C_SetupForInputMode, IsUsingGamepad) == 0x000000, "Member 'QuantitySelector_C_SetupForInputMode::IsUsingGamepad' has a wrong offset!");
static_assert(offsetof(QuantitySelector_C_SetupForInputMode, CallFunc_GetContext_ReturnValue) == 0x000008, "Member 'QuantitySelector_C_SetupForInputMode::CallFunc_GetContext_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuantitySelector_C_SetupForInputMode, CallFunc_GetCurrentGamepadType_ReturnValue) == 0x000010, "Member 'QuantitySelector_C_SetupForInputMode::CallFunc_GetCurrentGamepadType_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuantitySelector_C_SetupForInputMode, CallFunc_GetCurrentInputType_ReturnValue) == 0x000011, "Member 'QuantitySelector_C_SetupForInputMode::CallFunc_GetCurrentInputType_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuantitySelector_C_SetupForInputMode, K2Node_SwitchEnum_CmpSuccess) == 0x000012, "Member 'QuantitySelector_C_SetupForInputMode::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(QuantitySelector_C_SetupForInputMode, K2Node_SwitchEnum1_CmpSuccess) == 0x000013, "Member 'QuantitySelector_C_SetupForInputMode::K2Node_SwitchEnum1_CmpSuccess' has a wrong offset!");

// Function QuantitySelector.QuantitySelector_C.GetCurrentValue
// 0x0004 (0x0004 - 0x0000)
struct QuantitySelector_C_GetCurrentValue final
{
public:
	int32                                         CurrentValue_0;                                    // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(QuantitySelector_C_GetCurrentValue) == 0x000004, "Wrong alignment on QuantitySelector_C_GetCurrentValue");
static_assert(sizeof(QuantitySelector_C_GetCurrentValue) == 0x000004, "Wrong size on QuantitySelector_C_GetCurrentValue");
static_assert(offsetof(QuantitySelector_C_GetCurrentValue, CurrentValue_0) == 0x000000, "Member 'QuantitySelector_C_GetCurrentValue::CurrentValue_0' has a wrong offset!");

// Function QuantitySelector.QuantitySelector_C.SetCurrentValue
// 0x0030 (0x0030 - 0x0000)
struct QuantitySelector_C_SetCurrentValue final
{
public:
	int32                                         NewValue;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue1;             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue1;             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue12;            // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_IntToFloat_ReturnValue123;           // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue1;           // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HandleMaxPressed_PassThrough;             // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(QuantitySelector_C_SetCurrentValue) == 0x000004, "Wrong alignment on QuantitySelector_C_SetCurrentValue");
static_assert(sizeof(QuantitySelector_C_SetCurrentValue) == 0x000030, "Wrong size on QuantitySelector_C_SetCurrentValue");
static_assert(offsetof(QuantitySelector_C_SetCurrentValue, NewValue) == 0x000000, "Member 'QuantitySelector_C_SetCurrentValue::NewValue' has a wrong offset!");
static_assert(offsetof(QuantitySelector_C_SetCurrentValue, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000004, "Member 'QuantitySelector_C_SetCurrentValue::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuantitySelector_C_SetCurrentValue, CallFunc_Subtract_IntInt_ReturnValue) == 0x000008, "Member 'QuantitySelector_C_SetCurrentValue::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuantitySelector_C_SetCurrentValue, CallFunc_Subtract_IntInt_ReturnValue1) == 0x00000C, "Member 'QuantitySelector_C_SetCurrentValue::CallFunc_Subtract_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(QuantitySelector_C_SetCurrentValue, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000010, "Member 'QuantitySelector_C_SetCurrentValue::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuantitySelector_C_SetCurrentValue, CallFunc_Conv_IntToFloat_ReturnValue1) == 0x000014, "Member 'QuantitySelector_C_SetCurrentValue::CallFunc_Conv_IntToFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(QuantitySelector_C_SetCurrentValue, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000018, "Member 'QuantitySelector_C_SetCurrentValue::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuantitySelector_C_SetCurrentValue, CallFunc_Conv_IntToFloat_ReturnValue12) == 0x00001C, "Member 'QuantitySelector_C_SetCurrentValue::CallFunc_Conv_IntToFloat_ReturnValue12' has a wrong offset!");
static_assert(offsetof(QuantitySelector_C_SetCurrentValue, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000020, "Member 'QuantitySelector_C_SetCurrentValue::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuantitySelector_C_SetCurrentValue, CallFunc_Conv_IntToFloat_ReturnValue123) == 0x000024, "Member 'QuantitySelector_C_SetCurrentValue::CallFunc_Conv_IntToFloat_ReturnValue123' has a wrong offset!");
static_assert(offsetof(QuantitySelector_C_SetCurrentValue, CallFunc_Divide_FloatFloat_ReturnValue1) == 0x000028, "Member 'QuantitySelector_C_SetCurrentValue::CallFunc_Divide_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(QuantitySelector_C_SetCurrentValue, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x00002C, "Member 'QuantitySelector_C_SetCurrentValue::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuantitySelector_C_SetCurrentValue, CallFunc_HandleMaxPressed_PassThrough) == 0x00002D, "Member 'QuantitySelector_C_SetCurrentValue::CallFunc_HandleMaxPressed_PassThrough' has a wrong offset!");

}

