#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FlingerInterface

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function FlingerInterface.FlingerInterface_C.FlingerSpawnedAnEnemy
// 0x0010 (0x0010 - 0x0000)
struct FlingerInterface_C_FlingerSpawnedAnEnemy final
{
public:
	class AFortAIPawn*                            EnemySpawned;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortProjectileBase*                    ProjectileThatSpawnedThisEnemy;                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FlingerInterface_C_FlingerSpawnedAnEnemy) == 0x000008, "Wrong alignment on FlingerInterface_C_FlingerSpawnedAnEnemy");
static_assert(sizeof(FlingerInterface_C_FlingerSpawnedAnEnemy) == 0x000010, "Wrong size on FlingerInterface_C_FlingerSpawnedAnEnemy");
static_assert(offsetof(FlingerInterface_C_FlingerSpawnedAnEnemy, EnemySpawned) == 0x000000, "Member 'FlingerInterface_C_FlingerSpawnedAnEnemy::EnemySpawned' has a wrong offset!");
static_assert(offsetof(FlingerInterface_C_FlingerSpawnedAnEnemy, ProjectileThatSpawnedThisEnemy) == 0x000008, "Member 'FlingerInterface_C_FlingerSpawnedAnEnemy::ProjectileThatSpawnedThisEnemy' has a wrong offset!");

// Function FlingerInterface.FlingerInterface_C.CanFlingerSpawnAnEnemy
// 0x0008 (0x0008 - 0x0000)
struct FlingerInterface_C_CanFlingerSpawnAnEnemy final
{
public:
	class AActor*                                 ActorWhoAsked;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FlingerInterface_C_CanFlingerSpawnAnEnemy) == 0x000008, "Wrong alignment on FlingerInterface_C_CanFlingerSpawnAnEnemy");
static_assert(sizeof(FlingerInterface_C_CanFlingerSpawnAnEnemy) == 0x000008, "Wrong size on FlingerInterface_C_CanFlingerSpawnAnEnemy");
static_assert(offsetof(FlingerInterface_C_CanFlingerSpawnAnEnemy, ActorWhoAsked) == 0x000000, "Member 'FlingerInterface_C_CanFlingerSpawnAnEnemy::ActorWhoAsked' has a wrong offset!");

// Function FlingerInterface.FlingerInterface_C.FlingerThrewAProjectileContainingAnEnemy
// 0x0008 (0x0008 - 0x0000)
struct FlingerInterface_C_FlingerThrewAProjectileContainingAnEnemy final
{
public:
	class AFortProjectileBase*                    Projectile;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FlingerInterface_C_FlingerThrewAProjectileContainingAnEnemy) == 0x000008, "Wrong alignment on FlingerInterface_C_FlingerThrewAProjectileContainingAnEnemy");
static_assert(sizeof(FlingerInterface_C_FlingerThrewAProjectileContainingAnEnemy) == 0x000008, "Wrong size on FlingerInterface_C_FlingerThrewAProjectileContainingAnEnemy");
static_assert(offsetof(FlingerInterface_C_FlingerThrewAProjectileContainingAnEnemy, Projectile) == 0x000000, "Member 'FlingerInterface_C_FlingerThrewAProjectileContainingAnEnemy::Projectile' has a wrong offset!");

// Function FlingerInterface.FlingerInterface_C.FlingerEnemyFailedToSpawn
// 0x0008 (0x0008 - 0x0000)
struct FlingerInterface_C_FlingerEnemyFailedToSpawn final
{
public:
	class AFortProjectileBase*                    FailedProjectile;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FlingerInterface_C_FlingerEnemyFailedToSpawn) == 0x000008, "Wrong alignment on FlingerInterface_C_FlingerEnemyFailedToSpawn");
static_assert(sizeof(FlingerInterface_C_FlingerEnemyFailedToSpawn) == 0x000008, "Wrong size on FlingerInterface_C_FlingerEnemyFailedToSpawn");
static_assert(offsetof(FlingerInterface_C_FlingerEnemyFailedToSpawn, FailedProjectile) == 0x000000, "Member 'FlingerInterface_C_FlingerEnemyFailedToSpawn::FailedProjectile' has a wrong offset!");

// Function FlingerInterface.FlingerInterface_C.AlertEnemySpawnedByFlinger
// 0x0018 (0x0018 - 0x0000)
struct FlingerInterface_C_AlertEnemySpawnedByFlinger final
{
public:
	struct FVector                                PushMomentum;                                      // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PushDuration;                                      // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  OwningFlinger;                                     // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FlingerInterface_C_AlertEnemySpawnedByFlinger) == 0x000008, "Wrong alignment on FlingerInterface_C_AlertEnemySpawnedByFlinger");
static_assert(sizeof(FlingerInterface_C_AlertEnemySpawnedByFlinger) == 0x000018, "Wrong size on FlingerInterface_C_AlertEnemySpawnedByFlinger");
static_assert(offsetof(FlingerInterface_C_AlertEnemySpawnedByFlinger, PushMomentum) == 0x000000, "Member 'FlingerInterface_C_AlertEnemySpawnedByFlinger::PushMomentum' has a wrong offset!");
static_assert(offsetof(FlingerInterface_C_AlertEnemySpawnedByFlinger, PushDuration) == 0x00000C, "Member 'FlingerInterface_C_AlertEnemySpawnedByFlinger::PushDuration' has a wrong offset!");
static_assert(offsetof(FlingerInterface_C_AlertEnemySpawnedByFlinger, OwningFlinger) == 0x000010, "Member 'FlingerInterface_C_AlertEnemySpawnedByFlinger::OwningFlinger' has a wrong offset!");

// Function FlingerInterface.FlingerInterface_C.FlingerEnemyDied
// 0x0008 (0x0008 - 0x0000)
struct FlingerInterface_C_FlingerEnemyDied final
{
public:
	class APawn*                                  PawnThatDied;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FlingerInterface_C_FlingerEnemyDied) == 0x000008, "Wrong alignment on FlingerInterface_C_FlingerEnemyDied");
static_assert(sizeof(FlingerInterface_C_FlingerEnemyDied) == 0x000008, "Wrong size on FlingerInterface_C_FlingerEnemyDied");
static_assert(offsetof(FlingerInterface_C_FlingerEnemyDied, PawnThatDied) == 0x000000, "Member 'FlingerInterface_C_FlingerEnemyDied::PawnThatDied' has a wrong offset!");

}

