#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_Glider_Assassin

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function B_Glider_Assassin.B_Glider_Assassin_C.ExecuteUbergraph_B_Glider_Assassin
// 0x0038 (0x0038 - 0x0000)
struct B_Glider_Assassin_C_ExecuteUbergraph_B_Glider_Assassin final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0004(0x000C)(IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_InputAxisEvent_AxisValue;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue1;             // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue1;          // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_MovementLengthSquared;                // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_ForwardDot;                           // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_RightDot;                             // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_RotationalMovementAcceleration;       // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue12;            // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue12;         // 0x0036(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(B_Glider_Assassin_C_ExecuteUbergraph_B_Glider_Assassin) == 0x000004, "Wrong alignment on B_Glider_Assassin_C_ExecuteUbergraph_B_Glider_Assassin");
static_assert(sizeof(B_Glider_Assassin_C_ExecuteUbergraph_B_Glider_Assassin) == 0x000038, "Wrong size on B_Glider_Assassin_C_ExecuteUbergraph_B_Glider_Assassin");
static_assert(offsetof(B_Glider_Assassin_C_ExecuteUbergraph_B_Glider_Assassin, EntryPoint) == 0x000000, "Member 'B_Glider_Assassin_C_ExecuteUbergraph_B_Glider_Assassin::EntryPoint' has a wrong offset!");
static_assert(offsetof(B_Glider_Assassin_C_ExecuteUbergraph_B_Glider_Assassin, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000004, "Member 'B_Glider_Assassin_C_ExecuteUbergraph_B_Glider_Assassin::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Glider_Assassin_C_ExecuteUbergraph_B_Glider_Assassin, CallFunc_BreakRotator_Roll) == 0x000010, "Member 'B_Glider_Assassin_C_ExecuteUbergraph_B_Glider_Assassin::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(B_Glider_Assassin_C_ExecuteUbergraph_B_Glider_Assassin, CallFunc_BreakRotator_Pitch) == 0x000014, "Member 'B_Glider_Assassin_C_ExecuteUbergraph_B_Glider_Assassin::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(B_Glider_Assassin_C_ExecuteUbergraph_B_Glider_Assassin, CallFunc_BreakRotator_Yaw) == 0x000018, "Member 'B_Glider_Assassin_C_ExecuteUbergraph_B_Glider_Assassin::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(B_Glider_Assassin_C_ExecuteUbergraph_B_Glider_Assassin, K2Node_InputAxisEvent_AxisValue) == 0x00001C, "Member 'B_Glider_Assassin_C_ExecuteUbergraph_B_Glider_Assassin::K2Node_InputAxisEvent_AxisValue' has a wrong offset!");
static_assert(offsetof(B_Glider_Assassin_C_ExecuteUbergraph_B_Glider_Assassin, CallFunc_Less_FloatFloat_ReturnValue) == 0x000020, "Member 'B_Glider_Assassin_C_ExecuteUbergraph_B_Glider_Assassin::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Glider_Assassin_C_ExecuteUbergraph_B_Glider_Assassin, CallFunc_Less_FloatFloat_ReturnValue1) == 0x000021, "Member 'B_Glider_Assassin_C_ExecuteUbergraph_B_Glider_Assassin::CallFunc_Less_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(B_Glider_Assassin_C_ExecuteUbergraph_B_Glider_Assassin, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000022, "Member 'B_Glider_Assassin_C_ExecuteUbergraph_B_Glider_Assassin::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Glider_Assassin_C_ExecuteUbergraph_B_Glider_Assassin, CallFunc_Greater_FloatFloat_ReturnValue1) == 0x000023, "Member 'B_Glider_Assassin_C_ExecuteUbergraph_B_Glider_Assassin::CallFunc_Greater_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(B_Glider_Assassin_C_ExecuteUbergraph_B_Glider_Assassin, K2Node_Event_MovementLengthSquared) == 0x000024, "Member 'B_Glider_Assassin_C_ExecuteUbergraph_B_Glider_Assassin::K2Node_Event_MovementLengthSquared' has a wrong offset!");
static_assert(offsetof(B_Glider_Assassin_C_ExecuteUbergraph_B_Glider_Assassin, K2Node_Event_ForwardDot) == 0x000028, "Member 'B_Glider_Assassin_C_ExecuteUbergraph_B_Glider_Assassin::K2Node_Event_ForwardDot' has a wrong offset!");
static_assert(offsetof(B_Glider_Assassin_C_ExecuteUbergraph_B_Glider_Assassin, K2Node_Event_RightDot) == 0x00002C, "Member 'B_Glider_Assassin_C_ExecuteUbergraph_B_Glider_Assassin::K2Node_Event_RightDot' has a wrong offset!");
static_assert(offsetof(B_Glider_Assassin_C_ExecuteUbergraph_B_Glider_Assassin, K2Node_Event_RotationalMovementAcceleration) == 0x000030, "Member 'B_Glider_Assassin_C_ExecuteUbergraph_B_Glider_Assassin::K2Node_Event_RotationalMovementAcceleration' has a wrong offset!");
static_assert(offsetof(B_Glider_Assassin_C_ExecuteUbergraph_B_Glider_Assassin, CallFunc_Less_FloatFloat_ReturnValue12) == 0x000034, "Member 'B_Glider_Assassin_C_ExecuteUbergraph_B_Glider_Assassin::CallFunc_Less_FloatFloat_ReturnValue12' has a wrong offset!");
static_assert(offsetof(B_Glider_Assassin_C_ExecuteUbergraph_B_Glider_Assassin, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000035, "Member 'B_Glider_Assassin_C_ExecuteUbergraph_B_Glider_Assassin::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Glider_Assassin_C_ExecuteUbergraph_B_Glider_Assassin, CallFunc_Greater_FloatFloat_ReturnValue12) == 0x000036, "Member 'B_Glider_Assassin_C_ExecuteUbergraph_B_Glider_Assassin::CallFunc_Greater_FloatFloat_ReturnValue12' has a wrong offset!");

// Function B_Glider_Assassin.B_Glider_Assassin_C.OnParachuteTrailUpdated
// 0x0010 (0x0010 - 0x0000)
struct B_Glider_Assassin_C_OnParachuteTrailUpdated final
{
public:
	float                                         MovementLengthSquared;                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ForwardDot;                                        // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RightDot;                                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RotationalMovementAcceleration;                    // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Glider_Assassin_C_OnParachuteTrailUpdated) == 0x000004, "Wrong alignment on B_Glider_Assassin_C_OnParachuteTrailUpdated");
static_assert(sizeof(B_Glider_Assassin_C_OnParachuteTrailUpdated) == 0x000010, "Wrong size on B_Glider_Assassin_C_OnParachuteTrailUpdated");
static_assert(offsetof(B_Glider_Assassin_C_OnParachuteTrailUpdated, MovementLengthSquared) == 0x000000, "Member 'B_Glider_Assassin_C_OnParachuteTrailUpdated::MovementLengthSquared' has a wrong offset!");
static_assert(offsetof(B_Glider_Assassin_C_OnParachuteTrailUpdated, ForwardDot) == 0x000004, "Member 'B_Glider_Assassin_C_OnParachuteTrailUpdated::ForwardDot' has a wrong offset!");
static_assert(offsetof(B_Glider_Assassin_C_OnParachuteTrailUpdated, RightDot) == 0x000008, "Member 'B_Glider_Assassin_C_OnParachuteTrailUpdated::RightDot' has a wrong offset!");
static_assert(offsetof(B_Glider_Assassin_C_OnParachuteTrailUpdated, RotationalMovementAcceleration) == 0x00000C, "Member 'B_Glider_Assassin_C_OnParachuteTrailUpdated::RotationalMovementAcceleration' has a wrong offset!");

// Function B_Glider_Assassin.B_Glider_Assassin_C.InpAxisEvt_MoveRight_K2Node_InputAxisEvent_0
// 0x0004 (0x0004 - 0x0000)
struct B_Glider_Assassin_C_InpAxisEvt_MoveRight_K2Node_InputAxisEvent_0 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Glider_Assassin_C_InpAxisEvt_MoveRight_K2Node_InputAxisEvent_0) == 0x000004, "Wrong alignment on B_Glider_Assassin_C_InpAxisEvt_MoveRight_K2Node_InputAxisEvent_0");
static_assert(sizeof(B_Glider_Assassin_C_InpAxisEvt_MoveRight_K2Node_InputAxisEvent_0) == 0x000004, "Wrong size on B_Glider_Assassin_C_InpAxisEvt_MoveRight_K2Node_InputAxisEvent_0");
static_assert(offsetof(B_Glider_Assassin_C_InpAxisEvt_MoveRight_K2Node_InputAxisEvent_0, AxisValue) == 0x000000, "Member 'B_Glider_Assassin_C_InpAxisEvt_MoveRight_K2Node_InputAxisEvent_0::AxisValue' has a wrong offset!");

// Function B_Glider_Assassin.B_Glider_Assassin_C.UserConstructionScript
// 0x0008 (0x0008 - 0x0000)
struct B_Glider_Assassin_C_UserConstructionScript final
{
public:
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Glider_Assassin_C_UserConstructionScript) == 0x000008, "Wrong alignment on B_Glider_Assassin_C_UserConstructionScript");
static_assert(sizeof(B_Glider_Assassin_C_UserConstructionScript) == 0x000008, "Wrong size on B_Glider_Assassin_C_UserConstructionScript");
static_assert(offsetof(B_Glider_Assassin_C_UserConstructionScript, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000000, "Member 'B_Glider_Assassin_C_UserConstructionScript::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");

}

