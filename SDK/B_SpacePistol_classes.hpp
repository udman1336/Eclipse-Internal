#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_SpacePistol

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "B_Ranged_Generic_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass B_SpacePistol.B_SpacePistol_C
// 0x00B0 (0x0F08 - 0x0E58)
class AB_SpacePistol_C final : public AB_Ranged_Generic_C
{
public:
	uint8                                         Pad_E54[0x4];                                      // 0x0E54(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame_B_SpacePistol_C;                    // 0x0E58(0x0008)(Transient, DuplicateTransient)
	class UParticleSystemComponent*               ParticleScreenLight;                               // 0x0E60(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         ScaleBarReload_LERP_612F07E847F4C3FDBA6909B00CBC221E; // 0x0E68(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            ScaleBarReload__Direction_612F07E847F4C3FDBA6909B00CBC221E; // 0x0E6C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E6D[0x3];                                      // 0x0E6D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     ScaleBarReload;                                    // 0x0E70(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EmptyLERPstate_LERP_3582F24D4732165472C05D875D493CB2; // 0x0E78(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            EmptyLERPstate__Direction_3582F24D4732165472C05D875D493CB2; // 0x0E7C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E7D[0x3];                                      // 0x0E7D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     EmptyLERPstate;                                    // 0x0E80(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReloadLERPstate_LERP_B77803F349E7B91DBA427FBDF293E307; // 0x0E88(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            ReloadLERPstate__Direction_B77803F349E7B91DBA427FBDF293E307; // 0x0E8C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E8D[0x3];                                      // 0x0E8D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     ReloadLERPstate;                                   // 0x0E90(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScaleBarBetweenClipCounts_Bolt_Flash_230D3A92479C25873AABFAA2040107DD; // 0x0E98(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScaleBarBetweenClipCounts_LERP_Ammo_Count_230D3A92479C25873AABFAA2040107DD; // 0x0E9C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            ScaleBarBetweenClipCounts__Direction_230D3A92479C25873AABFAA2040107DD; // 0x0EA0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EA1[0x7];                                      // 0x0EA1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     ScaleBarBetweenClipCounts;                         // 0x0EA8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               ScreenMat;                                         // 0x0EB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Screen_Empty_Color__Light_;                        // 0x0EB8(0x0010)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Screen_Reload_Color__Light_;                       // 0x0EC8(0x0010)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Screen_Full_Color__Light_;                         // 0x0ED8(0x0010)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentClipCount;                                  // 0x0EE8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PreviousClipCount;                                 // 0x0EEC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScaleBarStart;                                     // 0x0EF0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScaleBarEnd;                                       // 0x0EF4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsEmpty_;                                          // 0x0EF8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          JustReloaded_;                                     // 0x0EF9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_EFA[0x2];                                      // 0x0EFA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Reload_Start;                                      // 0x0EFC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Reload_End;                                        // 0x0F00(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_B_SpacePistol(int32 EntryPoint);
	void OnPlayImpactFX(const struct FHitResult& HitResult, EPhysicalSurface ImpactPhysicalSurface, class UParticleSystemComponent* SpawnedPSC);
	void ClearEmptyLERP();
	void OnAmmoCountChanged();
	void OnPlayReloadFX(EFortReloadFXState ReloadStage);
	void ReceiveBeginPlay();
	void OnPlayWeaponFireFX(bool bPersistentFire, bool bSecondaryFire);
	void ScaleBarReload__UpdateFunc();
	void ScaleBarReload__FinishedFunc();
	void EmptyLERPstate__UpdateFunc();
	void EmptyLERPstate__FinishedFunc();
	void ReloadLERPstate__UpdateFunc();
	void ReloadLERPstate__FinishedFunc();
	void ScaleBarBetweenClipCounts__UpdateFunc();
	void ScaleBarBetweenClipCounts__FinishedFunc();
	void UserConstructionScript();
	void SetAmmoBarVariables();
	void SetReloadVariables();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_SpacePistol_C">();
	}
	static class AB_SpacePistol_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AB_SpacePistol_C>();
	}
};
static_assert(alignof(AB_SpacePistol_C) == 0x000008, "Wrong alignment on AB_SpacePistol_C");
static_assert(sizeof(AB_SpacePistol_C) == 0x000F08, "Wrong size on AB_SpacePistol_C");
static_assert(offsetof(AB_SpacePistol_C, UberGraphFrame_B_SpacePistol_C) == 0x000E58, "Member 'AB_SpacePistol_C::UberGraphFrame_B_SpacePistol_C' has a wrong offset!");
static_assert(offsetof(AB_SpacePistol_C, ParticleScreenLight) == 0x000E60, "Member 'AB_SpacePistol_C::ParticleScreenLight' has a wrong offset!");
static_assert(offsetof(AB_SpacePistol_C, ScaleBarReload_LERP_612F07E847F4C3FDBA6909B00CBC221E) == 0x000E68, "Member 'AB_SpacePistol_C::ScaleBarReload_LERP_612F07E847F4C3FDBA6909B00CBC221E' has a wrong offset!");
static_assert(offsetof(AB_SpacePistol_C, ScaleBarReload__Direction_612F07E847F4C3FDBA6909B00CBC221E) == 0x000E6C, "Member 'AB_SpacePistol_C::ScaleBarReload__Direction_612F07E847F4C3FDBA6909B00CBC221E' has a wrong offset!");
static_assert(offsetof(AB_SpacePistol_C, ScaleBarReload) == 0x000E70, "Member 'AB_SpacePistol_C::ScaleBarReload' has a wrong offset!");
static_assert(offsetof(AB_SpacePistol_C, EmptyLERPstate_LERP_3582F24D4732165472C05D875D493CB2) == 0x000E78, "Member 'AB_SpacePistol_C::EmptyLERPstate_LERP_3582F24D4732165472C05D875D493CB2' has a wrong offset!");
static_assert(offsetof(AB_SpacePistol_C, EmptyLERPstate__Direction_3582F24D4732165472C05D875D493CB2) == 0x000E7C, "Member 'AB_SpacePistol_C::EmptyLERPstate__Direction_3582F24D4732165472C05D875D493CB2' has a wrong offset!");
static_assert(offsetof(AB_SpacePistol_C, EmptyLERPstate) == 0x000E80, "Member 'AB_SpacePistol_C::EmptyLERPstate' has a wrong offset!");
static_assert(offsetof(AB_SpacePistol_C, ReloadLERPstate_LERP_B77803F349E7B91DBA427FBDF293E307) == 0x000E88, "Member 'AB_SpacePistol_C::ReloadLERPstate_LERP_B77803F349E7B91DBA427FBDF293E307' has a wrong offset!");
static_assert(offsetof(AB_SpacePistol_C, ReloadLERPstate__Direction_B77803F349E7B91DBA427FBDF293E307) == 0x000E8C, "Member 'AB_SpacePistol_C::ReloadLERPstate__Direction_B77803F349E7B91DBA427FBDF293E307' has a wrong offset!");
static_assert(offsetof(AB_SpacePistol_C, ReloadLERPstate) == 0x000E90, "Member 'AB_SpacePistol_C::ReloadLERPstate' has a wrong offset!");
static_assert(offsetof(AB_SpacePistol_C, ScaleBarBetweenClipCounts_Bolt_Flash_230D3A92479C25873AABFAA2040107DD) == 0x000E98, "Member 'AB_SpacePistol_C::ScaleBarBetweenClipCounts_Bolt_Flash_230D3A92479C25873AABFAA2040107DD' has a wrong offset!");
static_assert(offsetof(AB_SpacePistol_C, ScaleBarBetweenClipCounts_LERP_Ammo_Count_230D3A92479C25873AABFAA2040107DD) == 0x000E9C, "Member 'AB_SpacePistol_C::ScaleBarBetweenClipCounts_LERP_Ammo_Count_230D3A92479C25873AABFAA2040107DD' has a wrong offset!");
static_assert(offsetof(AB_SpacePistol_C, ScaleBarBetweenClipCounts__Direction_230D3A92479C25873AABFAA2040107DD) == 0x000EA0, "Member 'AB_SpacePistol_C::ScaleBarBetweenClipCounts__Direction_230D3A92479C25873AABFAA2040107DD' has a wrong offset!");
static_assert(offsetof(AB_SpacePistol_C, ScaleBarBetweenClipCounts) == 0x000EA8, "Member 'AB_SpacePistol_C::ScaleBarBetweenClipCounts' has a wrong offset!");
static_assert(offsetof(AB_SpacePistol_C, ScreenMat) == 0x000EB0, "Member 'AB_SpacePistol_C::ScreenMat' has a wrong offset!");
static_assert(offsetof(AB_SpacePistol_C, Screen_Empty_Color__Light_) == 0x000EB8, "Member 'AB_SpacePistol_C::Screen_Empty_Color__Light_' has a wrong offset!");
static_assert(offsetof(AB_SpacePistol_C, Screen_Reload_Color__Light_) == 0x000EC8, "Member 'AB_SpacePistol_C::Screen_Reload_Color__Light_' has a wrong offset!");
static_assert(offsetof(AB_SpacePistol_C, Screen_Full_Color__Light_) == 0x000ED8, "Member 'AB_SpacePistol_C::Screen_Full_Color__Light_' has a wrong offset!");
static_assert(offsetof(AB_SpacePistol_C, CurrentClipCount) == 0x000EE8, "Member 'AB_SpacePistol_C::CurrentClipCount' has a wrong offset!");
static_assert(offsetof(AB_SpacePistol_C, PreviousClipCount) == 0x000EEC, "Member 'AB_SpacePistol_C::PreviousClipCount' has a wrong offset!");
static_assert(offsetof(AB_SpacePistol_C, ScaleBarStart) == 0x000EF0, "Member 'AB_SpacePistol_C::ScaleBarStart' has a wrong offset!");
static_assert(offsetof(AB_SpacePistol_C, ScaleBarEnd) == 0x000EF4, "Member 'AB_SpacePistol_C::ScaleBarEnd' has a wrong offset!");
static_assert(offsetof(AB_SpacePistol_C, IsEmpty_) == 0x000EF8, "Member 'AB_SpacePistol_C::IsEmpty_' has a wrong offset!");
static_assert(offsetof(AB_SpacePistol_C, JustReloaded_) == 0x000EF9, "Member 'AB_SpacePistol_C::JustReloaded_' has a wrong offset!");
static_assert(offsetof(AB_SpacePistol_C, Reload_Start) == 0x000EFC, "Member 'AB_SpacePistol_C::Reload_Start' has a wrong offset!");
static_assert(offsetof(AB_SpacePistol_C, Reload_End) == 0x000F00, "Member 'AB_SpacePistol_C::Reload_End' has a wrong offset!");

}

