#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AbilitiesPageTile

#include "Basic.hpp"

#include "CommonInput_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "Engine_structs.hpp"
#include "FortniteUI_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CommonUI_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass AbilitiesPageTile.AbilitiesPageTile_C
// 0x0138 (0x0940 - 0x0808)
class UAbilitiesPageTile_C final : public UCommonButton
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0808(0x0008)(Transient, DuplicateTransient)
	class UFortSZAwareImage*                      AbilityImage;                                      // 0x0810(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       AbilityName;                                       // 0x0818(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UKeybindWidget_C*                       KeybindAbilityKeybind;                             // 0x0820(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UKeybindWidget_C*                       KeybindGamepadAbility1;                            // 0x0828(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UKeybindWidget_C*                       KeybindGamepadAbility2;                            // 0x0830(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               SizeBoxAbilityKeybind;                             // 0x0838(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonWidgetSwitcher*                  SwitcherAbilityBindingSwitcher;                    // 0x0840(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	int32                                         QuickBarSlot;                                      // 0x0848(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_84C[0x4];                                      // 0x084C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortAbilityKit*                        AbilityKit;                                        // 0x0850(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortGadgetItemDefinition*              GadgetItemDef;                                     // 0x0858(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortItem*                              AbilityItem;                                       // 0x0860(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AbilityLocked;                                     // 0x0868(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_869[0x7];                                      // 0x0869(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortUIPerk                            AbilityUIPerk;                                     // 0x0870(0x0098)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FLinearColor                           LockedColor;                                       // 0x0908(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           UnlockedColor;                                     // 0x0918(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFortBrushSize                                AbilityIconBrushSize;                              // 0x0928(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_929[0x3];                                      // 0x0929(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           LockedAbilityIconColor;                            // 0x092C(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_AbilitiesPageTile(int32 EntryPoint);
	void HandleInputMethodChanged(bool bUsingGamepad);
	void Construct();
	void SetAbilityItemInfo(class UFortItem* SlottedAbilityItem);
	void UpdateKeyBinding();
	void SetAbilityPerkInfo(const struct FFortUIPerk& AbilityPerk);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AbilitiesPageTile_C">();
	}
	static class UAbilitiesPageTile_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilitiesPageTile_C>();
	}
};
static_assert(alignof(UAbilitiesPageTile_C) == 0x000008, "Wrong alignment on UAbilitiesPageTile_C");
static_assert(sizeof(UAbilitiesPageTile_C) == 0x000940, "Wrong size on UAbilitiesPageTile_C");
static_assert(offsetof(UAbilitiesPageTile_C, UberGraphFrame) == 0x000808, "Member 'UAbilitiesPageTile_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UAbilitiesPageTile_C, AbilityImage) == 0x000810, "Member 'UAbilitiesPageTile_C::AbilityImage' has a wrong offset!");
static_assert(offsetof(UAbilitiesPageTile_C, AbilityName) == 0x000818, "Member 'UAbilitiesPageTile_C::AbilityName' has a wrong offset!");
static_assert(offsetof(UAbilitiesPageTile_C, KeybindAbilityKeybind) == 0x000820, "Member 'UAbilitiesPageTile_C::KeybindAbilityKeybind' has a wrong offset!");
static_assert(offsetof(UAbilitiesPageTile_C, KeybindGamepadAbility1) == 0x000828, "Member 'UAbilitiesPageTile_C::KeybindGamepadAbility1' has a wrong offset!");
static_assert(offsetof(UAbilitiesPageTile_C, KeybindGamepadAbility2) == 0x000830, "Member 'UAbilitiesPageTile_C::KeybindGamepadAbility2' has a wrong offset!");
static_assert(offsetof(UAbilitiesPageTile_C, SizeBoxAbilityKeybind) == 0x000838, "Member 'UAbilitiesPageTile_C::SizeBoxAbilityKeybind' has a wrong offset!");
static_assert(offsetof(UAbilitiesPageTile_C, SwitcherAbilityBindingSwitcher) == 0x000840, "Member 'UAbilitiesPageTile_C::SwitcherAbilityBindingSwitcher' has a wrong offset!");
static_assert(offsetof(UAbilitiesPageTile_C, QuickBarSlot) == 0x000848, "Member 'UAbilitiesPageTile_C::QuickBarSlot' has a wrong offset!");
static_assert(offsetof(UAbilitiesPageTile_C, AbilityKit) == 0x000850, "Member 'UAbilitiesPageTile_C::AbilityKit' has a wrong offset!");
static_assert(offsetof(UAbilitiesPageTile_C, GadgetItemDef) == 0x000858, "Member 'UAbilitiesPageTile_C::GadgetItemDef' has a wrong offset!");
static_assert(offsetof(UAbilitiesPageTile_C, AbilityItem) == 0x000860, "Member 'UAbilitiesPageTile_C::AbilityItem' has a wrong offset!");
static_assert(offsetof(UAbilitiesPageTile_C, AbilityLocked) == 0x000868, "Member 'UAbilitiesPageTile_C::AbilityLocked' has a wrong offset!");
static_assert(offsetof(UAbilitiesPageTile_C, AbilityUIPerk) == 0x000870, "Member 'UAbilitiesPageTile_C::AbilityUIPerk' has a wrong offset!");
static_assert(offsetof(UAbilitiesPageTile_C, LockedColor) == 0x000908, "Member 'UAbilitiesPageTile_C::LockedColor' has a wrong offset!");
static_assert(offsetof(UAbilitiesPageTile_C, UnlockedColor) == 0x000918, "Member 'UAbilitiesPageTile_C::UnlockedColor' has a wrong offset!");
static_assert(offsetof(UAbilitiesPageTile_C, AbilityIconBrushSize) == 0x000928, "Member 'UAbilitiesPageTile_C::AbilityIconBrushSize' has a wrong offset!");
static_assert(offsetof(UAbilitiesPageTile_C, LockedAbilityIconColor) == 0x00092C, "Member 'UAbilitiesPageTile_C::LockedAbilityIconColor' has a wrong offset!");

}

