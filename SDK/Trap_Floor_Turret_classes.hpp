#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Trap_Floor_Turret

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Trap_Floor_Turret.Trap_Floor_Turret_C
// 0x0198 (0x1070 - 0x0ED8)
class ATrap_Floor_Turret_C : public ABuildingTrapFloor
{
public:
	uint8                                         Pad_ED8[0x8];                                      // 0x0ED8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0EE0(0x0008)(Transient, DuplicateTransient)
	class UStaticMeshComponent*                   S_Floor_DefenderSpawn;                             // 0x0EE8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               MuzzleFlashParticleComponent;                      // 0x0EF0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       SightRadiusSphereComponent;                        // 0x0EF8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Turret_Gun_Ammo_Counter;                        // 0x0F00(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Turret_Gun_Solo;                                // 0x0F08(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        FireDamageTraceOrigin;                             // 0x0F10(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Audio;                                             // 0x0F18(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        PlacementSoundLocation;                            // 0x0F20(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        ProximityTraceOrigin;                              // 0x0F28(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              Trap_Placed_Sound;                                 // 0x0F30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              Trap_Active_Sound;                                 // 0x0F38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              Trap_Fire_Sound;                                   // 0x0F40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              Trap_Reload_Sound;                                 // 0x0F48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              Trap_Explode_Sound;                                // 0x0F50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsActive;                                          // 0x0F58(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F59[0x3];                                      // 0x0F59(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumTicks;                                          // 0x0F5C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxTicks;                                          // 0x0F60(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AOE_Radius;                                        // 0x0F64(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      OverlapObjectTypes;                                // 0x0F68(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	struct FVector                                AOE_BoxExtents;                                    // 0x0F78(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                AOE_FireDamageBoxExtents;                          // 0x0F84(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             CampfireDousedSound;                               // 0x0F90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               InitialRelativeGunRotation;                        // 0x0F98(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         GunInterpSpeed;                                    // 0x0FA4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         YawRotationLimit;                                  // 0x0FA8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PitchRotationLimit;                                // 0x0FAC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RotationClampMax;                                  // 0x0FB0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDeployed;                                        // 0x0FB4(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_FB5[0x3];                                      // 0x0FB5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPawn*                              TargetPawnToTrack;                                 // 0x0FB8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FireTimer;                                         // 0x0FC0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FC4[0x4];                                      // 0x0FC4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FiringFunctionName;                                // 0x0FC8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 TargetAcquisitionFunctionName;                     // 0x0FD8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class AFortPawn*>                      PotentialTargets;                                  // 0x0FE8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	float                                         RangeSquared;                                      // 0x0FF8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetAcquisitionCheckTimer;                       // 0x0FFC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             DeploymentSound;                                   // 0x1000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SightRadius;                                       // 0x1008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RotationTimeDelta;                                 // 0x100C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FiringDotProductThreshold;                         // 0x1010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1014[0x4];                                     // 0x1014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   GunMuzzleSocketName;                               // 0x1018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  TC_SentryFireAbility;                              // 0x1020(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 TracerClass;                                       // 0x1040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitLocation;                                       // 0x1048(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Tracer_Scale;                                      // 0x1054(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             FiringSound;                                       // 0x1060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        ImpactEffect;                                      // 0x1068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_Trap_Floor_Turret(int32 EntryPoint);
	void GameplayCue_Impact_Physical(EGameplayCueEvent EventType, const struct FGameplayCueParameters& Parameters);
	void GameplayCue_Abilities_Activation_Generic_SentryGun(EGameplayCueEvent EventType, const struct FGameplayCueParameters& Parameters);
	void RotationTimer();
	void BndEvt__SightRadiusSphereComponent_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__SightRadiusSphereComponent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void TriggerLaunchEffects(class AFortPlayerPawnAthena* Pawn);
	void OnOutOfDurability();
	void GameplayCue_Abilities_Activation_Traps_ActivateTrap(EGameplayCueEvent EventType, const struct FGameplayCueParameters& Parameters);
	void GameplayCue_Abilities_Activation_Traps_ReloadBegin(EGameplayCueEvent EventType, const struct FGameplayCueParameters& Parameters);
	void OnFinishedBuilding();
	void OnPlaced();
	void OnReloadEnd();
	void UserConstructionScript();
	void PerformGunRotation(class AActor* LookAtActor, float DeltaTime);
	void CalcDesiredAngle(float InitialRelativeAngle, float CurrentRelativeAngle, float AngleOffset, float AngleClamp, float* DesiredAngle);
	void SetTrackingTarget(class AFortPawn* PawnToTrack);
	void ClearTargetAcquisitionTimer();
	void ClearFiringTimer();
	void SetFiringTimer();
	void AttemptAcquireTarget();
	void IsValidTarget(class AFortPawn* PotentialTarget, bool IncludeSimpleRangeCheck, bool IncludeObstructionCheck, bool* bValidTarget);
	void IsPawnInsideYawLimits(class AFortPawn* Pawn, bool* bInsideYawLimits);
	void IsPawnInsidePitchLimits(class AFortPawn* Pawn, bool* bInsideYawLimits);
	void SetTargetAcquisitionTimer();
	void OnRep_IsDeployed();
	void OnNewPotentialTargetTouched(class AFortPawn* PotentialTargetPawn);
	void OnPotentialTargetUntouched(class AFortPawn* UntouchedPotentialTarget);
	void AttemptFire();
	void SpawnTracer(const struct FVector& HitLocation_0);
	void ShouldFire(bool* ShouldFire_0);
	void SpawnImpactEffects(const struct FVector& HitLocation_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Trap_Floor_Turret_C">();
	}
	static class ATrap_Floor_Turret_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ATrap_Floor_Turret_C>();
	}
};
static_assert(alignof(ATrap_Floor_Turret_C) == 0x000008, "Wrong alignment on ATrap_Floor_Turret_C");
static_assert(sizeof(ATrap_Floor_Turret_C) == 0x001070, "Wrong size on ATrap_Floor_Turret_C");
static_assert(offsetof(ATrap_Floor_Turret_C, UberGraphFrame) == 0x000EE0, "Member 'ATrap_Floor_Turret_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_Turret_C, S_Floor_DefenderSpawn) == 0x000EE8, "Member 'ATrap_Floor_Turret_C::S_Floor_DefenderSpawn' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_Turret_C, MuzzleFlashParticleComponent) == 0x000EF0, "Member 'ATrap_Floor_Turret_C::MuzzleFlashParticleComponent' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_Turret_C, SightRadiusSphereComponent) == 0x000EF8, "Member 'ATrap_Floor_Turret_C::SightRadiusSphereComponent' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_Turret_C, SM_Turret_Gun_Ammo_Counter) == 0x000F00, "Member 'ATrap_Floor_Turret_C::SM_Turret_Gun_Ammo_Counter' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_Turret_C, SM_Turret_Gun_Solo) == 0x000F08, "Member 'ATrap_Floor_Turret_C::SM_Turret_Gun_Solo' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_Turret_C, FireDamageTraceOrigin) == 0x000F10, "Member 'ATrap_Floor_Turret_C::FireDamageTraceOrigin' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_Turret_C, Audio) == 0x000F18, "Member 'ATrap_Floor_Turret_C::Audio' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_Turret_C, PlacementSoundLocation) == 0x000F20, "Member 'ATrap_Floor_Turret_C::PlacementSoundLocation' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_Turret_C, ProximityTraceOrigin) == 0x000F28, "Member 'ATrap_Floor_Turret_C::ProximityTraceOrigin' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_Turret_C, Trap_Placed_Sound) == 0x000F30, "Member 'ATrap_Floor_Turret_C::Trap_Placed_Sound' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_Turret_C, Trap_Active_Sound) == 0x000F38, "Member 'ATrap_Floor_Turret_C::Trap_Active_Sound' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_Turret_C, Trap_Fire_Sound) == 0x000F40, "Member 'ATrap_Floor_Turret_C::Trap_Fire_Sound' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_Turret_C, Trap_Reload_Sound) == 0x000F48, "Member 'ATrap_Floor_Turret_C::Trap_Reload_Sound' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_Turret_C, Trap_Explode_Sound) == 0x000F50, "Member 'ATrap_Floor_Turret_C::Trap_Explode_Sound' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_Turret_C, IsActive) == 0x000F58, "Member 'ATrap_Floor_Turret_C::IsActive' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_Turret_C, NumTicks) == 0x000F5C, "Member 'ATrap_Floor_Turret_C::NumTicks' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_Turret_C, MaxTicks) == 0x000F60, "Member 'ATrap_Floor_Turret_C::MaxTicks' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_Turret_C, AOE_Radius) == 0x000F64, "Member 'ATrap_Floor_Turret_C::AOE_Radius' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_Turret_C, OverlapObjectTypes) == 0x000F68, "Member 'ATrap_Floor_Turret_C::OverlapObjectTypes' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_Turret_C, AOE_BoxExtents) == 0x000F78, "Member 'ATrap_Floor_Turret_C::AOE_BoxExtents' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_Turret_C, AOE_FireDamageBoxExtents) == 0x000F84, "Member 'ATrap_Floor_Turret_C::AOE_FireDamageBoxExtents' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_Turret_C, CampfireDousedSound) == 0x000F90, "Member 'ATrap_Floor_Turret_C::CampfireDousedSound' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_Turret_C, InitialRelativeGunRotation) == 0x000F98, "Member 'ATrap_Floor_Turret_C::InitialRelativeGunRotation' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_Turret_C, GunInterpSpeed) == 0x000FA4, "Member 'ATrap_Floor_Turret_C::GunInterpSpeed' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_Turret_C, YawRotationLimit) == 0x000FA8, "Member 'ATrap_Floor_Turret_C::YawRotationLimit' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_Turret_C, PitchRotationLimit) == 0x000FAC, "Member 'ATrap_Floor_Turret_C::PitchRotationLimit' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_Turret_C, RotationClampMax) == 0x000FB0, "Member 'ATrap_Floor_Turret_C::RotationClampMax' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_Turret_C, IsDeployed) == 0x000FB4, "Member 'ATrap_Floor_Turret_C::IsDeployed' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_Turret_C, TargetPawnToTrack) == 0x000FB8, "Member 'ATrap_Floor_Turret_C::TargetPawnToTrack' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_Turret_C, FireTimer) == 0x000FC0, "Member 'ATrap_Floor_Turret_C::FireTimer' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_Turret_C, FiringFunctionName) == 0x000FC8, "Member 'ATrap_Floor_Turret_C::FiringFunctionName' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_Turret_C, TargetAcquisitionFunctionName) == 0x000FD8, "Member 'ATrap_Floor_Turret_C::TargetAcquisitionFunctionName' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_Turret_C, PotentialTargets) == 0x000FE8, "Member 'ATrap_Floor_Turret_C::PotentialTargets' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_Turret_C, RangeSquared) == 0x000FF8, "Member 'ATrap_Floor_Turret_C::RangeSquared' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_Turret_C, TargetAcquisitionCheckTimer) == 0x000FFC, "Member 'ATrap_Floor_Turret_C::TargetAcquisitionCheckTimer' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_Turret_C, DeploymentSound) == 0x001000, "Member 'ATrap_Floor_Turret_C::DeploymentSound' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_Turret_C, SightRadius) == 0x001008, "Member 'ATrap_Floor_Turret_C::SightRadius' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_Turret_C, RotationTimeDelta) == 0x00100C, "Member 'ATrap_Floor_Turret_C::RotationTimeDelta' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_Turret_C, FiringDotProductThreshold) == 0x001010, "Member 'ATrap_Floor_Turret_C::FiringDotProductThreshold' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_Turret_C, GunMuzzleSocketName) == 0x001018, "Member 'ATrap_Floor_Turret_C::GunMuzzleSocketName' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_Turret_C, TC_SentryFireAbility) == 0x001020, "Member 'ATrap_Floor_Turret_C::TC_SentryFireAbility' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_Turret_C, TracerClass) == 0x001040, "Member 'ATrap_Floor_Turret_C::TracerClass' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_Turret_C, HitLocation) == 0x001048, "Member 'ATrap_Floor_Turret_C::HitLocation' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_Turret_C, Tracer_Scale) == 0x001054, "Member 'ATrap_Floor_Turret_C::Tracer_Scale' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_Turret_C, FiringSound) == 0x001060, "Member 'ATrap_Floor_Turret_C::FiringSound' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_Turret_C, ImpactEffect) == 0x001068, "Member 'ATrap_Floor_Turret_C::ImpactEffect' has a wrong offset!");

}

