#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_Assault_M4A1_Athena

#include "Basic.hpp"


namespace SDK::Params
{

// Function B_Assault_M4A1_Athena.B_Assault_M4A1_Athena_C.ExecuteUbergraph_B_Assault_M4A1_Athena
// 0x000C (0x000C - 0x0000)
struct B_Assault_M4A1_Athena_C_ExecuteUbergraph_B_Assault_M4A1_Athena final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bNewIsTargeting;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(B_Assault_M4A1_Athena_C_ExecuteUbergraph_B_Assault_M4A1_Athena) == 0x000004, "Wrong alignment on B_Assault_M4A1_Athena_C_ExecuteUbergraph_B_Assault_M4A1_Athena");
static_assert(sizeof(B_Assault_M4A1_Athena_C_ExecuteUbergraph_B_Assault_M4A1_Athena) == 0x00000C, "Wrong size on B_Assault_M4A1_Athena_C_ExecuteUbergraph_B_Assault_M4A1_Athena");
static_assert(offsetof(B_Assault_M4A1_Athena_C_ExecuteUbergraph_B_Assault_M4A1_Athena, EntryPoint) == 0x000000, "Member 'B_Assault_M4A1_Athena_C_ExecuteUbergraph_B_Assault_M4A1_Athena::EntryPoint' has a wrong offset!");
static_assert(offsetof(B_Assault_M4A1_Athena_C_ExecuteUbergraph_B_Assault_M4A1_Athena, K2Node_Event_DeltaSeconds) == 0x000004, "Member 'B_Assault_M4A1_Athena_C_ExecuteUbergraph_B_Assault_M4A1_Athena::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(B_Assault_M4A1_Athena_C_ExecuteUbergraph_B_Assault_M4A1_Athena, K2Node_Event_bNewIsTargeting) == 0x000008, "Member 'B_Assault_M4A1_Athena_C_ExecuteUbergraph_B_Assault_M4A1_Athena::K2Node_Event_bNewIsTargeting' has a wrong offset!");

// Function B_Assault_M4A1_Athena.B_Assault_M4A1_Athena_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct B_Assault_M4A1_Athena_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Assault_M4A1_Athena_C_ReceiveTick) == 0x000004, "Wrong alignment on B_Assault_M4A1_Athena_C_ReceiveTick");
static_assert(sizeof(B_Assault_M4A1_Athena_C_ReceiveTick) == 0x000004, "Wrong size on B_Assault_M4A1_Athena_C_ReceiveTick");
static_assert(offsetof(B_Assault_M4A1_Athena_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'B_Assault_M4A1_Athena_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function B_Assault_M4A1_Athena.B_Assault_M4A1_Athena_C.OnSetTargeting
// 0x0001 (0x0001 - 0x0000)
struct B_Assault_M4A1_Athena_C_OnSetTargeting final
{
public:
	bool                                          bNewIsTargeting;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(B_Assault_M4A1_Athena_C_OnSetTargeting) == 0x000001, "Wrong alignment on B_Assault_M4A1_Athena_C_OnSetTargeting");
static_assert(sizeof(B_Assault_M4A1_Athena_C_OnSetTargeting) == 0x000001, "Wrong size on B_Assault_M4A1_Athena_C_OnSetTargeting");
static_assert(offsetof(B_Assault_M4A1_Athena_C_OnSetTargeting, bNewIsTargeting) == 0x000000, "Member 'B_Assault_M4A1_Athena_C_OnSetTargeting::bNewIsTargeting' has a wrong offset!");

}

