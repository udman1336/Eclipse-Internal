#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ChallengeBundlePage

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "UMG_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function ChallengeBundlePage.ChallengeBundlePage_C.ExecuteUbergraph_ChallengeBundlePage
// 0x0028 (0x0028 - 0x0000)
struct ChallengeBundlePage_C_ExecuteUbergraph_ChallengeBundlePage final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable1;                               // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonButton*                          K2Node_ComponentBoundEvent_Button12;               // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCommonButton*                          K2Node_ComponentBoundEvent_Button1;                // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCommonButton*                          K2Node_ComponentBoundEvent_Button;                 // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HandleBack_PassThrough;                   // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBROnly_ReturnValue;                     // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ChallengeBundlePage_C_ExecuteUbergraph_ChallengeBundlePage) == 0x000008, "Wrong alignment on ChallengeBundlePage_C_ExecuteUbergraph_ChallengeBundlePage");
static_assert(sizeof(ChallengeBundlePage_C_ExecuteUbergraph_ChallengeBundlePage) == 0x000028, "Wrong size on ChallengeBundlePage_C_ExecuteUbergraph_ChallengeBundlePage");
static_assert(offsetof(ChallengeBundlePage_C_ExecuteUbergraph_ChallengeBundlePage, EntryPoint) == 0x000000, "Member 'ChallengeBundlePage_C_ExecuteUbergraph_ChallengeBundlePage::EntryPoint' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_ExecuteUbergraph_ChallengeBundlePage, Temp_bool_Variable) == 0x000004, "Member 'ChallengeBundlePage_C_ExecuteUbergraph_ChallengeBundlePage::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_ExecuteUbergraph_ChallengeBundlePage, Temp_byte_Variable) == 0x000005, "Member 'ChallengeBundlePage_C_ExecuteUbergraph_ChallengeBundlePage::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_ExecuteUbergraph_ChallengeBundlePage, Temp_byte_Variable1) == 0x000006, "Member 'ChallengeBundlePage_C_ExecuteUbergraph_ChallengeBundlePage::Temp_byte_Variable1' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_ExecuteUbergraph_ChallengeBundlePage, K2Node_ComponentBoundEvent_Button12) == 0x000008, "Member 'ChallengeBundlePage_C_ExecuteUbergraph_ChallengeBundlePage::K2Node_ComponentBoundEvent_Button12' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_ExecuteUbergraph_ChallengeBundlePage, K2Node_ComponentBoundEvent_Button1) == 0x000010, "Member 'ChallengeBundlePage_C_ExecuteUbergraph_ChallengeBundlePage::K2Node_ComponentBoundEvent_Button1' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_ExecuteUbergraph_ChallengeBundlePage, K2Node_ComponentBoundEvent_Button) == 0x000018, "Member 'ChallengeBundlePage_C_ExecuteUbergraph_ChallengeBundlePage::K2Node_ComponentBoundEvent_Button' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_ExecuteUbergraph_ChallengeBundlePage, CallFunc_HandleBack_PassThrough) == 0x000020, "Member 'ChallengeBundlePage_C_ExecuteUbergraph_ChallengeBundlePage::CallFunc_HandleBack_PassThrough' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_ExecuteUbergraph_ChallengeBundlePage, CallFunc_IsBROnly_ReturnValue) == 0x000021, "Member 'ChallengeBundlePage_C_ExecuteUbergraph_ChallengeBundlePage::CallFunc_IsBROnly_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_ExecuteUbergraph_ChallengeBundlePage, K2Node_Select_Default) == 0x000022, "Member 'ChallengeBundlePage_C_ExecuteUbergraph_ChallengeBundlePage::K2Node_Select_Default' has a wrong offset!");

// Function ChallengeBundlePage.ChallengeBundlePage_C.BndEvt__PanelButton_K2Node_ComponentBoundEvent_16_CommonButtonClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct ChallengeBundlePage_C_BndEvt__PanelButton_K2Node_ComponentBoundEvent_16_CommonButtonClicked__DelegateSignature final
{
public:
	class UCommonButton*                          Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ChallengeBundlePage_C_BndEvt__PanelButton_K2Node_ComponentBoundEvent_16_CommonButtonClicked__DelegateSignature) == 0x000008, "Wrong alignment on ChallengeBundlePage_C_BndEvt__PanelButton_K2Node_ComponentBoundEvent_16_CommonButtonClicked__DelegateSignature");
static_assert(sizeof(ChallengeBundlePage_C_BndEvt__PanelButton_K2Node_ComponentBoundEvent_16_CommonButtonClicked__DelegateSignature) == 0x000008, "Wrong size on ChallengeBundlePage_C_BndEvt__PanelButton_K2Node_ComponentBoundEvent_16_CommonButtonClicked__DelegateSignature");
static_assert(offsetof(ChallengeBundlePage_C_BndEvt__PanelButton_K2Node_ComponentBoundEvent_16_CommonButtonClicked__DelegateSignature, Button) == 0x000000, "Member 'ChallengeBundlePage_C_BndEvt__PanelButton_K2Node_ComponentBoundEvent_16_CommonButtonClicked__DelegateSignature::Button' has a wrong offset!");

// Function ChallengeBundlePage.ChallengeBundlePage_C.BndEvt__PageNextButton_K2Node_ComponentBoundEvent_18_CommonButtonClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct ChallengeBundlePage_C_BndEvt__PageNextButton_K2Node_ComponentBoundEvent_18_CommonButtonClicked__DelegateSignature final
{
public:
	class UCommonButton*                          Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ChallengeBundlePage_C_BndEvt__PageNextButton_K2Node_ComponentBoundEvent_18_CommonButtonClicked__DelegateSignature) == 0x000008, "Wrong alignment on ChallengeBundlePage_C_BndEvt__PageNextButton_K2Node_ComponentBoundEvent_18_CommonButtonClicked__DelegateSignature");
static_assert(sizeof(ChallengeBundlePage_C_BndEvt__PageNextButton_K2Node_ComponentBoundEvent_18_CommonButtonClicked__DelegateSignature) == 0x000008, "Wrong size on ChallengeBundlePage_C_BndEvt__PageNextButton_K2Node_ComponentBoundEvent_18_CommonButtonClicked__DelegateSignature");
static_assert(offsetof(ChallengeBundlePage_C_BndEvt__PageNextButton_K2Node_ComponentBoundEvent_18_CommonButtonClicked__DelegateSignature, Button) == 0x000000, "Member 'ChallengeBundlePage_C_BndEvt__PageNextButton_K2Node_ComponentBoundEvent_18_CommonButtonClicked__DelegateSignature::Button' has a wrong offset!");

// Function ChallengeBundlePage.ChallengeBundlePage_C.BndEvt__PagePreviousButton_K2Node_ComponentBoundEvent_1_CommonButtonClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct ChallengeBundlePage_C_BndEvt__PagePreviousButton_K2Node_ComponentBoundEvent_1_CommonButtonClicked__DelegateSignature final
{
public:
	class UCommonButton*                          Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ChallengeBundlePage_C_BndEvt__PagePreviousButton_K2Node_ComponentBoundEvent_1_CommonButtonClicked__DelegateSignature) == 0x000008, "Wrong alignment on ChallengeBundlePage_C_BndEvt__PagePreviousButton_K2Node_ComponentBoundEvent_1_CommonButtonClicked__DelegateSignature");
static_assert(sizeof(ChallengeBundlePage_C_BndEvt__PagePreviousButton_K2Node_ComponentBoundEvent_1_CommonButtonClicked__DelegateSignature) == 0x000008, "Wrong size on ChallengeBundlePage_C_BndEvt__PagePreviousButton_K2Node_ComponentBoundEvent_1_CommonButtonClicked__DelegateSignature");
static_assert(offsetof(ChallengeBundlePage_C_BndEvt__PagePreviousButton_K2Node_ComponentBoundEvent_1_CommonButtonClicked__DelegateSignature, Button) == 0x000000, "Member 'ChallengeBundlePage_C_BndEvt__PagePreviousButton_K2Node_ComponentBoundEvent_1_CommonButtonClicked__DelegateSignature::Button' has a wrong offset!");

// Function ChallengeBundlePage.ChallengeBundlePage_C.UpdateBundle
// 0x0140 (0x0140 - 0x0000)
struct ChallengeBundlePage_C_UpdateBundle final
{
public:
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable1;                               // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortChallengeBundleInfo*               CallFunc_GetChallengeBundleInfo_ReturnValue;       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetAchievedCount_OutTotalAchievedCount;   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetAchievedCount_OutTotalRequiredCount;   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAchievedCount_OutAchievedPercent;      // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAchievedCount_OutThresholdPercent;     // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsRewardThresholdAchieved_ReturnValue;    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_BoolToInt_ReturnValue;               // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasSiblingBundles_ReturnValue;            // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortItem*                              CallFunc_CreateTemporaryItemInstanceBP_ReturnValue; // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortFrontEndContext*                   CallFunc_GetContext_ReturnValue;                   // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortFrontEndContext*                   CallFunc_GetContext_ReturnValue1;                  // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortChallengeBundleInfo*               CallFunc_GetChallengeBundleInfo_ReturnValue1;      // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortItem*                              CallFunc_GetRewardItem_ReturnValue;                // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_IsUnlocked_LockedReason;                  // 0x0060(0x0018)()
	bool                                          CallFunc_IsUnlocked_ReturnValue;                   // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_TextToUpper_ReturnValue;                  // 0x0080(0x0018)()
	class UFortChallengeBundleItemDefinition*     CallFunc_GetBundleDefinition_ReturnValue;          // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetDisplayName_ReturnValue;               // 0x00A0(0x0018)()
	int32                                         CallFunc_GetRewardCompletionThreshold_ReturnValue; // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_TextToUpper_ReturnValue1;                 // 0x00C0(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x00D8(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0118(0x0010)(ZeroConstructor, ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0128(0x0018)()
};
static_assert(alignof(ChallengeBundlePage_C_UpdateBundle) == 0x000008, "Wrong alignment on ChallengeBundlePage_C_UpdateBundle");
static_assert(sizeof(ChallengeBundlePage_C_UpdateBundle) == 0x000140, "Wrong size on ChallengeBundlePage_C_UpdateBundle");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, Temp_byte_Variable) == 0x000000, "Member 'ChallengeBundlePage_C_UpdateBundle::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, Temp_byte_Variable1) == 0x000001, "Member 'ChallengeBundlePage_C_UpdateBundle::Temp_byte_Variable1' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, CallFunc_GetChallengeBundleInfo_ReturnValue) == 0x000008, "Member 'ChallengeBundlePage_C_UpdateBundle::CallFunc_GetChallengeBundleInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, CallFunc_GetAchievedCount_OutTotalAchievedCount) == 0x000010, "Member 'ChallengeBundlePage_C_UpdateBundle::CallFunc_GetAchievedCount_OutTotalAchievedCount' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, CallFunc_GetAchievedCount_OutTotalRequiredCount) == 0x000014, "Member 'ChallengeBundlePage_C_UpdateBundle::CallFunc_GetAchievedCount_OutTotalRequiredCount' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, CallFunc_GetAchievedCount_OutAchievedPercent) == 0x000018, "Member 'ChallengeBundlePage_C_UpdateBundle::CallFunc_GetAchievedCount_OutAchievedPercent' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, CallFunc_GetAchievedCount_OutThresholdPercent) == 0x00001C, "Member 'ChallengeBundlePage_C_UpdateBundle::CallFunc_GetAchievedCount_OutThresholdPercent' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, CallFunc_IsRewardThresholdAchieved_ReturnValue) == 0x000020, "Member 'ChallengeBundlePage_C_UpdateBundle::CallFunc_IsRewardThresholdAchieved_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, CallFunc_Conv_BoolToInt_ReturnValue) == 0x000024, "Member 'ChallengeBundlePage_C_UpdateBundle::CallFunc_Conv_BoolToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, CallFunc_HasSiblingBundles_ReturnValue) == 0x000028, "Member 'ChallengeBundlePage_C_UpdateBundle::CallFunc_HasSiblingBundles_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, Temp_bool_Variable) == 0x000029, "Member 'ChallengeBundlePage_C_UpdateBundle::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, CallFunc_CreateTemporaryItemInstanceBP_ReturnValue) == 0x000030, "Member 'ChallengeBundlePage_C_UpdateBundle::CallFunc_CreateTemporaryItemInstanceBP_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, K2Node_Select_Default) == 0x000038, "Member 'ChallengeBundlePage_C_UpdateBundle::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, CallFunc_GetContext_ReturnValue) == 0x000040, "Member 'ChallengeBundlePage_C_UpdateBundle::CallFunc_GetContext_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, CallFunc_GetContext_ReturnValue1) == 0x000048, "Member 'ChallengeBundlePage_C_UpdateBundle::CallFunc_GetContext_ReturnValue1' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, CallFunc_GetChallengeBundleInfo_ReturnValue1) == 0x000050, "Member 'ChallengeBundlePage_C_UpdateBundle::CallFunc_GetChallengeBundleInfo_ReturnValue1' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, CallFunc_GetRewardItem_ReturnValue) == 0x000058, "Member 'ChallengeBundlePage_C_UpdateBundle::CallFunc_GetRewardItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, CallFunc_IsUnlocked_LockedReason) == 0x000060, "Member 'ChallengeBundlePage_C_UpdateBundle::CallFunc_IsUnlocked_LockedReason' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, CallFunc_IsUnlocked_ReturnValue) == 0x000078, "Member 'ChallengeBundlePage_C_UpdateBundle::CallFunc_IsUnlocked_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, CallFunc_TextToUpper_ReturnValue) == 0x000080, "Member 'ChallengeBundlePage_C_UpdateBundle::CallFunc_TextToUpper_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, CallFunc_GetBundleDefinition_ReturnValue) == 0x000098, "Member 'ChallengeBundlePage_C_UpdateBundle::CallFunc_GetBundleDefinition_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, CallFunc_GetDisplayName_ReturnValue) == 0x0000A0, "Member 'ChallengeBundlePage_C_UpdateBundle::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, CallFunc_GetRewardCompletionThreshold_ReturnValue) == 0x0000B8, "Member 'ChallengeBundlePage_C_UpdateBundle::CallFunc_GetRewardCompletionThreshold_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, CallFunc_TextToUpper_ReturnValue1) == 0x0000C0, "Member 'ChallengeBundlePage_C_UpdateBundle::CallFunc_TextToUpper_ReturnValue1' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, K2Node_MakeStruct_FormatArgumentData) == 0x0000D8, "Member 'ChallengeBundlePage_C_UpdateBundle::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, K2Node_MakeArray_Array) == 0x000118, "Member 'ChallengeBundlePage_C_UpdateBundle::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, CallFunc_Format_ReturnValue) == 0x000128, "Member 'ChallengeBundlePage_C_UpdateBundle::CallFunc_Format_ReturnValue' has a wrong offset!");

// Function ChallengeBundlePage.ChallengeBundlePage_C.UpdateQuests
// 0x00A0 (0x00A0 - 0x0000)
struct ChallengeBundlePage_C_UpdateQuests final
{
public:
	bool                                          bHasQuestsToClaim;                                 // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable1;                               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable1;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortChallengeBundleInfo*               CallFunc_GetChallengeBundleInfo_ReturnValue;       // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortChallengeBundleItemDefinition*     CallFunc_GetBundleDefinition_ReturnValue;          // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable1;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue1;                  // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortGlobalUIContext*                   CallFunc_GetContext_ReturnValue;                   // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortQuestManager*                      CallFunc_GetQuestManager_ReturnValue;              // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UFortQuestItem*>                 CallFunc_GetQuests_OwnedQuests;                    // 0x0048(0x0010)(ZeroConstructor, ReferenceParm)
	TArray<class UFortQuestItemDefinition*>       CallFunc_GetQuests_UnownedQuests;                  // 0x0058(0x0010)(ZeroConstructor, ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortQuestItemDefinition*               CallFunc_Array_Get_Item;                           // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue1;                // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortQuestItem*                         CallFunc_Array_Get_Item1;                          // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue1;                 // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortQuestItemDefinition*               CallFunc_GetQuestDefinitionBP_ReturnValue;         // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFortQuestState                               CallFunc_GetQuestState_ReturnValue;                // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ChallengeBundlePage_C_UpdateQuests) == 0x000008, "Wrong alignment on ChallengeBundlePage_C_UpdateQuests");
static_assert(sizeof(ChallengeBundlePage_C_UpdateQuests) == 0x0000A0, "Wrong size on ChallengeBundlePage_C_UpdateQuests");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuests, bHasQuestsToClaim) == 0x000000, "Member 'ChallengeBundlePage_C_UpdateQuests::bHasQuestsToClaim' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuests, Temp_byte_Variable) == 0x000001, "Member 'ChallengeBundlePage_C_UpdateQuests::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuests, Temp_int_Array_Index_Variable) == 0x000004, "Member 'ChallengeBundlePage_C_UpdateQuests::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuests, Temp_byte_Variable1) == 0x000008, "Member 'ChallengeBundlePage_C_UpdateQuests::Temp_byte_Variable1' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuests, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'ChallengeBundlePage_C_UpdateQuests::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuests, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'ChallengeBundlePage_C_UpdateQuests::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuests, Temp_int_Array_Index_Variable1) == 0x000014, "Member 'ChallengeBundlePage_C_UpdateQuests::Temp_int_Array_Index_Variable1' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuests, CallFunc_GetChallengeBundleInfo_ReturnValue) == 0x000018, "Member 'ChallengeBundlePage_C_UpdateQuests::CallFunc_GetChallengeBundleInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuests, CallFunc_GetBundleDefinition_ReturnValue) == 0x000020, "Member 'ChallengeBundlePage_C_UpdateQuests::CallFunc_GetBundleDefinition_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuests, Temp_bool_Variable) == 0x000028, "Member 'ChallengeBundlePage_C_UpdateQuests::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuests, Temp_int_Loop_Counter_Variable1) == 0x00002C, "Member 'ChallengeBundlePage_C_UpdateQuests::Temp_int_Loop_Counter_Variable1' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuests, CallFunc_Add_IntInt_ReturnValue1) == 0x000030, "Member 'ChallengeBundlePage_C_UpdateQuests::CallFunc_Add_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuests, K2Node_Select_Default) == 0x000034, "Member 'ChallengeBundlePage_C_UpdateQuests::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuests, CallFunc_GetContext_ReturnValue) == 0x000038, "Member 'ChallengeBundlePage_C_UpdateQuests::CallFunc_GetContext_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuests, CallFunc_GetQuestManager_ReturnValue) == 0x000040, "Member 'ChallengeBundlePage_C_UpdateQuests::CallFunc_GetQuestManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuests, CallFunc_GetQuests_OwnedQuests) == 0x000048, "Member 'ChallengeBundlePage_C_UpdateQuests::CallFunc_GetQuests_OwnedQuests' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuests, CallFunc_GetQuests_UnownedQuests) == 0x000058, "Member 'ChallengeBundlePage_C_UpdateQuests::CallFunc_GetQuests_UnownedQuests' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuests, CallFunc_Array_Length_ReturnValue) == 0x000068, "Member 'ChallengeBundlePage_C_UpdateQuests::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuests, CallFunc_Array_Get_Item) == 0x000070, "Member 'ChallengeBundlePage_C_UpdateQuests::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuests, CallFunc_Less_IntInt_ReturnValue) == 0x000078, "Member 'ChallengeBundlePage_C_UpdateQuests::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuests, CallFunc_Array_Length_ReturnValue1) == 0x00007C, "Member 'ChallengeBundlePage_C_UpdateQuests::CallFunc_Array_Length_ReturnValue1' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuests, CallFunc_Array_Get_Item1) == 0x000080, "Member 'ChallengeBundlePage_C_UpdateQuests::CallFunc_Array_Get_Item1' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuests, CallFunc_Less_IntInt_ReturnValue1) == 0x000088, "Member 'ChallengeBundlePage_C_UpdateQuests::CallFunc_Less_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuests, CallFunc_GetQuestDefinitionBP_ReturnValue) == 0x000090, "Member 'ChallengeBundlePage_C_UpdateQuests::CallFunc_GetQuestDefinitionBP_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuests, CallFunc_GetQuestState_ReturnValue) == 0x000098, "Member 'ChallengeBundlePage_C_UpdateQuests::CallFunc_GetQuestState_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuests, K2Node_SwitchEnum_CmpSuccess) == 0x000099, "Member 'ChallengeBundlePage_C_UpdateQuests::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function ChallengeBundlePage.ChallengeBundlePage_C.RegisterEventListeners
// 0x0040 (0x0040 - 0x0000)
struct ChallengeBundlePage_C_RegisterEventListeners final
{
public:
	TDelegate<void(bool* bPassThrough)>           K2Node_CreateDelegate_OutputDelegate;              // 0x0000(0x0010)(ZeroConstructor, NoDestructor)
	struct FDataTableRowHandle                    K2Node_MakeStruct_DataTableRowHandle;              // 0x0010(0x0010)(NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate1;             // 0x0020(0x0010)(ZeroConstructor, NoDestructor)
	class UFortGlobalUIContext*                   CallFunc_GetContext_ReturnValue;                   // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortQuestManager*                      CallFunc_GetQuestManager_ReturnValue;              // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ChallengeBundlePage_C_RegisterEventListeners) == 0x000008, "Wrong alignment on ChallengeBundlePage_C_RegisterEventListeners");
static_assert(sizeof(ChallengeBundlePage_C_RegisterEventListeners) == 0x000040, "Wrong size on ChallengeBundlePage_C_RegisterEventListeners");
static_assert(offsetof(ChallengeBundlePage_C_RegisterEventListeners, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'ChallengeBundlePage_C_RegisterEventListeners::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_RegisterEventListeners, K2Node_MakeStruct_DataTableRowHandle) == 0x000010, "Member 'ChallengeBundlePage_C_RegisterEventListeners::K2Node_MakeStruct_DataTableRowHandle' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_RegisterEventListeners, K2Node_CreateDelegate_OutputDelegate1) == 0x000020, "Member 'ChallengeBundlePage_C_RegisterEventListeners::K2Node_CreateDelegate_OutputDelegate1' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_RegisterEventListeners, CallFunc_GetContext_ReturnValue) == 0x000030, "Member 'ChallengeBundlePage_C_RegisterEventListeners::CallFunc_GetContext_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_RegisterEventListeners, CallFunc_GetQuestManager_ReturnValue) == 0x000038, "Member 'ChallengeBundlePage_C_RegisterEventListeners::CallFunc_GetQuestManager_ReturnValue' has a wrong offset!");

// Function ChallengeBundlePage.ChallengeBundlePage_C.CreateQuestWidget
// 0x0028 (0x0028 - 0x0000)
struct ChallengeBundlePage_C_CreateQuestWidget final
{
public:
	class UFortQuestItem*                         Quest;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortQuestItemDefinition*               QuestDefinition;                                   // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UChallengeQuestWidget_C*                CallFunc_Create_ReturnValue;                       // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPanelSlot*                             CallFunc_AddChild_ReturnValue;                     // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ChallengeBundlePage_C_CreateQuestWidget) == 0x000008, "Wrong alignment on ChallengeBundlePage_C_CreateQuestWidget");
static_assert(sizeof(ChallengeBundlePage_C_CreateQuestWidget) == 0x000028, "Wrong size on ChallengeBundlePage_C_CreateQuestWidget");
static_assert(offsetof(ChallengeBundlePage_C_CreateQuestWidget, Quest) == 0x000000, "Member 'ChallengeBundlePage_C_CreateQuestWidget::Quest' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_CreateQuestWidget, QuestDefinition) == 0x000008, "Member 'ChallengeBundlePage_C_CreateQuestWidget::QuestDefinition' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_CreateQuestWidget, CallFunc_GetOwningPlayer_ReturnValue) == 0x000010, "Member 'ChallengeBundlePage_C_CreateQuestWidget::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_CreateQuestWidget, CallFunc_Create_ReturnValue) == 0x000018, "Member 'ChallengeBundlePage_C_CreateQuestWidget::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_CreateQuestWidget, CallFunc_AddChild_ReturnValue) == 0x000020, "Member 'ChallengeBundlePage_C_CreateQuestWidget::CallFunc_AddChild_ReturnValue' has a wrong offset!");

// Function ChallengeBundlePage.ChallengeBundlePage_C.HandleBack
// 0x0010 (0x0010 - 0x0000)
struct ChallengeBundlePage_C_HandleBack final
{
public:
	bool                                          Passthrough;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortUIManagerWidget_NUI*               CallFunc_GetUIManagerWidget_ReturnValue;           // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ChallengeBundlePage_C_HandleBack) == 0x000008, "Wrong alignment on ChallengeBundlePage_C_HandleBack");
static_assert(sizeof(ChallengeBundlePage_C_HandleBack) == 0x000010, "Wrong size on ChallengeBundlePage_C_HandleBack");
static_assert(offsetof(ChallengeBundlePage_C_HandleBack, Passthrough) == 0x000000, "Member 'ChallengeBundlePage_C_HandleBack::Passthrough' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_HandleBack, CallFunc_GetUIManagerWidget_ReturnValue) == 0x000008, "Member 'ChallengeBundlePage_C_HandleBack::CallFunc_GetUIManagerWidget_ReturnValue' has a wrong offset!");

}

