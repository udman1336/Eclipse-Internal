#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_Weapon_M80

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_Weapon_M80.GA_Weapon_M80_C
// 0x02A8 (0x0D90 - 0x0AE8)
class UGA_Weapon_M80_C final : public UFortGameplayAbility
{
public:
	uint8                                         Pad_AE8[0x8];                                      // 0x0AE8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0AF0(0x0008)(Transient, DuplicateTransient)
	class UClass*                                 Prj_M80;                                           // 0x0AF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPawn*                              PlayerPawn;                                        // 0x0B00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TransformOffsetA1;                                 // 0x0B08(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TransformOffsetB1;                                 // 0x0B14(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NegHorizontalSpread1;                              // 0x0B20(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PosHorizontalSpread1;                              // 0x0B24(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                StartLocation;                                     // 0x0B28(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InitialSpeed;                                      // 0x0B34(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         M80Gravity;                                        // 0x0B38(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               StartRotation;                                     // 0x0B3C(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameplayTag                           EventComplete;                                     // 0x0B48(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           EventActivation;                                   // 0x0B50(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FFortAbilityTargetSelection            T_Explosion;                                       // 0x0B58(0x00F8)(Edit, BlueprintVisible, DisableEditOnInstance)
	class USoundBase*                             ActivationSound;                                   // 0x0C50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayEventData                     EventData;                                         // 0x0C58(0x00A8)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         Vertical_Throw;                                    // 0x0D00(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Anm_PlayRate;                                      // 0x0D04(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFortGameplayEffectContainerSpec       EC_Explode_Return;                                 // 0x0D08(0x0080)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           EC_Explode;                                        // 0x0D88(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_GA_Weapon_M80(int32 EntryPoint);
	void K2_ActivateAbility();
	void Created_4DCEF0C249251A8D551D83AC1D03811D(const struct FProjectileEventData& ProjectileData);
	void Touched_4DCEF0C249251A8D551D83AC1D03811D(const struct FProjectileEventData& ProjectileData);
	void Bounced_4DCEF0C249251A8D551D83AC1D03811D(const struct FProjectileEventData& ProjectileData);
	void Stopped_4DCEF0C249251A8D551D83AC1D03811D(const struct FProjectileEventData& ProjectileData);
	void Exploded_4DCEF0C249251A8D551D83AC1D03811D(const struct FProjectileEventData& ProjectileData);
	void Destroyed_4DCEF0C249251A8D551D83AC1D03811D(const struct FProjectileEventData& ProjectileData);
	void Triggered_3828B846413BDD657BD4F9BDEC856444(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void Cancelled_3828B846413BDD657BD4F9BDEC856444(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void Completed_3828B846413BDD657BD4F9BDEC856444(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void ThrowM80(struct FVector* NewParam, struct FRotator* Rotation);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_Weapon_M80_C">();
	}
	static class UGA_Weapon_M80_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_Weapon_M80_C>();
	}
};
static_assert(alignof(UGA_Weapon_M80_C) == 0x000008, "Wrong alignment on UGA_Weapon_M80_C");
static_assert(sizeof(UGA_Weapon_M80_C) == 0x000D90, "Wrong size on UGA_Weapon_M80_C");
static_assert(offsetof(UGA_Weapon_M80_C, UberGraphFrame) == 0x000AF0, "Member 'UGA_Weapon_M80_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGA_Weapon_M80_C, Prj_M80) == 0x000AF8, "Member 'UGA_Weapon_M80_C::Prj_M80' has a wrong offset!");
static_assert(offsetof(UGA_Weapon_M80_C, PlayerPawn) == 0x000B00, "Member 'UGA_Weapon_M80_C::PlayerPawn' has a wrong offset!");
static_assert(offsetof(UGA_Weapon_M80_C, TransformOffsetA1) == 0x000B08, "Member 'UGA_Weapon_M80_C::TransformOffsetA1' has a wrong offset!");
static_assert(offsetof(UGA_Weapon_M80_C, TransformOffsetB1) == 0x000B14, "Member 'UGA_Weapon_M80_C::TransformOffsetB1' has a wrong offset!");
static_assert(offsetof(UGA_Weapon_M80_C, NegHorizontalSpread1) == 0x000B20, "Member 'UGA_Weapon_M80_C::NegHorizontalSpread1' has a wrong offset!");
static_assert(offsetof(UGA_Weapon_M80_C, PosHorizontalSpread1) == 0x000B24, "Member 'UGA_Weapon_M80_C::PosHorizontalSpread1' has a wrong offset!");
static_assert(offsetof(UGA_Weapon_M80_C, StartLocation) == 0x000B28, "Member 'UGA_Weapon_M80_C::StartLocation' has a wrong offset!");
static_assert(offsetof(UGA_Weapon_M80_C, InitialSpeed) == 0x000B34, "Member 'UGA_Weapon_M80_C::InitialSpeed' has a wrong offset!");
static_assert(offsetof(UGA_Weapon_M80_C, M80Gravity) == 0x000B38, "Member 'UGA_Weapon_M80_C::M80Gravity' has a wrong offset!");
static_assert(offsetof(UGA_Weapon_M80_C, StartRotation) == 0x000B3C, "Member 'UGA_Weapon_M80_C::StartRotation' has a wrong offset!");
static_assert(offsetof(UGA_Weapon_M80_C, EventComplete) == 0x000B48, "Member 'UGA_Weapon_M80_C::EventComplete' has a wrong offset!");
static_assert(offsetof(UGA_Weapon_M80_C, EventActivation) == 0x000B50, "Member 'UGA_Weapon_M80_C::EventActivation' has a wrong offset!");
static_assert(offsetof(UGA_Weapon_M80_C, T_Explosion) == 0x000B58, "Member 'UGA_Weapon_M80_C::T_Explosion' has a wrong offset!");
static_assert(offsetof(UGA_Weapon_M80_C, ActivationSound) == 0x000C50, "Member 'UGA_Weapon_M80_C::ActivationSound' has a wrong offset!");
static_assert(offsetof(UGA_Weapon_M80_C, EventData) == 0x000C58, "Member 'UGA_Weapon_M80_C::EventData' has a wrong offset!");
static_assert(offsetof(UGA_Weapon_M80_C, Vertical_Throw) == 0x000D00, "Member 'UGA_Weapon_M80_C::Vertical_Throw' has a wrong offset!");
static_assert(offsetof(UGA_Weapon_M80_C, Anm_PlayRate) == 0x000D04, "Member 'UGA_Weapon_M80_C::Anm_PlayRate' has a wrong offset!");
static_assert(offsetof(UGA_Weapon_M80_C, EC_Explode_Return) == 0x000D08, "Member 'UGA_Weapon_M80_C::EC_Explode_Return' has a wrong offset!");
static_assert(offsetof(UGA_Weapon_M80_C, EC_Explode) == 0x000D88, "Member 'UGA_Weapon_M80_C::EC_Explode' has a wrong offset!");

}

