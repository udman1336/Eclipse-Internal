#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_SoundIndicator_01

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function B_SoundIndicator_01.B_SoundIndicator_01_C.ExecuteUbergraph_B_SoundIndicator_01
// 0x0088 (0x0088 - 0x0000)
struct B_SoundIndicator_01_C_ExecuteUbergraph_B_SoundIndicator_01 final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeFloatCurve                     CallFunc_GetWeaponCurve_ReturnValue;               // 0x0008(0x0078)()
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(B_SoundIndicator_01_C_ExecuteUbergraph_B_SoundIndicator_01) == 0x000008, "Wrong alignment on B_SoundIndicator_01_C_ExecuteUbergraph_B_SoundIndicator_01");
static_assert(sizeof(B_SoundIndicator_01_C_ExecuteUbergraph_B_SoundIndicator_01) == 0x000088, "Wrong size on B_SoundIndicator_01_C_ExecuteUbergraph_B_SoundIndicator_01");
static_assert(offsetof(B_SoundIndicator_01_C_ExecuteUbergraph_B_SoundIndicator_01, EntryPoint) == 0x000000, "Member 'B_SoundIndicator_01_C_ExecuteUbergraph_B_SoundIndicator_01::EntryPoint' has a wrong offset!");
static_assert(offsetof(B_SoundIndicator_01_C_ExecuteUbergraph_B_SoundIndicator_01, CallFunc_GetWeaponCurve_ReturnValue) == 0x000008, "Member 'B_SoundIndicator_01_C_ExecuteUbergraph_B_SoundIndicator_01::CallFunc_GetWeaponCurve_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_SoundIndicator_01_C_ExecuteUbergraph_B_SoundIndicator_01, K2Node_SwitchEnum_CmpSuccess) == 0x000080, "Member 'B_SoundIndicator_01_C_ExecuteUbergraph_B_SoundIndicator_01::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function B_SoundIndicator_01.B_SoundIndicator_01_C.UpdateEmitterStates
// 0x0004 (0x0004 - 0x0000)
struct B_SoundIndicator_01_C_UpdateEmitterStates final
{
public:
	float                                         CallFunc_CalculateFiringAngle_DotResult;           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_SoundIndicator_01_C_UpdateEmitterStates) == 0x000004, "Wrong alignment on B_SoundIndicator_01_C_UpdateEmitterStates");
static_assert(sizeof(B_SoundIndicator_01_C_UpdateEmitterStates) == 0x000004, "Wrong size on B_SoundIndicator_01_C_UpdateEmitterStates");
static_assert(offsetof(B_SoundIndicator_01_C_UpdateEmitterStates, CallFunc_CalculateFiringAngle_DotResult) == 0x000000, "Member 'B_SoundIndicator_01_C_UpdateEmitterStates::CallFunc_CalculateFiringAngle_DotResult' has a wrong offset!");

// Function B_SoundIndicator_01.B_SoundIndicator_01_C.GetWeaponCurve
// 0x0170 (0x0170 - 0x0000)
struct B_SoundIndicator_01_C_GetWeaponCurve final
{
public:
	struct FRuntimeFloatCurve                     ReturnValue;                                       // 0x0000(0x0078)(Parm, OutParm, ReturnParm)
	bool                                          Temp_bool_Variable;                                // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable1;                               // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x007A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x007B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeFloatCurve                     K2Node_Select_Default;                             // 0x0080(0x0078)()
	struct FRuntimeFloatCurve                     K2Node_Select1_Default;                            // 0x00F8(0x0078)()
};
static_assert(alignof(B_SoundIndicator_01_C_GetWeaponCurve) == 0x000008, "Wrong alignment on B_SoundIndicator_01_C_GetWeaponCurve");
static_assert(sizeof(B_SoundIndicator_01_C_GetWeaponCurve) == 0x000170, "Wrong size on B_SoundIndicator_01_C_GetWeaponCurve");
static_assert(offsetof(B_SoundIndicator_01_C_GetWeaponCurve, ReturnValue) == 0x000000, "Member 'B_SoundIndicator_01_C_GetWeaponCurve::ReturnValue' has a wrong offset!");
static_assert(offsetof(B_SoundIndicator_01_C_GetWeaponCurve, Temp_bool_Variable) == 0x000078, "Member 'B_SoundIndicator_01_C_GetWeaponCurve::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(B_SoundIndicator_01_C_GetWeaponCurve, Temp_bool_Variable1) == 0x000079, "Member 'B_SoundIndicator_01_C_GetWeaponCurve::Temp_bool_Variable1' has a wrong offset!");
static_assert(offsetof(B_SoundIndicator_01_C_GetWeaponCurve, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00007A, "Member 'B_SoundIndicator_01_C_GetWeaponCurve::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_SoundIndicator_01_C_GetWeaponCurve, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x00007B, "Member 'B_SoundIndicator_01_C_GetWeaponCurve::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_SoundIndicator_01_C_GetWeaponCurve, K2Node_Select_Default) == 0x000080, "Member 'B_SoundIndicator_01_C_GetWeaponCurve::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(B_SoundIndicator_01_C_GetWeaponCurve, K2Node_Select1_Default) == 0x0000F8, "Member 'B_SoundIndicator_01_C_GetWeaponCurve::K2Node_Select1_Default' has a wrong offset!");

// Function B_SoundIndicator_01.B_SoundIndicator_01_C.CalculateFiringAngle
// 0x00A0 (0x00A0 - 0x0000)
struct B_SoundIndicator_01_C_CalculateFiringAngle final
{
public:
	float                                         DotResult;                                         // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0010(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerPawn*                        K2Node_DynamicCast_AsFort_Player_Pawn;             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortWeaponRanged*                      K2Node_DynamicCast_AsFort_Weapon_Ranged;           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue1;         // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0044(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetRightVector_ReturnValue;               // 0x0050(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x005C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0068(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue1;                      // 0x0078(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue;             // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue1;                      // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MultiplyMultiply_FloatFloat_ReturnValue;  // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue1;                        // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_SoundIndicator_01_C_CalculateFiringAngle) == 0x000008, "Wrong alignment on B_SoundIndicator_01_C_CalculateFiringAngle");
static_assert(sizeof(B_SoundIndicator_01_C_CalculateFiringAngle) == 0x0000A0, "Wrong size on B_SoundIndicator_01_C_CalculateFiringAngle");
static_assert(offsetof(B_SoundIndicator_01_C_CalculateFiringAngle, DotResult) == 0x000000, "Member 'B_SoundIndicator_01_C_CalculateFiringAngle::DotResult' has a wrong offset!");
static_assert(offsetof(B_SoundIndicator_01_C_CalculateFiringAngle, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'B_SoundIndicator_01_C_CalculateFiringAngle::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_SoundIndicator_01_C_CalculateFiringAngle, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000010, "Member 'B_SoundIndicator_01_C_CalculateFiringAngle::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_SoundIndicator_01_C_CalculateFiringAngle, K2Node_DynamicCast_AsFort_Player_Pawn) == 0x000020, "Member 'B_SoundIndicator_01_C_CalculateFiringAngle::K2Node_DynamicCast_AsFort_Player_Pawn' has a wrong offset!");
static_assert(offsetof(B_SoundIndicator_01_C_CalculateFiringAngle, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'B_SoundIndicator_01_C_CalculateFiringAngle::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_SoundIndicator_01_C_CalculateFiringAngle, K2Node_DynamicCast_AsFort_Weapon_Ranged) == 0x000030, "Member 'B_SoundIndicator_01_C_CalculateFiringAngle::K2Node_DynamicCast_AsFort_Weapon_Ranged' has a wrong offset!");
static_assert(offsetof(B_SoundIndicator_01_C_CalculateFiringAngle, K2Node_DynamicCast_bSuccess1) == 0x000038, "Member 'B_SoundIndicator_01_C_CalculateFiringAngle::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(B_SoundIndicator_01_C_CalculateFiringAngle, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00003C, "Member 'B_SoundIndicator_01_C_CalculateFiringAngle::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_SoundIndicator_01_C_CalculateFiringAngle, CallFunc_Multiply_FloatFloat_ReturnValue1) == 0x000040, "Member 'B_SoundIndicator_01_C_CalculateFiringAngle::CallFunc_Multiply_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(B_SoundIndicator_01_C_CalculateFiringAngle, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000044, "Member 'B_SoundIndicator_01_C_CalculateFiringAngle::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_SoundIndicator_01_C_CalculateFiringAngle, CallFunc_GetRightVector_ReturnValue) == 0x000050, "Member 'B_SoundIndicator_01_C_CalculateFiringAngle::CallFunc_GetRightVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_SoundIndicator_01_C_CalculateFiringAngle, CallFunc_Subtract_VectorVector_ReturnValue) == 0x00005C, "Member 'B_SoundIndicator_01_C_CalculateFiringAngle::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_SoundIndicator_01_C_CalculateFiringAngle, CallFunc_Normal_ReturnValue) == 0x000068, "Member 'B_SoundIndicator_01_C_CalculateFiringAngle::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_SoundIndicator_01_C_CalculateFiringAngle, CallFunc_VSize_ReturnValue) == 0x000074, "Member 'B_SoundIndicator_01_C_CalculateFiringAngle::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_SoundIndicator_01_C_CalculateFiringAngle, CallFunc_Normal_ReturnValue1) == 0x000078, "Member 'B_SoundIndicator_01_C_CalculateFiringAngle::CallFunc_Normal_ReturnValue1' has a wrong offset!");
static_assert(offsetof(B_SoundIndicator_01_C_CalculateFiringAngle, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000084, "Member 'B_SoundIndicator_01_C_CalculateFiringAngle::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_SoundIndicator_01_C_CalculateFiringAngle, CallFunc_Dot_VectorVector_ReturnValue) == 0x000088, "Member 'B_SoundIndicator_01_C_CalculateFiringAngle::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_SoundIndicator_01_C_CalculateFiringAngle, CallFunc_FClamp_ReturnValue) == 0x00008C, "Member 'B_SoundIndicator_01_C_CalculateFiringAngle::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_SoundIndicator_01_C_CalculateFiringAngle, CallFunc_FClamp_ReturnValue1) == 0x000090, "Member 'B_SoundIndicator_01_C_CalculateFiringAngle::CallFunc_FClamp_ReturnValue1' has a wrong offset!");
static_assert(offsetof(B_SoundIndicator_01_C_CalculateFiringAngle, CallFunc_Lerp_ReturnValue) == 0x000094, "Member 'B_SoundIndicator_01_C_CalculateFiringAngle::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_SoundIndicator_01_C_CalculateFiringAngle, CallFunc_MultiplyMultiply_FloatFloat_ReturnValue) == 0x000098, "Member 'B_SoundIndicator_01_C_CalculateFiringAngle::CallFunc_MultiplyMultiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_SoundIndicator_01_C_CalculateFiringAngle, CallFunc_Lerp_ReturnValue1) == 0x00009C, "Member 'B_SoundIndicator_01_C_CalculateFiringAngle::CallFunc_Lerp_ReturnValue1' has a wrong offset!");

}

