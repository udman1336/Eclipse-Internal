#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SurvivorAnchor

#include "Basic.hpp"

#include "SurvivorAnchorWidthEnum_structs.hpp"
#include "Engine_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "SurvivorAnchorHeightEnum_structs.hpp"
#include "SurvivorAnchorMaxZMove_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SurvivorAnchor.BP_SurvivorAnchor_C
// 0x00A8 (0x0EA0 - 0x0DF8)
class ABP_SurvivorAnchor_C final : public ABuildingProp
{
public:
	uint8                                         Pad_DF8[0x8];                                      // 0x0DF8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0E00(0x0008)(Transient, DuplicateTransient)
	class UStaticMeshComponent*                   SurvivorAnchorBoxMesh;                             // 0x0E08(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        SurvivorPawnSpawnRotationArrow;                    // 0x0E10(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    SurvivorPawnSpawnIcon;                             // 0x0E18(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    SurvivorAnchorIcon;                                // 0x0E20(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          SurvivorAnchorBox;                                 // 0x0E28(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          Debug;                                             // 0x0E30(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	ESurvivorAnchorHeightEnum                     SurvivorAnchorHeightInBuildingTiles;               // 0x0E31(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESurvivorAnchorWidthEnum                      SurvivorAnchorWidthInBuildingTiles;                // 0x0E32(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESurvivorAnchorMaxZMove                       SurvivorAnchorMaxZMoveInTiles;                     // 0x0E33(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                AnchorBoxCenter;                                   // 0x0E34(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                AnchorBoxBounds;                                   // 0x0E40(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E4C[0x4];                                      // 0x0E4C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASurvivor_C*                            SurvivorAnchorPawn;                                // 0x0E50(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SurvivorPawnLocation;                              // 0x0E58(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SurvivorPawnRotationWidget;                        // 0x0E64(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               SurvivorPawnRotation;                              // 0x0E70(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E7C[0x4];                                      // 0x0E7C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 SurvivorAnchorPawnClassToSpawn;                    // 0x0E80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortWeaponItemDefinition*              SurvivorWeaponDataOverride;                        // 0x0E88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFortTeam                                     SurvivorTeamOverride;                              // 0x0E90(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFortressAIType                               SurvivorAITypeOverride;                            // 0x0E91(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SpawnASurvivor;                                    // 0x0E92(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E93[0x1];                                      // 0x0E93(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AnchorEQSGridSize;                                 // 0x0E94(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AnchorEQSGridSpaceBetween;                         // 0x0E98(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_SurvivorAnchor(int32 EntryPoint);
	void ShowAnchorBounds();
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void IsActorInsideOfAnchorBounds(class AActor*& Actor, bool* InBounds);
	float GetTetheredBoxBoundsWidth();
	float GetTetheredBoxBoundsHeight();
	float GetTetheredBoxBoundsEQSSpaceBetween();
	float GetTetheredBoxBoundsEQSGridSize();
	struct FVector GetTetheredBoxBoundsCenter();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SurvivorAnchor_C">();
	}
	static class ABP_SurvivorAnchor_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_SurvivorAnchor_C>();
	}
};
static_assert(alignof(ABP_SurvivorAnchor_C) == 0x000008, "Wrong alignment on ABP_SurvivorAnchor_C");
static_assert(sizeof(ABP_SurvivorAnchor_C) == 0x000EA0, "Wrong size on ABP_SurvivorAnchor_C");
static_assert(offsetof(ABP_SurvivorAnchor_C, UberGraphFrame) == 0x000E00, "Member 'ABP_SurvivorAnchor_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_SurvivorAnchor_C, SurvivorAnchorBoxMesh) == 0x000E08, "Member 'ABP_SurvivorAnchor_C::SurvivorAnchorBoxMesh' has a wrong offset!");
static_assert(offsetof(ABP_SurvivorAnchor_C, SurvivorPawnSpawnRotationArrow) == 0x000E10, "Member 'ABP_SurvivorAnchor_C::SurvivorPawnSpawnRotationArrow' has a wrong offset!");
static_assert(offsetof(ABP_SurvivorAnchor_C, SurvivorPawnSpawnIcon) == 0x000E18, "Member 'ABP_SurvivorAnchor_C::SurvivorPawnSpawnIcon' has a wrong offset!");
static_assert(offsetof(ABP_SurvivorAnchor_C, SurvivorAnchorIcon) == 0x000E20, "Member 'ABP_SurvivorAnchor_C::SurvivorAnchorIcon' has a wrong offset!");
static_assert(offsetof(ABP_SurvivorAnchor_C, SurvivorAnchorBox) == 0x000E28, "Member 'ABP_SurvivorAnchor_C::SurvivorAnchorBox' has a wrong offset!");
static_assert(offsetof(ABP_SurvivorAnchor_C, Debug) == 0x000E30, "Member 'ABP_SurvivorAnchor_C::Debug' has a wrong offset!");
static_assert(offsetof(ABP_SurvivorAnchor_C, SurvivorAnchorHeightInBuildingTiles) == 0x000E31, "Member 'ABP_SurvivorAnchor_C::SurvivorAnchorHeightInBuildingTiles' has a wrong offset!");
static_assert(offsetof(ABP_SurvivorAnchor_C, SurvivorAnchorWidthInBuildingTiles) == 0x000E32, "Member 'ABP_SurvivorAnchor_C::SurvivorAnchorWidthInBuildingTiles' has a wrong offset!");
static_assert(offsetof(ABP_SurvivorAnchor_C, SurvivorAnchorMaxZMoveInTiles) == 0x000E33, "Member 'ABP_SurvivorAnchor_C::SurvivorAnchorMaxZMoveInTiles' has a wrong offset!");
static_assert(offsetof(ABP_SurvivorAnchor_C, AnchorBoxCenter) == 0x000E34, "Member 'ABP_SurvivorAnchor_C::AnchorBoxCenter' has a wrong offset!");
static_assert(offsetof(ABP_SurvivorAnchor_C, AnchorBoxBounds) == 0x000E40, "Member 'ABP_SurvivorAnchor_C::AnchorBoxBounds' has a wrong offset!");
static_assert(offsetof(ABP_SurvivorAnchor_C, SurvivorAnchorPawn) == 0x000E50, "Member 'ABP_SurvivorAnchor_C::SurvivorAnchorPawn' has a wrong offset!");
static_assert(offsetof(ABP_SurvivorAnchor_C, SurvivorPawnLocation) == 0x000E58, "Member 'ABP_SurvivorAnchor_C::SurvivorPawnLocation' has a wrong offset!");
static_assert(offsetof(ABP_SurvivorAnchor_C, SurvivorPawnRotationWidget) == 0x000E64, "Member 'ABP_SurvivorAnchor_C::SurvivorPawnRotationWidget' has a wrong offset!");
static_assert(offsetof(ABP_SurvivorAnchor_C, SurvivorPawnRotation) == 0x000E70, "Member 'ABP_SurvivorAnchor_C::SurvivorPawnRotation' has a wrong offset!");
static_assert(offsetof(ABP_SurvivorAnchor_C, SurvivorAnchorPawnClassToSpawn) == 0x000E80, "Member 'ABP_SurvivorAnchor_C::SurvivorAnchorPawnClassToSpawn' has a wrong offset!");
static_assert(offsetof(ABP_SurvivorAnchor_C, SurvivorWeaponDataOverride) == 0x000E88, "Member 'ABP_SurvivorAnchor_C::SurvivorWeaponDataOverride' has a wrong offset!");
static_assert(offsetof(ABP_SurvivorAnchor_C, SurvivorTeamOverride) == 0x000E90, "Member 'ABP_SurvivorAnchor_C::SurvivorTeamOverride' has a wrong offset!");
static_assert(offsetof(ABP_SurvivorAnchor_C, SurvivorAITypeOverride) == 0x000E91, "Member 'ABP_SurvivorAnchor_C::SurvivorAITypeOverride' has a wrong offset!");
static_assert(offsetof(ABP_SurvivorAnchor_C, SpawnASurvivor) == 0x000E92, "Member 'ABP_SurvivorAnchor_C::SpawnASurvivor' has a wrong offset!");
static_assert(offsetof(ABP_SurvivorAnchor_C, AnchorEQSGridSize) == 0x000E94, "Member 'ABP_SurvivorAnchor_C::AnchorEQSGridSize' has a wrong offset!");
static_assert(offsetof(ABP_SurvivorAnchor_C, AnchorEQSGridSpaceBetween) == 0x000E98, "Member 'ABP_SurvivorAnchor_C::AnchorEQSGridSpaceBetween' has a wrong offset!");

}

