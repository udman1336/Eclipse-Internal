#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_Prj_M80

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function B_Prj_M80.B_Prj_M80_C.ExecuteUbergraph_B_Prj_M80
// 0x0120 (0x0120 - 0x0000)
struct B_Prj_M80_C_ExecuteUbergraph_B_Prj_M80 final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_Event_MyComp;                               // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_Other;                                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_Event_OtherComp;                            // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bSelfMoved;                           // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_Event_HitLocation;                          // 0x0024(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_HitNormal;                            // 0x0030(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_NormalImpulse;                        // 0x003C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_Hit;                                  // 0x0048(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class AFortPawn*                              K2Node_DynamicCast_AsFort_Pawn;                    // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         K2Node_Event_HitActors;                            // 0x00E0(0x0010)(ConstParm, ZeroConstructor, ReferenceParm)
	TArray<struct FHitResult>                     K2Node_Event_HitResults;                           // 0x00F0(0x0010)(ConstParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0100(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               CallFunc_SpawnEmitterAtLocation_ReturnValue;       // 0x0110(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Prj_M80_C_ExecuteUbergraph_B_Prj_M80) == 0x000008, "Wrong alignment on B_Prj_M80_C_ExecuteUbergraph_B_Prj_M80");
static_assert(sizeof(B_Prj_M80_C_ExecuteUbergraph_B_Prj_M80) == 0x000120, "Wrong size on B_Prj_M80_C_ExecuteUbergraph_B_Prj_M80");
static_assert(offsetof(B_Prj_M80_C_ExecuteUbergraph_B_Prj_M80, EntryPoint) == 0x000000, "Member 'B_Prj_M80_C_ExecuteUbergraph_B_Prj_M80::EntryPoint' has a wrong offset!");
static_assert(offsetof(B_Prj_M80_C_ExecuteUbergraph_B_Prj_M80, Temp_bool_Has_Been_Initd_Variable) == 0x000004, "Member 'B_Prj_M80_C_ExecuteUbergraph_B_Prj_M80::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(B_Prj_M80_C_ExecuteUbergraph_B_Prj_M80, Temp_bool_IsClosed_Variable) == 0x000005, "Member 'B_Prj_M80_C_ExecuteUbergraph_B_Prj_M80::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(B_Prj_M80_C_ExecuteUbergraph_B_Prj_M80, K2Node_Event_MyComp) == 0x000008, "Member 'B_Prj_M80_C_ExecuteUbergraph_B_Prj_M80::K2Node_Event_MyComp' has a wrong offset!");
static_assert(offsetof(B_Prj_M80_C_ExecuteUbergraph_B_Prj_M80, K2Node_Event_Other) == 0x000010, "Member 'B_Prj_M80_C_ExecuteUbergraph_B_Prj_M80::K2Node_Event_Other' has a wrong offset!");
static_assert(offsetof(B_Prj_M80_C_ExecuteUbergraph_B_Prj_M80, K2Node_Event_OtherComp) == 0x000018, "Member 'B_Prj_M80_C_ExecuteUbergraph_B_Prj_M80::K2Node_Event_OtherComp' has a wrong offset!");
static_assert(offsetof(B_Prj_M80_C_ExecuteUbergraph_B_Prj_M80, K2Node_Event_bSelfMoved) == 0x000020, "Member 'B_Prj_M80_C_ExecuteUbergraph_B_Prj_M80::K2Node_Event_bSelfMoved' has a wrong offset!");
static_assert(offsetof(B_Prj_M80_C_ExecuteUbergraph_B_Prj_M80, K2Node_Event_HitLocation) == 0x000024, "Member 'B_Prj_M80_C_ExecuteUbergraph_B_Prj_M80::K2Node_Event_HitLocation' has a wrong offset!");
static_assert(offsetof(B_Prj_M80_C_ExecuteUbergraph_B_Prj_M80, K2Node_Event_HitNormal) == 0x000030, "Member 'B_Prj_M80_C_ExecuteUbergraph_B_Prj_M80::K2Node_Event_HitNormal' has a wrong offset!");
static_assert(offsetof(B_Prj_M80_C_ExecuteUbergraph_B_Prj_M80, K2Node_Event_NormalImpulse) == 0x00003C, "Member 'B_Prj_M80_C_ExecuteUbergraph_B_Prj_M80::K2Node_Event_NormalImpulse' has a wrong offset!");
static_assert(offsetof(B_Prj_M80_C_ExecuteUbergraph_B_Prj_M80, K2Node_Event_Hit) == 0x000048, "Member 'B_Prj_M80_C_ExecuteUbergraph_B_Prj_M80::K2Node_Event_Hit' has a wrong offset!");
static_assert(offsetof(B_Prj_M80_C_ExecuteUbergraph_B_Prj_M80, K2Node_DynamicCast_AsFort_Pawn) == 0x0000D0, "Member 'B_Prj_M80_C_ExecuteUbergraph_B_Prj_M80::K2Node_DynamicCast_AsFort_Pawn' has a wrong offset!");
static_assert(offsetof(B_Prj_M80_C_ExecuteUbergraph_B_Prj_M80, K2Node_DynamicCast_bSuccess) == 0x0000D8, "Member 'B_Prj_M80_C_ExecuteUbergraph_B_Prj_M80::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_Prj_M80_C_ExecuteUbergraph_B_Prj_M80, K2Node_Event_HitActors) == 0x0000E0, "Member 'B_Prj_M80_C_ExecuteUbergraph_B_Prj_M80::K2Node_Event_HitActors' has a wrong offset!");
static_assert(offsetof(B_Prj_M80_C_ExecuteUbergraph_B_Prj_M80, K2Node_Event_HitResults) == 0x0000F0, "Member 'B_Prj_M80_C_ExecuteUbergraph_B_Prj_M80::K2Node_Event_HitResults' has a wrong offset!");
static_assert(offsetof(B_Prj_M80_C_ExecuteUbergraph_B_Prj_M80, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000100, "Member 'B_Prj_M80_C_ExecuteUbergraph_B_Prj_M80::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Prj_M80_C_ExecuteUbergraph_B_Prj_M80, CallFunc_SpawnEmitterAtLocation_ReturnValue) == 0x000110, "Member 'B_Prj_M80_C_ExecuteUbergraph_B_Prj_M80::CallFunc_SpawnEmitterAtLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Prj_M80_C_ExecuteUbergraph_B_Prj_M80, CallFunc_RandomFloatInRange_ReturnValue) == 0x000118, "Member 'B_Prj_M80_C_ExecuteUbergraph_B_Prj_M80::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");

// Function B_Prj_M80.B_Prj_M80_C.OnExploded
// 0x0020 (0x0020 - 0x0000)
struct B_Prj_M80_C_OnExploded final
{
public:
	TArray<class AActor*>                         HitActors;                                         // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	TArray<struct FHitResult>                     HitResults;                                        // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference)
};
static_assert(alignof(B_Prj_M80_C_OnExploded) == 0x000008, "Wrong alignment on B_Prj_M80_C_OnExploded");
static_assert(sizeof(B_Prj_M80_C_OnExploded) == 0x000020, "Wrong size on B_Prj_M80_C_OnExploded");
static_assert(offsetof(B_Prj_M80_C_OnExploded, HitActors) == 0x000000, "Member 'B_Prj_M80_C_OnExploded::HitActors' has a wrong offset!");
static_assert(offsetof(B_Prj_M80_C_OnExploded, HitResults) == 0x000010, "Member 'B_Prj_M80_C_OnExploded::HitResults' has a wrong offset!");

// Function B_Prj_M80.B_Prj_M80_C.ReceiveHit
// 0x00C8 (0x00C8 - 0x0000)
struct B_Prj_M80_C_ReceiveHit final
{
public:
	class UPrimitiveComponent*                    MyComp;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Other;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSelfMoved;                                        // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HitLocation_0;                                     // 0x001C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitNormal;                                         // 0x0028(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NormalImpulse;                                     // 0x0034(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0040(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(B_Prj_M80_C_ReceiveHit) == 0x000008, "Wrong alignment on B_Prj_M80_C_ReceiveHit");
static_assert(sizeof(B_Prj_M80_C_ReceiveHit) == 0x0000C8, "Wrong size on B_Prj_M80_C_ReceiveHit");
static_assert(offsetof(B_Prj_M80_C_ReceiveHit, MyComp) == 0x000000, "Member 'B_Prj_M80_C_ReceiveHit::MyComp' has a wrong offset!");
static_assert(offsetof(B_Prj_M80_C_ReceiveHit, Other) == 0x000008, "Member 'B_Prj_M80_C_ReceiveHit::Other' has a wrong offset!");
static_assert(offsetof(B_Prj_M80_C_ReceiveHit, OtherComp) == 0x000010, "Member 'B_Prj_M80_C_ReceiveHit::OtherComp' has a wrong offset!");
static_assert(offsetof(B_Prj_M80_C_ReceiveHit, bSelfMoved) == 0x000018, "Member 'B_Prj_M80_C_ReceiveHit::bSelfMoved' has a wrong offset!");
static_assert(offsetof(B_Prj_M80_C_ReceiveHit, HitLocation_0) == 0x00001C, "Member 'B_Prj_M80_C_ReceiveHit::HitLocation_0' has a wrong offset!");
static_assert(offsetof(B_Prj_M80_C_ReceiveHit, HitNormal) == 0x000028, "Member 'B_Prj_M80_C_ReceiveHit::HitNormal' has a wrong offset!");
static_assert(offsetof(B_Prj_M80_C_ReceiveHit, NormalImpulse) == 0x000034, "Member 'B_Prj_M80_C_ReceiveHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(B_Prj_M80_C_ReceiveHit, Hit) == 0x000040, "Member 'B_Prj_M80_C_ReceiveHit::Hit' has a wrong offset!");

}

