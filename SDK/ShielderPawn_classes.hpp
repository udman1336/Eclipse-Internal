#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ShielderPawn

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "EnemyPawn_Parent_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass ShielderPawn.ShielderPawn_C
// 0x0190 (0x2170 - 0x1FE0)
class AShielderPawn_C final : public AEnemyPawn_Parent_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_ShielderPawn_C;                     // 0x1FE0(0x0008)(Transient, DuplicateTransient)
	class USphereComponent*                       ShielderReAttachRange;                             // 0x1FE8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RotateShielder_LerpAlpha_F33B1BA94860E62F431B509EF30FFA64; // 0x1FF0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            RotateShielder__Direction_F33B1BA94860E62F431B509EF30FFA64; // 0x1FF4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1FF5[0x3];                                     // 0x1FF5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     RotateShielder;                                    // 0x1FF8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InterpShielderToNewLocation_LerpAlpha_4C3E0C0B4BF05DD8DEA964BC480F2112; // 0x2000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            InterpShielderToNewLocation__Direction_4C3E0C0B4BF05DD8DEA964BC480F2112; // 0x2004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2005[0x3];                                     // 0x2005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     InterpShielderToNewLocation;                       // 0x2008(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Debug;                                             // 0x2010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          AttemptingReAttach;                                // 0x2011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ShielderVisible;                                   // 0x2012(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	bool                                          OrphanForceKill;                                   // 0x2013(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Orphaned_0;                                        // 0x2014(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2015[0x3];                                     // 0x2015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GameTimeWhenOrphaned;                              // 0x2018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_201C[0x4];                                     // 0x201C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPawn*                              AttachPawn;                                        // 0x2020(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_ShielderShield;                                 // 0x2028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPawn*                              PotentialAttachPawn;                               // 0x2030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AFortPawn*>                      PotentialAttachPawns;                              // 0x2038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	class UClass*                                 ShielderSpringArmClass;                            // 0x2048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AShielderSpringArm_C*                   ShielderSpringArm;                                 // 0x2050(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               SpringArmTargetRotation;                           // 0x2058(0x000C)(Edit, BlueprintVisible, Net, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_2064[0x4];                                     // 0x2064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortAbilitySet*                        AttachPawnAbilitySet;                              // 0x2068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCurveTableRowHandle                   EnemyScalingSheet;                                 // 0x2070(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_ShielderSphere;                                  // 0x2080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCurveTableRowHandle                   NPCMiscCurvesSheet;                                // 0x2088(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         OrphanTimeBeforeReAttachByEncounter;               // 0x2098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OrphanTimeBeforeReAttachByProximity;               // 0x209C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OrphanTimeBeforceForceKill;                        // 0x20A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxTimeToReAttachByEncounter;                      // 0x20A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ShielderVisibilityDelayWhenAttachingToSpawningPawn; // 0x20A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_20AC[0x4];                                     // 0x20AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           TC_NPCStatusWearingShielder;                       // 0x20B0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           TC_NPCAbilityNonAttackTeleportOut;                 // 0x20B8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           TC_NPCAbilityNonAttackTeleportIn;                  // 0x20C0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           TC_NPCAbilityNonAttackSummon;                      // 0x20C8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           TC_NPCAbilityNonAttackDropNPC;                     // 0x20D0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         SpringArmRotationTimeMin;                          // 0x20D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpringArmRotationTimeMax;                          // 0x20DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OrphanDetachZVelocity;                             // 0x20E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_20E4[0x4];                                     // 0x20E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortAbilitySetHandle                  ShielderAttachPawnAbilitySet;                      // 0x20E8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	struct FGameplayTag                           GameplayCueShieldReapplied;                        // 0x2110(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GameplayCueShieldDestroyed;                        // 0x2118(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Sound_ShieldStart_NoLoop;                          // 0x2120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Sound_ShieldBroken;                                // 0x2128(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Sound_ShieldStart;                                 // 0x2130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bShieldApplied;                                    // 0x2138(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_2139[0x7];                                     // 0x2139(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           TC_HuskSmasher;                                    // 0x2140(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           TC_HuskTaker;                                      // 0x2148(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_HideOnMiniMap;                                  // 0x2150(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Sound_ShieldStart_Spawned;                         // 0x2158(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SuperShielder;                                     // 0x2160(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2161[0x3];                                     // 0x2161(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SuperShieldOffsetFromGround;                       // 0x2164(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABGA_SuperShielder_Shield_C*            BGA_SuperShielder_Shield_Spawned;                  // 0x2168(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_ShielderPawn(int32 EntryPoint);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void InvisibleOrphanTick();
	void AdditiveHitReactDelay();
	void RotateShielderForward();
	void InterpShielderToSpringArm();
	void UnBindProxOverlap();
	void BindProxOverlap();
	void OrphanForceKillTimer();
	void AttachPawnDead(bool Despawn);
	void AnimateSpringArm();
	void ShielderShieldBroken();
	void OnComponentEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void UnBindEncounterSpawn();
	void ReApplyShield();
	void BindEncounterSpawn();
	void AttachShielderToPotentialAttachPawn();
	void GrabRandomPotentialAttachPawn(bool HiddenAttach);
	void PostSpawnIn();
	void VerifyPotentialAttachPawnIsValidAndAttachToIt(class AFortPawn* PotentialAttachPawn_0, bool HiddenAttach);
	void OnComponentBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void SetShielderOrphanStatus(bool Param_Orphaned_0, bool GiveZVelocityOnDetach, const class FString& Reason);
	void OnEncounterEnemySpawned(class UFortAIEncounterInfo* Encounter, class AFortAIPawn* SpawnedEnemy);
	void ShielderAttachComplete();
	void OnDeathServer(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void ReceiveBeginPlay();
	void OnKnockedback();
	void OnDamageServer(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void OnStunned();
	void RotateShielder__UpdateFunc();
	void RotateShielder__FinishedFunc();
	void InterpShielderToNewLocation__UpdateFunc();
	void InterpShielderToNewLocation__FinishedFunc();
	void OnRep_SpringArmTargetRotation();
	void AttachSpringArmToAttachPawn();
	void AttachShielderToSpringArm();
	void OnRep_ShielderVisible();
	void DebugLineAndSphere(bool Line, const struct FLinearColor& LineColor, bool Sphere, const struct FLinearColor& SphereColor, float VisibilityOffset);
	void OnRep_ShielderSpringArm();
	void GameTimeString(class FString* NewParam);
	void ApplyShield();
	void UpdateShieldFXVisibility();
	void OnRep_bShieldApplied();
	void SetMiniMapIconStatus();
	void RemoveShield(class AActor* RemoveShieldFrom);
	void SpawnSuperShielderBGA();
	void UserConstructionScript();
	void Orphaned(bool* IsOrphaned, class AFortPawn** AttachedPawn);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ShielderPawn_C">();
	}
	static class AShielderPawn_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AShielderPawn_C>();
	}
};
static_assert(alignof(AShielderPawn_C) == 0x000010, "Wrong alignment on AShielderPawn_C");
static_assert(sizeof(AShielderPawn_C) == 0x002170, "Wrong size on AShielderPawn_C");
static_assert(offsetof(AShielderPawn_C, UberGraphFrame_ShielderPawn_C) == 0x001FE0, "Member 'AShielderPawn_C::UberGraphFrame_ShielderPawn_C' has a wrong offset!");
static_assert(offsetof(AShielderPawn_C, ShielderReAttachRange) == 0x001FE8, "Member 'AShielderPawn_C::ShielderReAttachRange' has a wrong offset!");
static_assert(offsetof(AShielderPawn_C, RotateShielder_LerpAlpha_F33B1BA94860E62F431B509EF30FFA64) == 0x001FF0, "Member 'AShielderPawn_C::RotateShielder_LerpAlpha_F33B1BA94860E62F431B509EF30FFA64' has a wrong offset!");
static_assert(offsetof(AShielderPawn_C, RotateShielder__Direction_F33B1BA94860E62F431B509EF30FFA64) == 0x001FF4, "Member 'AShielderPawn_C::RotateShielder__Direction_F33B1BA94860E62F431B509EF30FFA64' has a wrong offset!");
static_assert(offsetof(AShielderPawn_C, RotateShielder) == 0x001FF8, "Member 'AShielderPawn_C::RotateShielder' has a wrong offset!");
static_assert(offsetof(AShielderPawn_C, InterpShielderToNewLocation_LerpAlpha_4C3E0C0B4BF05DD8DEA964BC480F2112) == 0x002000, "Member 'AShielderPawn_C::InterpShielderToNewLocation_LerpAlpha_4C3E0C0B4BF05DD8DEA964BC480F2112' has a wrong offset!");
static_assert(offsetof(AShielderPawn_C, InterpShielderToNewLocation__Direction_4C3E0C0B4BF05DD8DEA964BC480F2112) == 0x002004, "Member 'AShielderPawn_C::InterpShielderToNewLocation__Direction_4C3E0C0B4BF05DD8DEA964BC480F2112' has a wrong offset!");
static_assert(offsetof(AShielderPawn_C, InterpShielderToNewLocation) == 0x002008, "Member 'AShielderPawn_C::InterpShielderToNewLocation' has a wrong offset!");
static_assert(offsetof(AShielderPawn_C, Debug) == 0x002010, "Member 'AShielderPawn_C::Debug' has a wrong offset!");
static_assert(offsetof(AShielderPawn_C, AttemptingReAttach) == 0x002011, "Member 'AShielderPawn_C::AttemptingReAttach' has a wrong offset!");
static_assert(offsetof(AShielderPawn_C, ShielderVisible) == 0x002012, "Member 'AShielderPawn_C::ShielderVisible' has a wrong offset!");
static_assert(offsetof(AShielderPawn_C, OrphanForceKill) == 0x002013, "Member 'AShielderPawn_C::OrphanForceKill' has a wrong offset!");
static_assert(offsetof(AShielderPawn_C, Orphaned_0) == 0x002014, "Member 'AShielderPawn_C::Orphaned_0' has a wrong offset!");
static_assert(offsetof(AShielderPawn_C, GameTimeWhenOrphaned) == 0x002018, "Member 'AShielderPawn_C::GameTimeWhenOrphaned' has a wrong offset!");
static_assert(offsetof(AShielderPawn_C, AttachPawn) == 0x002020, "Member 'AShielderPawn_C::AttachPawn' has a wrong offset!");
static_assert(offsetof(AShielderPawn_C, GE_ShielderShield) == 0x002028, "Member 'AShielderPawn_C::GE_ShielderShield' has a wrong offset!");
static_assert(offsetof(AShielderPawn_C, PotentialAttachPawn) == 0x002030, "Member 'AShielderPawn_C::PotentialAttachPawn' has a wrong offset!");
static_assert(offsetof(AShielderPawn_C, PotentialAttachPawns) == 0x002038, "Member 'AShielderPawn_C::PotentialAttachPawns' has a wrong offset!");
static_assert(offsetof(AShielderPawn_C, ShielderSpringArmClass) == 0x002048, "Member 'AShielderPawn_C::ShielderSpringArmClass' has a wrong offset!");
static_assert(offsetof(AShielderPawn_C, ShielderSpringArm) == 0x002050, "Member 'AShielderPawn_C::ShielderSpringArm' has a wrong offset!");
static_assert(offsetof(AShielderPawn_C, SpringArmTargetRotation) == 0x002058, "Member 'AShielderPawn_C::SpringArmTargetRotation' has a wrong offset!");
static_assert(offsetof(AShielderPawn_C, AttachPawnAbilitySet) == 0x002068, "Member 'AShielderPawn_C::AttachPawnAbilitySet' has a wrong offset!");
static_assert(offsetof(AShielderPawn_C, EnemyScalingSheet) == 0x002070, "Member 'AShielderPawn_C::EnemyScalingSheet' has a wrong offset!");
static_assert(offsetof(AShielderPawn_C, P_ShielderSphere) == 0x002080, "Member 'AShielderPawn_C::P_ShielderSphere' has a wrong offset!");
static_assert(offsetof(AShielderPawn_C, NPCMiscCurvesSheet) == 0x002088, "Member 'AShielderPawn_C::NPCMiscCurvesSheet' has a wrong offset!");
static_assert(offsetof(AShielderPawn_C, OrphanTimeBeforeReAttachByEncounter) == 0x002098, "Member 'AShielderPawn_C::OrphanTimeBeforeReAttachByEncounter' has a wrong offset!");
static_assert(offsetof(AShielderPawn_C, OrphanTimeBeforeReAttachByProximity) == 0x00209C, "Member 'AShielderPawn_C::OrphanTimeBeforeReAttachByProximity' has a wrong offset!");
static_assert(offsetof(AShielderPawn_C, OrphanTimeBeforceForceKill) == 0x0020A0, "Member 'AShielderPawn_C::OrphanTimeBeforceForceKill' has a wrong offset!");
static_assert(offsetof(AShielderPawn_C, MaxTimeToReAttachByEncounter) == 0x0020A4, "Member 'AShielderPawn_C::MaxTimeToReAttachByEncounter' has a wrong offset!");
static_assert(offsetof(AShielderPawn_C, ShielderVisibilityDelayWhenAttachingToSpawningPawn) == 0x0020A8, "Member 'AShielderPawn_C::ShielderVisibilityDelayWhenAttachingToSpawningPawn' has a wrong offset!");
static_assert(offsetof(AShielderPawn_C, TC_NPCStatusWearingShielder) == 0x0020B0, "Member 'AShielderPawn_C::TC_NPCStatusWearingShielder' has a wrong offset!");
static_assert(offsetof(AShielderPawn_C, TC_NPCAbilityNonAttackTeleportOut) == 0x0020B8, "Member 'AShielderPawn_C::TC_NPCAbilityNonAttackTeleportOut' has a wrong offset!");
static_assert(offsetof(AShielderPawn_C, TC_NPCAbilityNonAttackTeleportIn) == 0x0020C0, "Member 'AShielderPawn_C::TC_NPCAbilityNonAttackTeleportIn' has a wrong offset!");
static_assert(offsetof(AShielderPawn_C, TC_NPCAbilityNonAttackSummon) == 0x0020C8, "Member 'AShielderPawn_C::TC_NPCAbilityNonAttackSummon' has a wrong offset!");
static_assert(offsetof(AShielderPawn_C, TC_NPCAbilityNonAttackDropNPC) == 0x0020D0, "Member 'AShielderPawn_C::TC_NPCAbilityNonAttackDropNPC' has a wrong offset!");
static_assert(offsetof(AShielderPawn_C, SpringArmRotationTimeMin) == 0x0020D8, "Member 'AShielderPawn_C::SpringArmRotationTimeMin' has a wrong offset!");
static_assert(offsetof(AShielderPawn_C, SpringArmRotationTimeMax) == 0x0020DC, "Member 'AShielderPawn_C::SpringArmRotationTimeMax' has a wrong offset!");
static_assert(offsetof(AShielderPawn_C, OrphanDetachZVelocity) == 0x0020E0, "Member 'AShielderPawn_C::OrphanDetachZVelocity' has a wrong offset!");
static_assert(offsetof(AShielderPawn_C, ShielderAttachPawnAbilitySet) == 0x0020E8, "Member 'AShielderPawn_C::ShielderAttachPawnAbilitySet' has a wrong offset!");
static_assert(offsetof(AShielderPawn_C, GameplayCueShieldReapplied) == 0x002110, "Member 'AShielderPawn_C::GameplayCueShieldReapplied' has a wrong offset!");
static_assert(offsetof(AShielderPawn_C, GameplayCueShieldDestroyed) == 0x002118, "Member 'AShielderPawn_C::GameplayCueShieldDestroyed' has a wrong offset!");
static_assert(offsetof(AShielderPawn_C, Sound_ShieldStart_NoLoop) == 0x002120, "Member 'AShielderPawn_C::Sound_ShieldStart_NoLoop' has a wrong offset!");
static_assert(offsetof(AShielderPawn_C, Sound_ShieldBroken) == 0x002128, "Member 'AShielderPawn_C::Sound_ShieldBroken' has a wrong offset!");
static_assert(offsetof(AShielderPawn_C, Sound_ShieldStart) == 0x002130, "Member 'AShielderPawn_C::Sound_ShieldStart' has a wrong offset!");
static_assert(offsetof(AShielderPawn_C, bShieldApplied) == 0x002138, "Member 'AShielderPawn_C::bShieldApplied' has a wrong offset!");
static_assert(offsetof(AShielderPawn_C, TC_HuskSmasher) == 0x002140, "Member 'AShielderPawn_C::TC_HuskSmasher' has a wrong offset!");
static_assert(offsetof(AShielderPawn_C, TC_HuskTaker) == 0x002148, "Member 'AShielderPawn_C::TC_HuskTaker' has a wrong offset!");
static_assert(offsetof(AShielderPawn_C, GE_HideOnMiniMap) == 0x002150, "Member 'AShielderPawn_C::GE_HideOnMiniMap' has a wrong offset!");
static_assert(offsetof(AShielderPawn_C, Sound_ShieldStart_Spawned) == 0x002158, "Member 'AShielderPawn_C::Sound_ShieldStart_Spawned' has a wrong offset!");
static_assert(offsetof(AShielderPawn_C, SuperShielder) == 0x002160, "Member 'AShielderPawn_C::SuperShielder' has a wrong offset!");
static_assert(offsetof(AShielderPawn_C, SuperShieldOffsetFromGround) == 0x002164, "Member 'AShielderPawn_C::SuperShieldOffsetFromGround' has a wrong offset!");
static_assert(offsetof(AShielderPawn_C, BGA_SuperShielder_Shield_Spawned) == 0x002168, "Member 'AShielderPawn_C::BGA_SuperShielder_Shield_Spawned' has a wrong offset!");

}

