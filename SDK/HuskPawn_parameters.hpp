#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HuskPawn

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function HuskPawn.HuskPawn_C.ExecuteUbergraph_HuskPawn
// 0x06D0 (0x06D0 - 0x0000)
struct HuskPawn_C_ExecuteUbergraph_HuskPawn final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        Temp_object_Variable;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        Temp_object_Variable1;                             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        Temp_object_Variable12;                            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue1;                     // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_23[0x5];                                       // 0x0023(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        Temp_object_Variable123;                           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0030(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               CallFunc_SpawnEmitterAtLocation_ReturnValue;       // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentScale_ReturnValue;         // 0x0048(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue1;           // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortAIPawn*                            K2Node_Event_EnemySpawned;                         // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortProjectileBase*                    K2Node_Event_ProjectileThatSpawnedThisEnemy;       // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_ActorWhoAsked;                        // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortProjectileBase*                    K2Node_Event_Projectile;                           // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortProjectileBase*                    K2Node_Event_FailedProjectile;                     // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_PushMomentum;                         // 0x0080(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_PushDuration;                         // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_OwningFlinger;                        // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_PawnThatDied;                         // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_StartPos;                             // 0x00A0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_MidPos;                               // 0x00AC(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_EndPos;                               // 0x00B8(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_LowWall;                              // 0x00C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_MidWall;                              // 0x00C5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_FullWall;                             // 0x00C6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_WindowWall;                           // 0x00C7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_SpecialAttack;                        // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_Swoop1;                               // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_Soul_Suck;                            // 0x00CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_Portal1;                              // 0x00CB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_Swoop;                                // 0x00CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_SoulSuckMelee;                        // 0x00CD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_Portal;                               // 0x00CE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CF[0x1];                                       // 0x00CF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_BuildingPart;                         // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBTTask_BlueprintBase*                  K2Node_Event_Task;                                 // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_DesiredMoveLocation;                  // 0x00E0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Debug;                                // 0x00EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_Portal_Available_;                    // 0x00ED(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_SuccessfulHit;                        // 0x00EE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_Success;                              // 0x00EF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class ABuildingActor*                         K2Node_Event_BuildingActor1;                       // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABuildingActor*>                 K2Node_Event_BuildingActorList1;                   // 0x00F8(0x0010)(ZeroConstructor, ReferenceParm)
	class ABuildingActor*                         K2Node_Event_BuildingActor;                        // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABuildingActor*>                 K2Node_Event_BuildingActorList;                    // 0x0110(0x0010)(ZeroConstructor, ReferenceParm)
	class AActor*                                 K2Node_Event_BT;                                   // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Collide_;                             // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EGameplayCueEvent                             K2Node_GameplayCueEvent_EventType123;              // 0x0129(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12A[0x6];                                      // 0x012A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayCueParameters                 K2Node_GameplayCueEvent_Parameters123;             // 0x0130(0x00B8)(ContainsInstancedReference)
	struct FHitResult                             CallFunc_GetHitResult_ReturnValue;                 // 0x01E8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             CallFunc_GetHitResult_ReturnValue1;                // 0x0270(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	EPhysicalSurface                              CallFunc_GetFortPhysicalSurface_ReturnValue;       // 0x02F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x02F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x02FA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2FB[0x1];                                      // 0x02FB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x02FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0300(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0304(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0310(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x031C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0328(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_334[0x4];                                      // 0x0334(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0338(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0340(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0348(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0350(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0358(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x035C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0360(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x036C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             CallFunc_GetImpactPhysicalSurfaceSound_ReturnValue; // 0x0378(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit1;             // 0x0380(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap1;          // 0x0381(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_382[0x2];                                      // 0x0382(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time1;                     // 0x0384(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance1;                 // 0x0388(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location1;                 // 0x038C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint1;              // 0x0398(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal1;                   // 0x03A4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal1;             // 0x03B0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3BC[0x4];                                      // 0x03BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat1;                  // 0x03C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor1;                 // 0x03C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent1;             // 0x03D0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName1;              // 0x03D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem1;                  // 0x03E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex1;                // 0x03E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart1;               // 0x03E8(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd1;                 // 0x03F4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotFromX_ReturnValue;                 // 0x0400(0x000C)(IsPlainOldData, NoDestructor)
	uint8                                         Pad_40C[0x4];                                      // 0x040C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue;           // 0x0410(0x0030)(IsPlainOldData, NoDestructor)
	class UParticleSystem*                        Temp_object_Variable1234;                          // 0x0440(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0448(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0454(0x000C)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0460(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGameplayCueEvent                             K2Node_GameplayCueEvent_EventType12;               // 0x046C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_46D[0x3];                                      // 0x046D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayCueParameters                 K2Node_GameplayCueEvent_Parameters12;              // 0x0470(0x00B8)(ContainsInstancedReference)
	EGameplayCueEvent                             K2Node_GameplayCueEvent_EventType1;                // 0x0528(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_529[0x7];                                      // 0x0529(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayCueParameters                 K2Node_GameplayCueEvent_Parameters1;               // 0x0530(0x00B8)(ContainsInstancedReference)
	EGameplayCueEvent                             K2Node_GameplayCueEvent_EventType;                 // 0x05E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5E9[0x7];                                      // 0x05E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayCueParameters                 K2Node_GameplayCueEvent_Parameters;                // 0x05F0(0x00B8)(ContainsInstancedReference)
	EPhysicalSurface                              Temp_byte_Variable;                                // 0x06A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6A9[0x7];                                      // 0x06A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        K2Node_Select_Default;                             // 0x06B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               CallFunc_SpawnEmitterAtLocation_ReturnValue1;      // 0x06B8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               CallFunc_SpawnEmitterAtLocation_ReturnValue12;     // 0x06C0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HuskPawn_C_ExecuteUbergraph_HuskPawn) == 0x000010, "Wrong alignment on HuskPawn_C_ExecuteUbergraph_HuskPawn");
static_assert(sizeof(HuskPawn_C_ExecuteUbergraph_HuskPawn) == 0x0006D0, "Wrong size on HuskPawn_C_ExecuteUbergraph_HuskPawn");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, EntryPoint) == 0x000000, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::EntryPoint' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, Temp_object_Variable) == 0x000008, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, Temp_object_Variable1) == 0x000010, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::Temp_object_Variable1' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, Temp_object_Variable12) == 0x000018, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::Temp_object_Variable12' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, CallFunc_IsDedicatedServer_ReturnValue) == 0x000021, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, CallFunc_IsValid_ReturnValue1) == 0x000022, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::CallFunc_IsValid_ReturnValue1' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, Temp_object_Variable123) == 0x000028, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::Temp_object_Variable123' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000030, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, CallFunc_SpawnEmitterAtLocation_ReturnValue) == 0x000040, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::CallFunc_SpawnEmitterAtLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, CallFunc_K2_GetComponentScale_ReturnValue) == 0x000048, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::CallFunc_K2_GetComponentScale_ReturnValue' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, CallFunc_IsDedicatedServer_ReturnValue1) == 0x000054, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::CallFunc_IsDedicatedServer_ReturnValue1' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, K2Node_Event_EnemySpawned) == 0x000058, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::K2Node_Event_EnemySpawned' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, K2Node_Event_ProjectileThatSpawnedThisEnemy) == 0x000060, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::K2Node_Event_ProjectileThatSpawnedThisEnemy' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, K2Node_Event_ActorWhoAsked) == 0x000068, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::K2Node_Event_ActorWhoAsked' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, K2Node_Event_Projectile) == 0x000070, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::K2Node_Event_Projectile' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, K2Node_Event_FailedProjectile) == 0x000078, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::K2Node_Event_FailedProjectile' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, K2Node_Event_PushMomentum) == 0x000080, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::K2Node_Event_PushMomentum' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, K2Node_Event_PushDuration) == 0x00008C, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::K2Node_Event_PushDuration' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, K2Node_Event_OwningFlinger) == 0x000090, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::K2Node_Event_OwningFlinger' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, K2Node_Event_PawnThatDied) == 0x000098, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::K2Node_Event_PawnThatDied' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, K2Node_Event_StartPos) == 0x0000A0, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::K2Node_Event_StartPos' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, K2Node_Event_MidPos) == 0x0000AC, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::K2Node_Event_MidPos' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, K2Node_Event_EndPos) == 0x0000B8, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::K2Node_Event_EndPos' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, K2Node_Event_LowWall) == 0x0000C4, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::K2Node_Event_LowWall' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, K2Node_Event_MidWall) == 0x0000C5, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::K2Node_Event_MidWall' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, K2Node_Event_FullWall) == 0x0000C6, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::K2Node_Event_FullWall' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, K2Node_Event_WindowWall) == 0x0000C7, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::K2Node_Event_WindowWall' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, K2Node_Event_SpecialAttack) == 0x0000C8, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::K2Node_Event_SpecialAttack' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, K2Node_Event_Swoop1) == 0x0000C9, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::K2Node_Event_Swoop1' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, K2Node_Event_Soul_Suck) == 0x0000CA, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::K2Node_Event_Soul_Suck' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, K2Node_Event_Portal1) == 0x0000CB, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::K2Node_Event_Portal1' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, K2Node_Event_Swoop) == 0x0000CC, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::K2Node_Event_Swoop' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, K2Node_Event_SoulSuckMelee) == 0x0000CD, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::K2Node_Event_SoulSuckMelee' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, K2Node_Event_Portal) == 0x0000CE, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::K2Node_Event_Portal' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, K2Node_Event_BuildingPart) == 0x0000D0, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::K2Node_Event_BuildingPart' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, K2Node_Event_Task) == 0x0000D8, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::K2Node_Event_Task' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, K2Node_Event_DesiredMoveLocation) == 0x0000E0, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::K2Node_Event_DesiredMoveLocation' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, K2Node_Event_Debug) == 0x0000EC, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::K2Node_Event_Debug' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, K2Node_Event_Portal_Available_) == 0x0000ED, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::K2Node_Event_Portal_Available_' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, K2Node_Event_SuccessfulHit) == 0x0000EE, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::K2Node_Event_SuccessfulHit' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, K2Node_Event_Success) == 0x0000EF, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::K2Node_Event_Success' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, K2Node_Event_BuildingActor1) == 0x0000F0, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::K2Node_Event_BuildingActor1' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, K2Node_Event_BuildingActorList1) == 0x0000F8, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::K2Node_Event_BuildingActorList1' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, K2Node_Event_BuildingActor) == 0x000108, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::K2Node_Event_BuildingActor' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, K2Node_Event_BuildingActorList) == 0x000110, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::K2Node_Event_BuildingActorList' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, K2Node_Event_BT) == 0x000120, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::K2Node_Event_BT' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, K2Node_Event_Collide_) == 0x000128, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::K2Node_Event_Collide_' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, K2Node_GameplayCueEvent_EventType123) == 0x000129, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::K2Node_GameplayCueEvent_EventType123' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, K2Node_GameplayCueEvent_Parameters123) == 0x000130, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::K2Node_GameplayCueEvent_Parameters123' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, CallFunc_GetHitResult_ReturnValue) == 0x0001E8, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::CallFunc_GetHitResult_ReturnValue' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, CallFunc_GetHitResult_ReturnValue1) == 0x000270, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::CallFunc_GetHitResult_ReturnValue1' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, CallFunc_GetFortPhysicalSurface_ReturnValue) == 0x0002F8, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::CallFunc_GetFortPhysicalSurface_ReturnValue' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, CallFunc_BreakHitResult_bBlockingHit) == 0x0002F9, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, CallFunc_BreakHitResult_bInitialOverlap) == 0x0002FA, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, CallFunc_BreakHitResult_Time) == 0x0002FC, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, CallFunc_BreakHitResult_Distance) == 0x000300, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, CallFunc_BreakHitResult_Location) == 0x000304, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, CallFunc_BreakHitResult_ImpactPoint) == 0x000310, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, CallFunc_BreakHitResult_Normal) == 0x00031C, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, CallFunc_BreakHitResult_ImpactNormal) == 0x000328, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, CallFunc_BreakHitResult_PhysMat) == 0x000338, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, CallFunc_BreakHitResult_HitActor) == 0x000340, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, CallFunc_BreakHitResult_HitComponent) == 0x000348, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, CallFunc_BreakHitResult_HitBoneName) == 0x000350, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, CallFunc_BreakHitResult_HitItem) == 0x000358, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, CallFunc_BreakHitResult_FaceIndex) == 0x00035C, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, CallFunc_BreakHitResult_TraceStart) == 0x000360, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, CallFunc_BreakHitResult_TraceEnd) == 0x00036C, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, CallFunc_GetImpactPhysicalSurfaceSound_ReturnValue) == 0x000378, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::CallFunc_GetImpactPhysicalSurfaceSound_ReturnValue' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, CallFunc_BreakHitResult_bBlockingHit1) == 0x000380, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::CallFunc_BreakHitResult_bBlockingHit1' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, CallFunc_BreakHitResult_bInitialOverlap1) == 0x000381, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::CallFunc_BreakHitResult_bInitialOverlap1' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, CallFunc_BreakHitResult_Time1) == 0x000384, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::CallFunc_BreakHitResult_Time1' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, CallFunc_BreakHitResult_Distance1) == 0x000388, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::CallFunc_BreakHitResult_Distance1' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, CallFunc_BreakHitResult_Location1) == 0x00038C, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::CallFunc_BreakHitResult_Location1' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, CallFunc_BreakHitResult_ImpactPoint1) == 0x000398, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::CallFunc_BreakHitResult_ImpactPoint1' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, CallFunc_BreakHitResult_Normal1) == 0x0003A4, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::CallFunc_BreakHitResult_Normal1' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, CallFunc_BreakHitResult_ImpactNormal1) == 0x0003B0, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::CallFunc_BreakHitResult_ImpactNormal1' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, CallFunc_BreakHitResult_PhysMat1) == 0x0003C0, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::CallFunc_BreakHitResult_PhysMat1' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, CallFunc_BreakHitResult_HitActor1) == 0x0003C8, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::CallFunc_BreakHitResult_HitActor1' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, CallFunc_BreakHitResult_HitComponent1) == 0x0003D0, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::CallFunc_BreakHitResult_HitComponent1' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, CallFunc_BreakHitResult_HitBoneName1) == 0x0003D8, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::CallFunc_BreakHitResult_HitBoneName1' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, CallFunc_BreakHitResult_HitItem1) == 0x0003E0, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::CallFunc_BreakHitResult_HitItem1' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, CallFunc_BreakHitResult_FaceIndex1) == 0x0003E4, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::CallFunc_BreakHitResult_FaceIndex1' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, CallFunc_BreakHitResult_TraceStart1) == 0x0003E8, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::CallFunc_BreakHitResult_TraceStart1' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, CallFunc_BreakHitResult_TraceEnd1) == 0x0003F4, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::CallFunc_BreakHitResult_TraceEnd1' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, CallFunc_MakeRotFromX_ReturnValue) == 0x000400, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::CallFunc_MakeRotFromX_ReturnValue' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, CallFunc_GetSocketTransform_ReturnValue) == 0x000410, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::CallFunc_GetSocketTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, Temp_object_Variable1234) == 0x000440, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::Temp_object_Variable1234' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, CallFunc_BreakTransform_Location) == 0x000448, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, CallFunc_BreakTransform_Rotation) == 0x000454, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, CallFunc_BreakTransform_Scale) == 0x000460, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, K2Node_GameplayCueEvent_EventType12) == 0x00046C, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::K2Node_GameplayCueEvent_EventType12' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, K2Node_GameplayCueEvent_Parameters12) == 0x000470, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::K2Node_GameplayCueEvent_Parameters12' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, K2Node_GameplayCueEvent_EventType1) == 0x000528, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::K2Node_GameplayCueEvent_EventType1' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, K2Node_GameplayCueEvent_Parameters1) == 0x000530, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::K2Node_GameplayCueEvent_Parameters1' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, K2Node_GameplayCueEvent_EventType) == 0x0005E8, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::K2Node_GameplayCueEvent_EventType' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, K2Node_GameplayCueEvent_Parameters) == 0x0005F0, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::K2Node_GameplayCueEvent_Parameters' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, Temp_byte_Variable) == 0x0006A8, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, K2Node_Select_Default) == 0x0006B0, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, CallFunc_SpawnEmitterAtLocation_ReturnValue1) == 0x0006B8, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::CallFunc_SpawnEmitterAtLocation_ReturnValue1' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ExecuteUbergraph_HuskPawn, CallFunc_SpawnEmitterAtLocation_ReturnValue12) == 0x0006C0, "Member 'HuskPawn_C_ExecuteUbergraph_HuskPawn::CallFunc_SpawnEmitterAtLocation_ReturnValue12' has a wrong offset!");

// Function HuskPawn.HuskPawn_C.GameplayCue.Damage.Shielded
// 0x00C0 (0x00C0 - 0x0000)
struct HuskPawn_C_GameplayCue_Damage_Shielded final
{
public:
	EGameplayCueEvent                             EventType;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x00B8)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
};
static_assert(alignof(HuskPawn_C_GameplayCue_Damage_Shielded) == 0x000008, "Wrong alignment on HuskPawn_C_GameplayCue_Damage_Shielded");
static_assert(sizeof(HuskPawn_C_GameplayCue_Damage_Shielded) == 0x0000C0, "Wrong size on HuskPawn_C_GameplayCue_Damage_Shielded");
static_assert(offsetof(HuskPawn_C_GameplayCue_Damage_Shielded, EventType) == 0x000000, "Member 'HuskPawn_C_GameplayCue_Damage_Shielded::EventType' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_GameplayCue_Damage_Shielded, Parameters) == 0x000008, "Member 'HuskPawn_C_GameplayCue_Damage_Shielded::Parameters' has a wrong offset!");

// Function HuskPawn.HuskPawn_C.GameplayCue.Shield.Destroyed
// 0x00C0 (0x00C0 - 0x0000)
struct HuskPawn_C_GameplayCue_Shield_Destroyed final
{
public:
	EGameplayCueEvent                             EventType;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x00B8)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
};
static_assert(alignof(HuskPawn_C_GameplayCue_Shield_Destroyed) == 0x000008, "Wrong alignment on HuskPawn_C_GameplayCue_Shield_Destroyed");
static_assert(sizeof(HuskPawn_C_GameplayCue_Shield_Destroyed) == 0x0000C0, "Wrong size on HuskPawn_C_GameplayCue_Shield_Destroyed");
static_assert(offsetof(HuskPawn_C_GameplayCue_Shield_Destroyed, EventType) == 0x000000, "Member 'HuskPawn_C_GameplayCue_Shield_Destroyed::EventType' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_GameplayCue_Shield_Destroyed, Parameters) == 0x000008, "Member 'HuskPawn_C_GameplayCue_Shield_Destroyed::Parameters' has a wrong offset!");

// Function HuskPawn.HuskPawn_C.GameplayCue.Shield.Reapplied
// 0x00C0 (0x00C0 - 0x0000)
struct HuskPawn_C_GameplayCue_Shield_Reapplied final
{
public:
	EGameplayCueEvent                             EventType;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x00B8)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
};
static_assert(alignof(HuskPawn_C_GameplayCue_Shield_Reapplied) == 0x000008, "Wrong alignment on HuskPawn_C_GameplayCue_Shield_Reapplied");
static_assert(sizeof(HuskPawn_C_GameplayCue_Shield_Reapplied) == 0x0000C0, "Wrong size on HuskPawn_C_GameplayCue_Shield_Reapplied");
static_assert(offsetof(HuskPawn_C_GameplayCue_Shield_Reapplied, EventType) == 0x000000, "Member 'HuskPawn_C_GameplayCue_Shield_Reapplied::EventType' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_GameplayCue_Shield_Reapplied, Parameters) == 0x000008, "Member 'HuskPawn_C_GameplayCue_Shield_Reapplied::Parameters' has a wrong offset!");

// Function HuskPawn.HuskPawn_C.GameplayCue.Impact.Physical.Creature
// 0x00C0 (0x00C0 - 0x0000)
struct HuskPawn_C_GameplayCue_Impact_Physical_Creature final
{
public:
	EGameplayCueEvent                             EventType;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x00B8)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
};
static_assert(alignof(HuskPawn_C_GameplayCue_Impact_Physical_Creature) == 0x000008, "Wrong alignment on HuskPawn_C_GameplayCue_Impact_Physical_Creature");
static_assert(sizeof(HuskPawn_C_GameplayCue_Impact_Physical_Creature) == 0x0000C0, "Wrong size on HuskPawn_C_GameplayCue_Impact_Physical_Creature");
static_assert(offsetof(HuskPawn_C_GameplayCue_Impact_Physical_Creature, EventType) == 0x000000, "Member 'HuskPawn_C_GameplayCue_Impact_Physical_Creature::EventType' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_GameplayCue_Impact_Physical_Creature, Parameters) == 0x000008, "Member 'HuskPawn_C_GameplayCue_Impact_Physical_Creature::Parameters' has a wrong offset!");

// Function HuskPawn.HuskPawn_C.PortalCollision
// 0x0001 (0x0001 - 0x0000)
struct HuskPawn_C_PortalCollision final
{
public:
	bool                                          Collide_;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HuskPawn_C_PortalCollision) == 0x000001, "Wrong alignment on HuskPawn_C_PortalCollision");
static_assert(sizeof(HuskPawn_C_PortalCollision) == 0x000001, "Wrong size on HuskPawn_C_PortalCollision");
static_assert(offsetof(HuskPawn_C_PortalCollision, Collide_) == 0x000000, "Member 'HuskPawn_C_PortalCollision::Collide_' has a wrong offset!");

// Function HuskPawn.HuskPawn_C.PortalGet
// 0x0020 (0x0020 - 0x0000)
struct HuskPawn_C_PortalGet final
{
public:
	class ABuildingActor*                         BuildingActor;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABuildingActor*>                 BuildingActorList;                                 // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	class AActor*                                 BT;                                                // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HuskPawn_C_PortalGet) == 0x000008, "Wrong alignment on HuskPawn_C_PortalGet");
static_assert(sizeof(HuskPawn_C_PortalGet) == 0x000020, "Wrong size on HuskPawn_C_PortalGet");
static_assert(offsetof(HuskPawn_C_PortalGet, BuildingActor) == 0x000000, "Member 'HuskPawn_C_PortalGet::BuildingActor' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_PortalGet, BuildingActorList) == 0x000008, "Member 'HuskPawn_C_PortalGet::BuildingActorList' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_PortalGet, BT) == 0x000018, "Member 'HuskPawn_C_PortalGet::BT' has a wrong offset!");

// Function HuskPawn.HuskPawn_C.PortalAdd
// 0x0018 (0x0018 - 0x0000)
struct HuskPawn_C_PortalAdd final
{
public:
	class ABuildingActor*                         BuildingActor;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABuildingActor*>                 BuildingActorList;                                 // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
};
static_assert(alignof(HuskPawn_C_PortalAdd) == 0x000008, "Wrong alignment on HuskPawn_C_PortalAdd");
static_assert(sizeof(HuskPawn_C_PortalAdd) == 0x000018, "Wrong size on HuskPawn_C_PortalAdd");
static_assert(offsetof(HuskPawn_C_PortalAdd, BuildingActor) == 0x000000, "Member 'HuskPawn_C_PortalAdd::BuildingActor' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_PortalAdd, BuildingActorList) == 0x000008, "Member 'HuskPawn_C_PortalAdd::BuildingActorList' has a wrong offset!");

// Function HuskPawn.HuskPawn_C.TakerSoulSuckSoundBegin
// 0x0001 (0x0001 - 0x0000)
struct HuskPawn_C_TakerSoulSuckSoundBegin final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HuskPawn_C_TakerSoulSuckSoundBegin) == 0x000001, "Wrong alignment on HuskPawn_C_TakerSoulSuckSoundBegin");
static_assert(sizeof(HuskPawn_C_TakerSoulSuckSoundBegin) == 0x000001, "Wrong size on HuskPawn_C_TakerSoulSuckSoundBegin");
static_assert(offsetof(HuskPawn_C_TakerSoulSuckSoundBegin, Success) == 0x000000, "Member 'HuskPawn_C_TakerSoulSuckSoundBegin::Success' has a wrong offset!");

// Function HuskPawn.HuskPawn_C.TakerAttackFSM
// 0x0001 (0x0001 - 0x0000)
struct HuskPawn_C_TakerAttackFSM final
{
public:
	bool                                          SuccessfulHit;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HuskPawn_C_TakerAttackFSM) == 0x000001, "Wrong alignment on HuskPawn_C_TakerAttackFSM");
static_assert(sizeof(HuskPawn_C_TakerAttackFSM) == 0x000001, "Wrong size on HuskPawn_C_TakerAttackFSM");
static_assert(offsetof(HuskPawn_C_TakerAttackFSM, SuccessfulHit) == 0x000000, "Member 'HuskPawn_C_TakerAttackFSM::SuccessfulHit' has a wrong offset!");

// Function HuskPawn.HuskPawn_C.IsTakerWallPortalAvailable
// 0x0001 (0x0001 - 0x0000)
struct HuskPawn_C_IsTakerWallPortalAvailable final
{
public:
	bool                                          Portal_Available_;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HuskPawn_C_IsTakerWallPortalAvailable) == 0x000001, "Wrong alignment on HuskPawn_C_IsTakerWallPortalAvailable");
static_assert(sizeof(HuskPawn_C_IsTakerWallPortalAvailable) == 0x000001, "Wrong size on HuskPawn_C_IsTakerWallPortalAvailable");
static_assert(offsetof(HuskPawn_C_IsTakerWallPortalAvailable, Portal_Available_) == 0x000000, "Member 'HuskPawn_C_IsTakerWallPortalAvailable::Portal_Available_' has a wrong offset!");

// Function HuskPawn.HuskPawn_C.TakerWallPortalBehavior
// 0x0020 (0x0020 - 0x0000)
struct HuskPawn_C_TakerWallPortalBehavior final
{
public:
	class AActor*                                 BuildingPart;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBTTask_BlueprintBase*                  Task;                                              // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DesiredMoveLocation;                               // 0x0010(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Debug;                                             // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HuskPawn_C_TakerWallPortalBehavior) == 0x000008, "Wrong alignment on HuskPawn_C_TakerWallPortalBehavior");
static_assert(sizeof(HuskPawn_C_TakerWallPortalBehavior) == 0x000020, "Wrong size on HuskPawn_C_TakerWallPortalBehavior");
static_assert(offsetof(HuskPawn_C_TakerWallPortalBehavior, BuildingPart) == 0x000000, "Member 'HuskPawn_C_TakerWallPortalBehavior::BuildingPart' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_TakerWallPortalBehavior, Task) == 0x000008, "Member 'HuskPawn_C_TakerWallPortalBehavior::Task' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_TakerWallPortalBehavior, DesiredMoveLocation) == 0x000010, "Member 'HuskPawn_C_TakerWallPortalBehavior::DesiredMoveLocation' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_TakerWallPortalBehavior, Debug) == 0x00001C, "Member 'HuskPawn_C_TakerWallPortalBehavior::Debug' has a wrong offset!");

// Function HuskPawn.HuskPawn_C.ResetTakerSpecialAttackTimer
// 0x0003 (0x0003 - 0x0000)
struct HuskPawn_C_ResetTakerSpecialAttackTimer final
{
public:
	bool                                          Swoop;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          SoulSuckMelee;                                     // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Portal;                                            // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HuskPawn_C_ResetTakerSpecialAttackTimer) == 0x000001, "Wrong alignment on HuskPawn_C_ResetTakerSpecialAttackTimer");
static_assert(sizeof(HuskPawn_C_ResetTakerSpecialAttackTimer) == 0x000003, "Wrong size on HuskPawn_C_ResetTakerSpecialAttackTimer");
static_assert(offsetof(HuskPawn_C_ResetTakerSpecialAttackTimer, Swoop) == 0x000000, "Member 'HuskPawn_C_ResetTakerSpecialAttackTimer::Swoop' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ResetTakerSpecialAttackTimer, SoulSuckMelee) == 0x000001, "Member 'HuskPawn_C_ResetTakerSpecialAttackTimer::SoulSuckMelee' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_ResetTakerSpecialAttackTimer, Portal) == 0x000002, "Member 'HuskPawn_C_ResetTakerSpecialAttackTimer::Portal' has a wrong offset!");

// Function HuskPawn.HuskPawn_C.VerifyTakerAttack
// 0x0004 (0x0004 - 0x0000)
struct HuskPawn_C_VerifyTakerAttack final
{
public:
	bool                                          SpecialAttack;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Swoop;                                             // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Soul_Suck;                                         // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Portal;                                            // 0x0003(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HuskPawn_C_VerifyTakerAttack) == 0x000001, "Wrong alignment on HuskPawn_C_VerifyTakerAttack");
static_assert(sizeof(HuskPawn_C_VerifyTakerAttack) == 0x000004, "Wrong size on HuskPawn_C_VerifyTakerAttack");
static_assert(offsetof(HuskPawn_C_VerifyTakerAttack, SpecialAttack) == 0x000000, "Member 'HuskPawn_C_VerifyTakerAttack::SpecialAttack' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_VerifyTakerAttack, Swoop) == 0x000001, "Member 'HuskPawn_C_VerifyTakerAttack::Swoop' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_VerifyTakerAttack, Soul_Suck) == 0x000002, "Member 'HuskPawn_C_VerifyTakerAttack::Soul_Suck' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_VerifyTakerAttack, Portal) == 0x000003, "Member 'HuskPawn_C_VerifyTakerAttack::Portal' has a wrong offset!");

// Function HuskPawn.HuskPawn_C.MantleStart
// 0x0028 (0x0028 - 0x0000)
struct HuskPawn_C_MantleStart final
{
public:
	struct FVector                                StartPos;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MidPos;                                            // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                EndPos;                                            // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LowWall;                                           // 0x0024(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          MidWall;                                           // 0x0025(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          FullWall;                                          // 0x0026(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          WindowWall;                                        // 0x0027(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HuskPawn_C_MantleStart) == 0x000004, "Wrong alignment on HuskPawn_C_MantleStart");
static_assert(sizeof(HuskPawn_C_MantleStart) == 0x000028, "Wrong size on HuskPawn_C_MantleStart");
static_assert(offsetof(HuskPawn_C_MantleStart, StartPos) == 0x000000, "Member 'HuskPawn_C_MantleStart::StartPos' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_MantleStart, MidPos) == 0x00000C, "Member 'HuskPawn_C_MantleStart::MidPos' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_MantleStart, EndPos) == 0x000018, "Member 'HuskPawn_C_MantleStart::EndPos' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_MantleStart, LowWall) == 0x000024, "Member 'HuskPawn_C_MantleStart::LowWall' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_MantleStart, MidWall) == 0x000025, "Member 'HuskPawn_C_MantleStart::MidWall' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_MantleStart, FullWall) == 0x000026, "Member 'HuskPawn_C_MantleStart::FullWall' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_MantleStart, WindowWall) == 0x000027, "Member 'HuskPawn_C_MantleStart::WindowWall' has a wrong offset!");

// Function HuskPawn.HuskPawn_C.FlingerEnemyDied
// 0x0008 (0x0008 - 0x0000)
struct HuskPawn_C_FlingerEnemyDied final
{
public:
	class APawn*                                  PawnThatDied;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HuskPawn_C_FlingerEnemyDied) == 0x000008, "Wrong alignment on HuskPawn_C_FlingerEnemyDied");
static_assert(sizeof(HuskPawn_C_FlingerEnemyDied) == 0x000008, "Wrong size on HuskPawn_C_FlingerEnemyDied");
static_assert(offsetof(HuskPawn_C_FlingerEnemyDied, PawnThatDied) == 0x000000, "Member 'HuskPawn_C_FlingerEnemyDied::PawnThatDied' has a wrong offset!");

// Function HuskPawn.HuskPawn_C.AlertEnemySpawnedByFlinger
// 0x0018 (0x0018 - 0x0000)
struct HuskPawn_C_AlertEnemySpawnedByFlinger final
{
public:
	struct FVector                                PushMomentum_0;                                    // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PushDuration;                                      // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  OwningFlinger;                                     // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HuskPawn_C_AlertEnemySpawnedByFlinger) == 0x000008, "Wrong alignment on HuskPawn_C_AlertEnemySpawnedByFlinger");
static_assert(sizeof(HuskPawn_C_AlertEnemySpawnedByFlinger) == 0x000018, "Wrong size on HuskPawn_C_AlertEnemySpawnedByFlinger");
static_assert(offsetof(HuskPawn_C_AlertEnemySpawnedByFlinger, PushMomentum_0) == 0x000000, "Member 'HuskPawn_C_AlertEnemySpawnedByFlinger::PushMomentum_0' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_AlertEnemySpawnedByFlinger, PushDuration) == 0x00000C, "Member 'HuskPawn_C_AlertEnemySpawnedByFlinger::PushDuration' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_AlertEnemySpawnedByFlinger, OwningFlinger) == 0x000010, "Member 'HuskPawn_C_AlertEnemySpawnedByFlinger::OwningFlinger' has a wrong offset!");

// Function HuskPawn.HuskPawn_C.CanFlingerSpawnAnEnemy
// 0x0008 (0x0008 - 0x0000)
struct HuskPawn_C_CanFlingerSpawnAnEnemy final
{
public:
	class AActor*                                 ActorWhoAsked;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HuskPawn_C_CanFlingerSpawnAnEnemy) == 0x000008, "Wrong alignment on HuskPawn_C_CanFlingerSpawnAnEnemy");
static_assert(sizeof(HuskPawn_C_CanFlingerSpawnAnEnemy) == 0x000008, "Wrong size on HuskPawn_C_CanFlingerSpawnAnEnemy");
static_assert(offsetof(HuskPawn_C_CanFlingerSpawnAnEnemy, ActorWhoAsked) == 0x000000, "Member 'HuskPawn_C_CanFlingerSpawnAnEnemy::ActorWhoAsked' has a wrong offset!");

// Function HuskPawn.HuskPawn_C.FlingerEnemyFailedToSpawn
// 0x0008 (0x0008 - 0x0000)
struct HuskPawn_C_FlingerEnemyFailedToSpawn final
{
public:
	class AFortProjectileBase*                    FailedProjectile;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HuskPawn_C_FlingerEnemyFailedToSpawn) == 0x000008, "Wrong alignment on HuskPawn_C_FlingerEnemyFailedToSpawn");
static_assert(sizeof(HuskPawn_C_FlingerEnemyFailedToSpawn) == 0x000008, "Wrong size on HuskPawn_C_FlingerEnemyFailedToSpawn");
static_assert(offsetof(HuskPawn_C_FlingerEnemyFailedToSpawn, FailedProjectile) == 0x000000, "Member 'HuskPawn_C_FlingerEnemyFailedToSpawn::FailedProjectile' has a wrong offset!");

// Function HuskPawn.HuskPawn_C.FlingerSpawnedAnEnemy
// 0x0010 (0x0010 - 0x0000)
struct HuskPawn_C_FlingerSpawnedAnEnemy final
{
public:
	class AFortAIPawn*                            EnemySpawned;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortProjectileBase*                    ProjectileThatSpawnedThisEnemy;                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HuskPawn_C_FlingerSpawnedAnEnemy) == 0x000008, "Wrong alignment on HuskPawn_C_FlingerSpawnedAnEnemy");
static_assert(sizeof(HuskPawn_C_FlingerSpawnedAnEnemy) == 0x000010, "Wrong size on HuskPawn_C_FlingerSpawnedAnEnemy");
static_assert(offsetof(HuskPawn_C_FlingerSpawnedAnEnemy, EnemySpawned) == 0x000000, "Member 'HuskPawn_C_FlingerSpawnedAnEnemy::EnemySpawned' has a wrong offset!");
static_assert(offsetof(HuskPawn_C_FlingerSpawnedAnEnemy, ProjectileThatSpawnedThisEnemy) == 0x000008, "Member 'HuskPawn_C_FlingerSpawnedAnEnemy::ProjectileThatSpawnedThisEnemy' has a wrong offset!");

// Function HuskPawn.HuskPawn_C.FlingerThrewAProjectileContainingAnEnemy
// 0x0008 (0x0008 - 0x0000)
struct HuskPawn_C_FlingerThrewAProjectileContainingAnEnemy final
{
public:
	class AFortProjectileBase*                    Projectile;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HuskPawn_C_FlingerThrewAProjectileContainingAnEnemy) == 0x000008, "Wrong alignment on HuskPawn_C_FlingerThrewAProjectileContainingAnEnemy");
static_assert(sizeof(HuskPawn_C_FlingerThrewAProjectileContainingAnEnemy) == 0x000008, "Wrong size on HuskPawn_C_FlingerThrewAProjectileContainingAnEnemy");
static_assert(offsetof(HuskPawn_C_FlingerThrewAProjectileContainingAnEnemy, Projectile) == 0x000000, "Member 'HuskPawn_C_FlingerThrewAProjectileContainingAnEnemy::Projectile' has a wrong offset!");

}

