#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_Prj_M80

#include "Basic.hpp"

#include "FortniteGame_classes.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass B_Prj_M80.B_Prj_M80_C
// 0x0050 (0x0868 - 0x0818)
class AB_Prj_M80_C final : public AFortProjectileBase
{
public:
	uint8                                         Pad_818[0x8];                                      // 0x0818(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0820(0x0008)(Transient, DuplicateTransient)
	class UAudioComponent*                        Cue_Fuse_Loop_Sound;                               // 0x0828(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_M80Projectile;                                   // 0x0830(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitLocation;                                       // 0x0838(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_844[0x4];                                      // 0x0844(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        P_ImpactEffects;                                   // 0x0848(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Cue_ExplosionSound;                                // 0x0850(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Explo_Delay_Min;                                   // 0x0858(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Explo_Delay_Max;                                   // 0x085C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UForceFeedbackEffect*                   ExplosionForceFeedback;                            // 0x0860(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_B_Prj_M80(int32 EntryPoint);
	void ReceiveBeginPlay();
	void OnExploded(const TArray<class AActor*>& HitActors, const TArray<struct FHitResult>& HitResults);
	void ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation_0, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_Prj_M80_C">();
	}
	static class AB_Prj_M80_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AB_Prj_M80_C>();
	}
};
static_assert(alignof(AB_Prj_M80_C) == 0x000008, "Wrong alignment on AB_Prj_M80_C");
static_assert(sizeof(AB_Prj_M80_C) == 0x000868, "Wrong size on AB_Prj_M80_C");
static_assert(offsetof(AB_Prj_M80_C, UberGraphFrame) == 0x000820, "Member 'AB_Prj_M80_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AB_Prj_M80_C, Cue_Fuse_Loop_Sound) == 0x000828, "Member 'AB_Prj_M80_C::Cue_Fuse_Loop_Sound' has a wrong offset!");
static_assert(offsetof(AB_Prj_M80_C, P_M80Projectile) == 0x000830, "Member 'AB_Prj_M80_C::P_M80Projectile' has a wrong offset!");
static_assert(offsetof(AB_Prj_M80_C, HitLocation) == 0x000838, "Member 'AB_Prj_M80_C::HitLocation' has a wrong offset!");
static_assert(offsetof(AB_Prj_M80_C, P_ImpactEffects) == 0x000848, "Member 'AB_Prj_M80_C::P_ImpactEffects' has a wrong offset!");
static_assert(offsetof(AB_Prj_M80_C, Cue_ExplosionSound) == 0x000850, "Member 'AB_Prj_M80_C::Cue_ExplosionSound' has a wrong offset!");
static_assert(offsetof(AB_Prj_M80_C, Explo_Delay_Min) == 0x000858, "Member 'AB_Prj_M80_C::Explo_Delay_Min' has a wrong offset!");
static_assert(offsetof(AB_Prj_M80_C, Explo_Delay_Max) == 0x00085C, "Member 'AB_Prj_M80_C::Explo_Delay_Max' has a wrong offset!");
static_assert(offsetof(AB_Prj_M80_C, ExplosionForceFeedback) == 0x000860, "Member 'AB_Prj_M80_C::ExplosionForceFeedback' has a wrong offset!");

}

