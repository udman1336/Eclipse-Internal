#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_Athena_ProjWithTrajectory

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_Athena_ProjWithTrajectory.GA_Athena_ProjWithTrajectory_C
// 0x0270 (0x0D58 - 0x0AE8)
class UGA_Athena_ProjWithTrajectory_C : public UFortGameplayAbility
{
public:
	uint8                                         Pad_AE8[0x8];                                      // 0x0AE8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0AF0(0x0008)(Transient, DuplicateTransient)
	struct FGameplayTag                           EventActivation;                                   // 0x0AF8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           EventComplete;                                     // 0x0B00(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Prj_Grenade;                                       // 0x0B08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GrenadeSpeedMin;                                   // 0x0B10(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GrenadeSpeedMax;                                   // 0x0B14(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GravityScale;                                      // 0x0B18(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B1C[0x4];                                      // 0x0B1C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             GrenadeSound;                                      // 0x0B20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           EC_DefaultExplosion;                               // 0x0B28(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FFortGameplayEffectContainerSpec       EC_ReturnedEffect;                                 // 0x0B30(0x0080)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         ExplosionRadius;                                   // 0x0BB0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AdditionalThrowAngle;                              // 0x0BB4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFortFeedbackHandle                    GrenadeDialogFeedback;                             // 0x0BB8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	bool                                          GrenadeAmmo;                                       // 0x0BD0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          PlasmaGrenades;                                    // 0x0BD1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Flashbang;                                         // 0x0BD2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BD3[0x1];                                      // 0x0BD3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                GrenadeTargetingOriginOffset;                      // 0x0BD4(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortProjectileBase*                    DummyProjectile;                                   // 0x0BE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DummyShouldBounce;                                 // 0x0BE8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BE9[0x3];                                      // 0x0BE9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DummyBounciness;                                   // 0x0BEC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DummyFriction;                                     // 0x0BF0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TrajectoryUpdateInterval;                          // 0x0BF4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DummyMaxSpeed;                                     // 0x0BF8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DummyGravity;                                      // 0x0BFC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DummyTimeStep;                                     // 0x0C00(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DummyExtent;                                       // 0x0C04(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InThrowWindup;                                     // 0x0C08(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C09[0x7];                                      // 0x0C09(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_ProjectileTrajectory_C*             TrajectoryIndicator;                               // 0x0C10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 TrajectoryIndicatorClass;                          // 0x0C18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFortGameplayAbilityMontageInfo        ThrowWindupMontage;                                // 0x0C20(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          AbilityKeyPressed;                                 // 0x0C80(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C81[0x3];                                      // 0x0C81(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxSpeedPitch;                                     // 0x0C84(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinSpeedPitch;                                     // 0x0C88(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C8C[0x4];                                      // 0x0C8C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEventData                     Event_Data;                                        // 0x0C90(0x00A8)(Edit, BlueprintVisible, DisableEditOnInstance)
	class AFortPlayerPawn*                        PlayerPawn;                                        // 0x0D38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxTossPitch;                                      // 0x0D40(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxTrajectoryBounces;                              // 0x0D44(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PostThrowCancelDelay;                              // 0x0D48(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D4C[0x4];                                      // 0x0D4C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortProjectileBase*                    GrenadeReference;                                  // 0x0D50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_GA_Athena_ProjWithTrajectory(int32 EntryPoint);
	void AthenaGrenadeSpawned(class AFortProjectileBase* GrenadeReference_0);
	void TossGrenade();
	void CleanupTrajectoryDisplay();
	void K2_OnEndAbility(bool bWasCancelled);
	void OnAbilityInputReleased();
	void Server_SpawnProjectile(const struct FVector& Location, const struct FRotator& Direction);
	void K2_ActivateAbility();
	void OnFinish_8B217C0E49D2D455A906EA8EEC307D0B();
	void OnFinish_D9A850F94B9C369C67CCD89C7B5492BD();
	void OnCompleted_FEC68BA94D83D96FDD282EB15935D61B();
	void OnBlendOut_FEC68BA94D83D96FDD282EB15935D61B();
	void OnInterrupted_FEC68BA94D83D96FDD282EB15935D61B();
	void OnCancelled_FEC68BA94D83D96FDD282EB15935D61B();
	void OnFinish_096929144FF7E14AFEB2B388A786D6BD();
	void OnFinish_74A6C2A243F8F5710A8F04AD536F05F9();
	void Triggered_1EDA62904AD9995FD9ABFE99B3E783C8(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void Cancelled_1EDA62904AD9995FD9ABFE99B3E783C8(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void Completed_1EDA62904AD9995FD9ABFE99B3E783C8(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void Created_B9FD7A0A43AF00E4A8E57AAAC98E2A8D(const struct FProjectileEventData& ProjectileData);
	void Touched_B9FD7A0A43AF00E4A8E57AAAC98E2A8D(const struct FProjectileEventData& ProjectileData);
	void Bounced_B9FD7A0A43AF00E4A8E57AAAC98E2A8D(const struct FProjectileEventData& ProjectileData);
	void Stopped_B9FD7A0A43AF00E4A8E57AAAC98E2A8D(const struct FProjectileEventData& ProjectileData);
	void Exploded_B9FD7A0A43AF00E4A8E57AAAC98E2A8D(const struct FProjectileEventData& ProjectileData);
	void Destroyed_B9FD7A0A43AF00E4A8E57AAAC98E2A8D(const struct FProjectileEventData& ProjectileData);
	void SetupGrenade(float AimPitch, class UClass** Base_Grenade, float* Projectile_Speed, struct FFortGameplayEffectContainerSpec* Explosion_Gameplay_Spec, float* Projectile_Gravity_Scale);
	void SetupDummyProjectile();
	void UpdateTrajectorySpline();

	void SpawnLocationAndRotation(struct FVector* OutLoc, struct FRotator* OutRot) const;
	void CalcGrenadeSpeedFromPitch(float AimPitch, float* GrenadeSpeed) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_Athena_ProjWithTrajectory_C">();
	}
	static class UGA_Athena_ProjWithTrajectory_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_Athena_ProjWithTrajectory_C>();
	}
};
static_assert(alignof(UGA_Athena_ProjWithTrajectory_C) == 0x000008, "Wrong alignment on UGA_Athena_ProjWithTrajectory_C");
static_assert(sizeof(UGA_Athena_ProjWithTrajectory_C) == 0x000D58, "Wrong size on UGA_Athena_ProjWithTrajectory_C");
static_assert(offsetof(UGA_Athena_ProjWithTrajectory_C, UberGraphFrame) == 0x000AF0, "Member 'UGA_Athena_ProjWithTrajectory_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGA_Athena_ProjWithTrajectory_C, EventActivation) == 0x000AF8, "Member 'UGA_Athena_ProjWithTrajectory_C::EventActivation' has a wrong offset!");
static_assert(offsetof(UGA_Athena_ProjWithTrajectory_C, EventComplete) == 0x000B00, "Member 'UGA_Athena_ProjWithTrajectory_C::EventComplete' has a wrong offset!");
static_assert(offsetof(UGA_Athena_ProjWithTrajectory_C, Prj_Grenade) == 0x000B08, "Member 'UGA_Athena_ProjWithTrajectory_C::Prj_Grenade' has a wrong offset!");
static_assert(offsetof(UGA_Athena_ProjWithTrajectory_C, GrenadeSpeedMin) == 0x000B10, "Member 'UGA_Athena_ProjWithTrajectory_C::GrenadeSpeedMin' has a wrong offset!");
static_assert(offsetof(UGA_Athena_ProjWithTrajectory_C, GrenadeSpeedMax) == 0x000B14, "Member 'UGA_Athena_ProjWithTrajectory_C::GrenadeSpeedMax' has a wrong offset!");
static_assert(offsetof(UGA_Athena_ProjWithTrajectory_C, GravityScale) == 0x000B18, "Member 'UGA_Athena_ProjWithTrajectory_C::GravityScale' has a wrong offset!");
static_assert(offsetof(UGA_Athena_ProjWithTrajectory_C, GrenadeSound) == 0x000B20, "Member 'UGA_Athena_ProjWithTrajectory_C::GrenadeSound' has a wrong offset!");
static_assert(offsetof(UGA_Athena_ProjWithTrajectory_C, EC_DefaultExplosion) == 0x000B28, "Member 'UGA_Athena_ProjWithTrajectory_C::EC_DefaultExplosion' has a wrong offset!");
static_assert(offsetof(UGA_Athena_ProjWithTrajectory_C, EC_ReturnedEffect) == 0x000B30, "Member 'UGA_Athena_ProjWithTrajectory_C::EC_ReturnedEffect' has a wrong offset!");
static_assert(offsetof(UGA_Athena_ProjWithTrajectory_C, ExplosionRadius) == 0x000BB0, "Member 'UGA_Athena_ProjWithTrajectory_C::ExplosionRadius' has a wrong offset!");
static_assert(offsetof(UGA_Athena_ProjWithTrajectory_C, AdditionalThrowAngle) == 0x000BB4, "Member 'UGA_Athena_ProjWithTrajectory_C::AdditionalThrowAngle' has a wrong offset!");
static_assert(offsetof(UGA_Athena_ProjWithTrajectory_C, GrenadeDialogFeedback) == 0x000BB8, "Member 'UGA_Athena_ProjWithTrajectory_C::GrenadeDialogFeedback' has a wrong offset!");
static_assert(offsetof(UGA_Athena_ProjWithTrajectory_C, GrenadeAmmo) == 0x000BD0, "Member 'UGA_Athena_ProjWithTrajectory_C::GrenadeAmmo' has a wrong offset!");
static_assert(offsetof(UGA_Athena_ProjWithTrajectory_C, PlasmaGrenades) == 0x000BD1, "Member 'UGA_Athena_ProjWithTrajectory_C::PlasmaGrenades' has a wrong offset!");
static_assert(offsetof(UGA_Athena_ProjWithTrajectory_C, Flashbang) == 0x000BD2, "Member 'UGA_Athena_ProjWithTrajectory_C::Flashbang' has a wrong offset!");
static_assert(offsetof(UGA_Athena_ProjWithTrajectory_C, GrenadeTargetingOriginOffset) == 0x000BD4, "Member 'UGA_Athena_ProjWithTrajectory_C::GrenadeTargetingOriginOffset' has a wrong offset!");
static_assert(offsetof(UGA_Athena_ProjWithTrajectory_C, DummyProjectile) == 0x000BE0, "Member 'UGA_Athena_ProjWithTrajectory_C::DummyProjectile' has a wrong offset!");
static_assert(offsetof(UGA_Athena_ProjWithTrajectory_C, DummyShouldBounce) == 0x000BE8, "Member 'UGA_Athena_ProjWithTrajectory_C::DummyShouldBounce' has a wrong offset!");
static_assert(offsetof(UGA_Athena_ProjWithTrajectory_C, DummyBounciness) == 0x000BEC, "Member 'UGA_Athena_ProjWithTrajectory_C::DummyBounciness' has a wrong offset!");
static_assert(offsetof(UGA_Athena_ProjWithTrajectory_C, DummyFriction) == 0x000BF0, "Member 'UGA_Athena_ProjWithTrajectory_C::DummyFriction' has a wrong offset!");
static_assert(offsetof(UGA_Athena_ProjWithTrajectory_C, TrajectoryUpdateInterval) == 0x000BF4, "Member 'UGA_Athena_ProjWithTrajectory_C::TrajectoryUpdateInterval' has a wrong offset!");
static_assert(offsetof(UGA_Athena_ProjWithTrajectory_C, DummyMaxSpeed) == 0x000BF8, "Member 'UGA_Athena_ProjWithTrajectory_C::DummyMaxSpeed' has a wrong offset!");
static_assert(offsetof(UGA_Athena_ProjWithTrajectory_C, DummyGravity) == 0x000BFC, "Member 'UGA_Athena_ProjWithTrajectory_C::DummyGravity' has a wrong offset!");
static_assert(offsetof(UGA_Athena_ProjWithTrajectory_C, DummyTimeStep) == 0x000C00, "Member 'UGA_Athena_ProjWithTrajectory_C::DummyTimeStep' has a wrong offset!");
static_assert(offsetof(UGA_Athena_ProjWithTrajectory_C, DummyExtent) == 0x000C04, "Member 'UGA_Athena_ProjWithTrajectory_C::DummyExtent' has a wrong offset!");
static_assert(offsetof(UGA_Athena_ProjWithTrajectory_C, InThrowWindup) == 0x000C08, "Member 'UGA_Athena_ProjWithTrajectory_C::InThrowWindup' has a wrong offset!");
static_assert(offsetof(UGA_Athena_ProjWithTrajectory_C, TrajectoryIndicator) == 0x000C10, "Member 'UGA_Athena_ProjWithTrajectory_C::TrajectoryIndicator' has a wrong offset!");
static_assert(offsetof(UGA_Athena_ProjWithTrajectory_C, TrajectoryIndicatorClass) == 0x000C18, "Member 'UGA_Athena_ProjWithTrajectory_C::TrajectoryIndicatorClass' has a wrong offset!");
static_assert(offsetof(UGA_Athena_ProjWithTrajectory_C, ThrowWindupMontage) == 0x000C20, "Member 'UGA_Athena_ProjWithTrajectory_C::ThrowWindupMontage' has a wrong offset!");
static_assert(offsetof(UGA_Athena_ProjWithTrajectory_C, AbilityKeyPressed) == 0x000C80, "Member 'UGA_Athena_ProjWithTrajectory_C::AbilityKeyPressed' has a wrong offset!");
static_assert(offsetof(UGA_Athena_ProjWithTrajectory_C, MaxSpeedPitch) == 0x000C84, "Member 'UGA_Athena_ProjWithTrajectory_C::MaxSpeedPitch' has a wrong offset!");
static_assert(offsetof(UGA_Athena_ProjWithTrajectory_C, MinSpeedPitch) == 0x000C88, "Member 'UGA_Athena_ProjWithTrajectory_C::MinSpeedPitch' has a wrong offset!");
static_assert(offsetof(UGA_Athena_ProjWithTrajectory_C, Event_Data) == 0x000C90, "Member 'UGA_Athena_ProjWithTrajectory_C::Event_Data' has a wrong offset!");
static_assert(offsetof(UGA_Athena_ProjWithTrajectory_C, PlayerPawn) == 0x000D38, "Member 'UGA_Athena_ProjWithTrajectory_C::PlayerPawn' has a wrong offset!");
static_assert(offsetof(UGA_Athena_ProjWithTrajectory_C, MaxTossPitch) == 0x000D40, "Member 'UGA_Athena_ProjWithTrajectory_C::MaxTossPitch' has a wrong offset!");
static_assert(offsetof(UGA_Athena_ProjWithTrajectory_C, MaxTrajectoryBounces) == 0x000D44, "Member 'UGA_Athena_ProjWithTrajectory_C::MaxTrajectoryBounces' has a wrong offset!");
static_assert(offsetof(UGA_Athena_ProjWithTrajectory_C, PostThrowCancelDelay) == 0x000D48, "Member 'UGA_Athena_ProjWithTrajectory_C::PostThrowCancelDelay' has a wrong offset!");
static_assert(offsetof(UGA_Athena_ProjWithTrajectory_C, GrenadeReference) == 0x000D50, "Member 'UGA_Athena_ProjWithTrajectory_C::GrenadeReference' has a wrong offset!");

}

