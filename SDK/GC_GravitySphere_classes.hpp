#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GC_GravitySphere

#include "Basic.hpp"

#include "FortniteGame_classes.hpp"
#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass GC_GravitySphere.GC_GravitySphere_C
// 0x0020 (0x0460 - 0x0440)
class AGC_GravitySphere_C final : public AFortGameplayCueNotify_Looping
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0440(0x0008)(Transient, DuplicateTransient)
	class UParticleSystemComponent*               P_Outlander_GravitySphere_Feet_01;                 // 0x0448(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 My_Target;                                         // 0x0450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_GC_GravitySphere(int32 EntryPoint);
	void K2_HandleGameplayCue(class AActor* MyTarget, EGameplayCueEvent EventType, const struct FGameplayCueParameters& Parameters);
	void UserConstructionScript();

	void OnWhileActiveParticleSystemActivate(class UParticleSystemComponent* WhileActiveParticleSysComponent, const struct FGameplayCueParameters& Parameters) const;
	void OnWhileActiveParticleSystemDeactivate(class UParticleSystemComponent* WhileActiveParticleSysComponent, const struct FGameplayCueParameters& Parameters) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GC_GravitySphere_C">();
	}
	static class AGC_GravitySphere_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGC_GravitySphere_C>();
	}
};
static_assert(alignof(AGC_GravitySphere_C) == 0x000010, "Wrong alignment on AGC_GravitySphere_C");
static_assert(sizeof(AGC_GravitySphere_C) == 0x000460, "Wrong size on AGC_GravitySphere_C");
static_assert(offsetof(AGC_GravitySphere_C, UberGraphFrame) == 0x000440, "Member 'AGC_GravitySphere_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AGC_GravitySphere_C, P_Outlander_GravitySphere_Feet_01) == 0x000448, "Member 'AGC_GravitySphere_C::P_Outlander_GravitySphere_Feet_01' has a wrong offset!");
static_assert(offsetof(AGC_GravitySphere_C, My_Target) == 0x000450, "Member 'AGC_GravitySphere_C::My_Target' has a wrong offset!");

}

