#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MusicManager

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass MusicManager.MusicManager_C
// 0x0088 (0x0400 - 0x0378)
class AMusicManager_C final : public AFortMusicManager
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0378(0x0008)(Transient, DuplicateTransient)
	float                                         Gameplay_Music_Fader_Volume_869161D741AED71C8F0239859977BB00; // 0x0380(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Gameplay_Music_Fader__Direction_869161D741AED71C8F0239859977BB00; // 0x0384(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_385[0x3];                                      // 0x0385(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Gameplay_Music_Fader;                              // 0x0388(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             MusicFrontend;                                     // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             MusicLobby;                                        // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             StingerReturningToAmbientMusic;                    // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Debug;                                             // 0x03A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A9[0x7];                                      // 0x03A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   GameMode_Current;                                  // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   GameMode_Lobby;                                    // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   GameMode_Frontend;                                 // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   GameMode_InGame;                                   // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PlayStingerWhenReturningToAmbientMusic;            // 0x03D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          PlayingAmbientMusic;                               // 0x03D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          PlayingThreatMusic;                                // 0x03D2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          PlayingNearbyEnemiesMusic;                         // 0x03D3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          PlayingHuskLowMusic;                               // 0x03D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          PlayingHuskHighMusic;                              // 0x03D5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          PlayingLargeEnemyMusic;                            // 0x03D6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D7[0x1];                                      // 0x03D7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LastTimeMusicWasStartedOrContinued;                // 0x03D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentMusicIntensityLevel;                        // 0x03DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFortDayPhase                                 CurrentDayPhase;                                   // 0x03E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E1[0x3];                                      // 0x03E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MusicLogicUpdateTickTime;                          // 0x03E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinDurationBeforeMusicCanIncreaseIntensity;        // 0x03E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         IntensityIncreaseFadeTime;                         // 0x03EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMusicFadeStyles                              IntensityIncreaseFadeStyle;                        // 0x03F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F1[0x3];                                      // 0x03F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinDurationBeforeMusicCanDecreaseInIntensity;      // 0x03F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         IntensityDecreaseFadeTime;                         // 0x03F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMusicFadeStyles                              IntensityDecreaseFadeStyle;                        // 0x03FC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MusicShouldStop;                                   // 0x03FD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          PlayingStingerMusic;                               // 0x03FE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_MusicManager(int32 EntryPoint);
	void On_Stinger_Completed(class UFortMusicVoice* Voice);
	void Music_Fade_Out(float Time);
	void Music_Fade_In(float Time);
	void PlayStinger(class UFortMusicAsset* NewMusicAsset);
	void On_Music_Tick();
	void ReceiveBeginPlay();
	void PlayAmbientMusic();
	void OnUpdateMusic();
	void OnDayPhaseChanged(EFortDayPhase CurrentDayPhase_0, EFortDayPhase PreviousDayPhase, bool bAtCreation);
	void Gameplay_Music_Fader__UpdateFunc();
	void Gameplay_Music_Fader__FinishedFunc();
	void UserConstructionScript();
	void ResetMusicBools();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"MusicManager_C">();
	}
	static class AMusicManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMusicManager_C>();
	}
};
static_assert(alignof(AMusicManager_C) == 0x000008, "Wrong alignment on AMusicManager_C");
static_assert(sizeof(AMusicManager_C) == 0x000400, "Wrong size on AMusicManager_C");
static_assert(offsetof(AMusicManager_C, UberGraphFrame) == 0x000378, "Member 'AMusicManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, Gameplay_Music_Fader_Volume_869161D741AED71C8F0239859977BB00) == 0x000380, "Member 'AMusicManager_C::Gameplay_Music_Fader_Volume_869161D741AED71C8F0239859977BB00' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, Gameplay_Music_Fader__Direction_869161D741AED71C8F0239859977BB00) == 0x000384, "Member 'AMusicManager_C::Gameplay_Music_Fader__Direction_869161D741AED71C8F0239859977BB00' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, Gameplay_Music_Fader) == 0x000388, "Member 'AMusicManager_C::Gameplay_Music_Fader' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, MusicFrontend) == 0x000390, "Member 'AMusicManager_C::MusicFrontend' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, MusicLobby) == 0x000398, "Member 'AMusicManager_C::MusicLobby' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, StingerReturningToAmbientMusic) == 0x0003A0, "Member 'AMusicManager_C::StingerReturningToAmbientMusic' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, Debug) == 0x0003A8, "Member 'AMusicManager_C::Debug' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, GameMode_Current) == 0x0003B0, "Member 'AMusicManager_C::GameMode_Current' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, GameMode_Lobby) == 0x0003B8, "Member 'AMusicManager_C::GameMode_Lobby' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, GameMode_Frontend) == 0x0003C0, "Member 'AMusicManager_C::GameMode_Frontend' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, GameMode_InGame) == 0x0003C8, "Member 'AMusicManager_C::GameMode_InGame' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, PlayStingerWhenReturningToAmbientMusic) == 0x0003D0, "Member 'AMusicManager_C::PlayStingerWhenReturningToAmbientMusic' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, PlayingAmbientMusic) == 0x0003D1, "Member 'AMusicManager_C::PlayingAmbientMusic' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, PlayingThreatMusic) == 0x0003D2, "Member 'AMusicManager_C::PlayingThreatMusic' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, PlayingNearbyEnemiesMusic) == 0x0003D3, "Member 'AMusicManager_C::PlayingNearbyEnemiesMusic' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, PlayingHuskLowMusic) == 0x0003D4, "Member 'AMusicManager_C::PlayingHuskLowMusic' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, PlayingHuskHighMusic) == 0x0003D5, "Member 'AMusicManager_C::PlayingHuskHighMusic' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, PlayingLargeEnemyMusic) == 0x0003D6, "Member 'AMusicManager_C::PlayingLargeEnemyMusic' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, LastTimeMusicWasStartedOrContinued) == 0x0003D8, "Member 'AMusicManager_C::LastTimeMusicWasStartedOrContinued' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, CurrentMusicIntensityLevel) == 0x0003DC, "Member 'AMusicManager_C::CurrentMusicIntensityLevel' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, CurrentDayPhase) == 0x0003E0, "Member 'AMusicManager_C::CurrentDayPhase' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, MusicLogicUpdateTickTime) == 0x0003E4, "Member 'AMusicManager_C::MusicLogicUpdateTickTime' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, MinDurationBeforeMusicCanIncreaseIntensity) == 0x0003E8, "Member 'AMusicManager_C::MinDurationBeforeMusicCanIncreaseIntensity' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, IntensityIncreaseFadeTime) == 0x0003EC, "Member 'AMusicManager_C::IntensityIncreaseFadeTime' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, IntensityIncreaseFadeStyle) == 0x0003F0, "Member 'AMusicManager_C::IntensityIncreaseFadeStyle' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, MinDurationBeforeMusicCanDecreaseInIntensity) == 0x0003F4, "Member 'AMusicManager_C::MinDurationBeforeMusicCanDecreaseInIntensity' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, IntensityDecreaseFadeTime) == 0x0003F8, "Member 'AMusicManager_C::IntensityDecreaseFadeTime' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, IntensityDecreaseFadeStyle) == 0x0003FC, "Member 'AMusicManager_C::IntensityDecreaseFadeStyle' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, MusicShouldStop) == 0x0003FD, "Member 'AMusicManager_C::MusicShouldStop' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, PlayingStingerMusic) == 0x0003FE, "Member 'AMusicManager_C::PlayingStingerMusic' has a wrong offset!");

}

