#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TabGamePadConfig

#include "Basic.hpp"

#include "CommonInput_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "Engine_structs.hpp"
#include "FortniteUI_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass TabGamePadConfig.TabGamePadConfig_C
// 0x00D0 (0x0340 - 0x0270)
class UTabGamePadConfig_C final : public UFortGamepadInputOptions
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0270(0x0008)(Transient, DuplicateTransient)
	class URotatorSelector_C*                     CustomInputTemplateConfigs;                        // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class URotatorSelector_C*                     GamepadConfig;                                     // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UGamepadMappingInfo_C*                  GamepadMappingInfo;                                // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class URotatorSelector_C*                     GamepadPlatformConfig;                             // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonLazyImage*                       Image_Unbound;                                     // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               SizeBox_Gamepad_Platform;                          // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               SizeBox_GamepadMappingInfo;                        // 0x02A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               SizeBox_Unbound_Desc;                              // 0x02B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           VerticalBox_InputList;                             // 0x02B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	bool                                          IsCombatMode;                                      // 0x02C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C1[0x7];                                      // 0x02C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         InputPresets;                                      // 0x02C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	int32                                         PlatformMappingIndex;                              // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PresetMappingIndex;                                // 0x02DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   EnableGamepadInputOverlay;                         // 0x02E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         CustomInputTemplatePresetIndex;                    // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentInputNum;                                   // 0x02F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   GamepadMappingInfoChanged;                         // 0x02F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UTexture2D*                             T_PS4_Unbound;                                     // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             T_Xb1_Unbound;                                     // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FText>                           InputPresetNames_NoCustom;                         // 0x0318(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	UMulticastDelegateProperty_                   ShowResetToDefaultMessage;                         // 0x0328(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          PendingInputEnabledValue;                          // 0x0338(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_TabGamePadConfig(int32 EntryPoint);
	void TrySetInputEnabled();
	void Construct();
	void DoNotResetToDefault();
	void DoResetToDefault();
	void BndEvt__CustomInputTemplateConfigs_K2Node_ComponentBoundEvent_5_Selection_Changed__DelegateSignature(int32 Selected_Index);
	void Unclicked_Bind(int32 Number_in_List, class UOptionsMenuInputOneKey_C* Widget);
	void HandleGamePadToggleMode();
	void Configuration_Changed(int32 Selected_Index);
	void InputClicked_Bind(int32 Number_in_List, bool Is_Primary_Button);
	void BndEvt__InputCommonListView_K2Node_ComponentBoundEvent_130_OnListViewItemWidgetCreated__DelegateSignature(class UUserWidget* Widget);
	void CenterOnTab();
	void ClearAndConstructKeybindList();
	void Gamepad_Config_Changed(int32 Selected_Index);
	void GamepadPlatformConfigChanged(int32 Selected_Index);
	void UpdateOptionsTab();
	void Initialize_Data();
	void Update_Data();
	void Handle_Mode_Toggled();
	void HandleGamepadMappingInfoChange();
	void OverlayKeyPressed(const struct FKey& NewKey);
	void SetInputEnabled(bool Enable);
	bool IsCustomConfig(int32 PresetIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"TabGamePadConfig_C">();
	}
	static class UTabGamePadConfig_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTabGamePadConfig_C>();
	}
};
static_assert(alignof(UTabGamePadConfig_C) == 0x000008, "Wrong alignment on UTabGamePadConfig_C");
static_assert(sizeof(UTabGamePadConfig_C) == 0x000340, "Wrong size on UTabGamePadConfig_C");
static_assert(offsetof(UTabGamePadConfig_C, UberGraphFrame) == 0x000270, "Member 'UTabGamePadConfig_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UTabGamePadConfig_C, CustomInputTemplateConfigs) == 0x000278, "Member 'UTabGamePadConfig_C::CustomInputTemplateConfigs' has a wrong offset!");
static_assert(offsetof(UTabGamePadConfig_C, GamepadConfig) == 0x000280, "Member 'UTabGamePadConfig_C::GamepadConfig' has a wrong offset!");
static_assert(offsetof(UTabGamePadConfig_C, GamepadMappingInfo) == 0x000288, "Member 'UTabGamePadConfig_C::GamepadMappingInfo' has a wrong offset!");
static_assert(offsetof(UTabGamePadConfig_C, GamepadPlatformConfig) == 0x000290, "Member 'UTabGamePadConfig_C::GamepadPlatformConfig' has a wrong offset!");
static_assert(offsetof(UTabGamePadConfig_C, Image_Unbound) == 0x000298, "Member 'UTabGamePadConfig_C::Image_Unbound' has a wrong offset!");
static_assert(offsetof(UTabGamePadConfig_C, SizeBox_Gamepad_Platform) == 0x0002A0, "Member 'UTabGamePadConfig_C::SizeBox_Gamepad_Platform' has a wrong offset!");
static_assert(offsetof(UTabGamePadConfig_C, SizeBox_GamepadMappingInfo) == 0x0002A8, "Member 'UTabGamePadConfig_C::SizeBox_GamepadMappingInfo' has a wrong offset!");
static_assert(offsetof(UTabGamePadConfig_C, SizeBox_Unbound_Desc) == 0x0002B0, "Member 'UTabGamePadConfig_C::SizeBox_Unbound_Desc' has a wrong offset!");
static_assert(offsetof(UTabGamePadConfig_C, VerticalBox_InputList) == 0x0002B8, "Member 'UTabGamePadConfig_C::VerticalBox_InputList' has a wrong offset!");
static_assert(offsetof(UTabGamePadConfig_C, IsCombatMode) == 0x0002C0, "Member 'UTabGamePadConfig_C::IsCombatMode' has a wrong offset!");
static_assert(offsetof(UTabGamePadConfig_C, InputPresets) == 0x0002C8, "Member 'UTabGamePadConfig_C::InputPresets' has a wrong offset!");
static_assert(offsetof(UTabGamePadConfig_C, PlatformMappingIndex) == 0x0002D8, "Member 'UTabGamePadConfig_C::PlatformMappingIndex' has a wrong offset!");
static_assert(offsetof(UTabGamePadConfig_C, PresetMappingIndex) == 0x0002DC, "Member 'UTabGamePadConfig_C::PresetMappingIndex' has a wrong offset!");
static_assert(offsetof(UTabGamePadConfig_C, EnableGamepadInputOverlay) == 0x0002E0, "Member 'UTabGamePadConfig_C::EnableGamepadInputOverlay' has a wrong offset!");
static_assert(offsetof(UTabGamePadConfig_C, CustomInputTemplatePresetIndex) == 0x0002F0, "Member 'UTabGamePadConfig_C::CustomInputTemplatePresetIndex' has a wrong offset!");
static_assert(offsetof(UTabGamePadConfig_C, CurrentInputNum) == 0x0002F4, "Member 'UTabGamePadConfig_C::CurrentInputNum' has a wrong offset!");
static_assert(offsetof(UTabGamePadConfig_C, GamepadMappingInfoChanged) == 0x0002F8, "Member 'UTabGamePadConfig_C::GamepadMappingInfoChanged' has a wrong offset!");
static_assert(offsetof(UTabGamePadConfig_C, T_PS4_Unbound) == 0x000308, "Member 'UTabGamePadConfig_C::T_PS4_Unbound' has a wrong offset!");
static_assert(offsetof(UTabGamePadConfig_C, T_Xb1_Unbound) == 0x000310, "Member 'UTabGamePadConfig_C::T_Xb1_Unbound' has a wrong offset!");
static_assert(offsetof(UTabGamePadConfig_C, InputPresetNames_NoCustom) == 0x000318, "Member 'UTabGamePadConfig_C::InputPresetNames_NoCustom' has a wrong offset!");
static_assert(offsetof(UTabGamePadConfig_C, ShowResetToDefaultMessage) == 0x000328, "Member 'UTabGamePadConfig_C::ShowResetToDefaultMessage' has a wrong offset!");
static_assert(offsetof(UTabGamePadConfig_C, PendingInputEnabledValue) == 0x000338, "Member 'UTabGamePadConfig_C::PendingInputEnabledValue' has a wrong offset!");

}

