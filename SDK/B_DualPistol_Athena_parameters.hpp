#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_DualPistol_Athena

#include "Basic.hpp"


namespace SDK::Params
{

// Function B_DualPistol_Athena.B_DualPistol_Athena_C.ExecuteUbergraph_B_DualPistol_Athena
// 0x0020 (0x0020 - 0x0000)
struct B_DualPistol_Athena_C_ExecuteUbergraph_B_DualPistol_Athena final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetInstigator_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerPawnAthena*                  K2Node_DynamicCast_AsFort_Player_Pawn_Athena;      // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bNewIsTargeting;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_AttachToComponent_ReturnValue;         // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(B_DualPistol_Athena_C_ExecuteUbergraph_B_DualPistol_Athena) == 0x000008, "Wrong alignment on B_DualPistol_Athena_C_ExecuteUbergraph_B_DualPistol_Athena");
static_assert(sizeof(B_DualPistol_Athena_C_ExecuteUbergraph_B_DualPistol_Athena) == 0x000020, "Wrong size on B_DualPistol_Athena_C_ExecuteUbergraph_B_DualPistol_Athena");
static_assert(offsetof(B_DualPistol_Athena_C_ExecuteUbergraph_B_DualPistol_Athena, EntryPoint) == 0x000000, "Member 'B_DualPistol_Athena_C_ExecuteUbergraph_B_DualPistol_Athena::EntryPoint' has a wrong offset!");
static_assert(offsetof(B_DualPistol_Athena_C_ExecuteUbergraph_B_DualPistol_Athena, CallFunc_GetInstigator_ReturnValue) == 0x000008, "Member 'B_DualPistol_Athena_C_ExecuteUbergraph_B_DualPistol_Athena::CallFunc_GetInstigator_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_DualPistol_Athena_C_ExecuteUbergraph_B_DualPistol_Athena, K2Node_DynamicCast_AsFort_Player_Pawn_Athena) == 0x000010, "Member 'B_DualPistol_Athena_C_ExecuteUbergraph_B_DualPistol_Athena::K2Node_DynamicCast_AsFort_Player_Pawn_Athena' has a wrong offset!");
static_assert(offsetof(B_DualPistol_Athena_C_ExecuteUbergraph_B_DualPistol_Athena, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'B_DualPistol_Athena_C_ExecuteUbergraph_B_DualPistol_Athena::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_DualPistol_Athena_C_ExecuteUbergraph_B_DualPistol_Athena, K2Node_Event_bNewIsTargeting) == 0x000019, "Member 'B_DualPistol_Athena_C_ExecuteUbergraph_B_DualPistol_Athena::K2Node_Event_bNewIsTargeting' has a wrong offset!");
static_assert(offsetof(B_DualPistol_Athena_C_ExecuteUbergraph_B_DualPistol_Athena, CallFunc_K2_AttachToComponent_ReturnValue) == 0x00001A, "Member 'B_DualPistol_Athena_C_ExecuteUbergraph_B_DualPistol_Athena::CallFunc_K2_AttachToComponent_ReturnValue' has a wrong offset!");

// Function B_DualPistol_Athena.B_DualPistol_Athena_C.OnSetTargeting
// 0x0001 (0x0001 - 0x0000)
struct B_DualPistol_Athena_C_OnSetTargeting final
{
public:
	bool                                          bNewIsTargeting;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(B_DualPistol_Athena_C_OnSetTargeting) == 0x000001, "Wrong alignment on B_DualPistol_Athena_C_OnSetTargeting");
static_assert(sizeof(B_DualPistol_Athena_C_OnSetTargeting) == 0x000001, "Wrong size on B_DualPistol_Athena_C_OnSetTargeting");
static_assert(offsetof(B_DualPistol_Athena_C_OnSetTargeting, bNewIsTargeting) == 0x000000, "Member 'B_DualPistol_Athena_C_OnSetTargeting::bNewIsTargeting' has a wrong offset!");

}

