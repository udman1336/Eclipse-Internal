#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: QuickbarSlot

#include "Basic.hpp"

#include "FortniteUI_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ItemDisplayStyle_structs.hpp"
#include "CommonInput_structs.hpp"
#include "UMG_structs.hpp"
#include "FortniteGame_structs.hpp"


namespace SDK::Params
{

// Function QuickbarSlot.QuickbarSlot_C.ExecuteUbergraph_QuickbarSlot
// 0x00A8 (0x00A8 - 0x0000)
struct QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable1;                             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable12;                            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable123;                           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable1234;                          // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable12345;                         // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable123456;                        // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0048(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate1;             // 0x0058(0x0010)(ZeroConstructor, NoDestructor)
	EItemDisplayStyle                             Temp_byte_Variable;                                // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             K2Node_Select_Default;                             // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFortItemCardSize                             CallFunc_GetCardSize_ReturnValue;                  // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFortItemCardSize                             CallFunc_GetCardSize_ReturnValue1;                 // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A[0x6];                                       // 0x007A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate12;            // 0x0080(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate123;           // 0x0090(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_AnimatedBoxScaleFactor;         // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot) == 0x000008, "Wrong alignment on QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot");
static_assert(sizeof(QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot) == 0x0000A8, "Wrong size on QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot");
static_assert(offsetof(QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot, EntryPoint) == 0x000000, "Member 'QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot::EntryPoint' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot, Temp_object_Variable) == 0x000008, "Member 'QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot, K2Node_SwitchEnum_CmpSuccess) == 0x000010, "Member 'QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot, Temp_object_Variable1) == 0x000018, "Member 'QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot::Temp_object_Variable1' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot, Temp_object_Variable12) == 0x000020, "Member 'QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot::Temp_object_Variable12' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot, Temp_object_Variable123) == 0x000028, "Member 'QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot::Temp_object_Variable123' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot, Temp_object_Variable1234) == 0x000030, "Member 'QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot::Temp_object_Variable1234' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot, Temp_object_Variable12345) == 0x000038, "Member 'QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot::Temp_object_Variable12345' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot, Temp_object_Variable123456) == 0x000040, "Member 'QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot::Temp_object_Variable123456' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot, K2Node_CreateDelegate_OutputDelegate) == 0x000048, "Member 'QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot, K2Node_CreateDelegate_OutputDelegate1) == 0x000058, "Member 'QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot::K2Node_CreateDelegate_OutputDelegate1' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot, Temp_byte_Variable) == 0x000068, "Member 'QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot, K2Node_Select_Default) == 0x000070, "Member 'QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot, CallFunc_GetCardSize_ReturnValue) == 0x000078, "Member 'QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot::CallFunc_GetCardSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot, CallFunc_GetCardSize_ReturnValue1) == 0x000079, "Member 'QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot::CallFunc_GetCardSize_ReturnValue1' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot, K2Node_CreateDelegate_OutputDelegate12) == 0x000080, "Member 'QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot::K2Node_CreateDelegate_OutputDelegate12' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot, K2Node_CreateDelegate_OutputDelegate123) == 0x000090, "Member 'QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot::K2Node_CreateDelegate_OutputDelegate123' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot, K2Node_Event_IsDesignTime) == 0x0000A0, "Member 'QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot, K2Node_CustomEvent_AnimatedBoxScaleFactor) == 0x0000A4, "Member 'QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot::K2Node_CustomEvent_AnimatedBoxScaleFactor' has a wrong offset!");

// Function QuickbarSlot.QuickbarSlot_C.SetAnimatedBoxScaleFactor
// 0x0004 (0x0004 - 0x0000)
struct QuickbarSlot_C_SetAnimatedBoxScaleFactor final
{
public:
	float                                         AnimatedBoxScaleFactor_0;                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(QuickbarSlot_C_SetAnimatedBoxScaleFactor) == 0x000004, "Wrong alignment on QuickbarSlot_C_SetAnimatedBoxScaleFactor");
static_assert(sizeof(QuickbarSlot_C_SetAnimatedBoxScaleFactor) == 0x000004, "Wrong size on QuickbarSlot_C_SetAnimatedBoxScaleFactor");
static_assert(offsetof(QuickbarSlot_C_SetAnimatedBoxScaleFactor, AnimatedBoxScaleFactor_0) == 0x000000, "Member 'QuickbarSlot_C_SetAnimatedBoxScaleFactor::AnimatedBoxScaleFactor_0' has a wrong offset!");

// Function QuickbarSlot.QuickbarSlot_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct QuickbarSlot_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(QuickbarSlot_C_PreConstruct) == 0x000001, "Wrong alignment on QuickbarSlot_C_PreConstruct");
static_assert(sizeof(QuickbarSlot_C_PreConstruct) == 0x000001, "Wrong size on QuickbarSlot_C_PreConstruct");
static_assert(offsetof(QuickbarSlot_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'QuickbarSlot_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function QuickbarSlot.QuickbarSlot_C.SetSelected
// 0x0028 (0x0028 - 0x0000)
struct QuickbarSlot_C_SetSelected final
{
public:
	bool                                          Selected_0;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable1;                               // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable1;                               // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable12;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable123;                             // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable1234;                            // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable12345;                           // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable12;                              // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonInputContext*                    CallFunc_GetContext_ReturnValue;                   // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECommonInputType                              CallFunc_GetCurrentInputType_ReturnValue;          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue1;                  // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select1_Default;                            // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select12_Default;                           // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetEndTime_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(QuickbarSlot_C_SetSelected) == 0x000008, "Wrong alignment on QuickbarSlot_C_SetSelected");
static_assert(sizeof(QuickbarSlot_C_SetSelected) == 0x000028, "Wrong size on QuickbarSlot_C_SetSelected");
static_assert(offsetof(QuickbarSlot_C_SetSelected, Selected_0) == 0x000000, "Member 'QuickbarSlot_C_SetSelected::Selected_0' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_SetSelected, Temp_bool_Variable) == 0x000001, "Member 'QuickbarSlot_C_SetSelected::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_SetSelected, Temp_byte_Variable) == 0x000002, "Member 'QuickbarSlot_C_SetSelected::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_SetSelected, Temp_byte_Variable1) == 0x000003, "Member 'QuickbarSlot_C_SetSelected::Temp_byte_Variable1' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_SetSelected, Temp_bool_Variable1) == 0x000004, "Member 'QuickbarSlot_C_SetSelected::Temp_bool_Variable1' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_SetSelected, Temp_byte_Variable12) == 0x000005, "Member 'QuickbarSlot_C_SetSelected::Temp_byte_Variable12' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_SetSelected, Temp_byte_Variable123) == 0x000006, "Member 'QuickbarSlot_C_SetSelected::Temp_byte_Variable123' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_SetSelected, K2Node_Select_Default) == 0x000007, "Member 'QuickbarSlot_C_SetSelected::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_SetSelected, Temp_byte_Variable1234) == 0x000008, "Member 'QuickbarSlot_C_SetSelected::Temp_byte_Variable1234' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_SetSelected, Temp_byte_Variable12345) == 0x000009, "Member 'QuickbarSlot_C_SetSelected::Temp_byte_Variable12345' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_SetSelected, Temp_bool_Variable12) == 0x00000A, "Member 'QuickbarSlot_C_SetSelected::Temp_bool_Variable12' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_SetSelected, CallFunc_GetContext_ReturnValue) == 0x000010, "Member 'QuickbarSlot_C_SetSelected::CallFunc_GetContext_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_SetSelected, CallFunc_GetCurrentInputType_ReturnValue) == 0x000018, "Member 'QuickbarSlot_C_SetSelected::CallFunc_GetCurrentInputType_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_SetSelected, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000019, "Member 'QuickbarSlot_C_SetSelected::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_SetSelected, CallFunc_BooleanAND_ReturnValue) == 0x00001A, "Member 'QuickbarSlot_C_SetSelected::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_SetSelected, CallFunc_BooleanAND_ReturnValue1) == 0x00001B, "Member 'QuickbarSlot_C_SetSelected::CallFunc_BooleanAND_ReturnValue1' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_SetSelected, K2Node_Select1_Default) == 0x00001C, "Member 'QuickbarSlot_C_SetSelected::K2Node_Select1_Default' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_SetSelected, K2Node_Select12_Default) == 0x00001D, "Member 'QuickbarSlot_C_SetSelected::K2Node_Select12_Default' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_SetSelected, CallFunc_GetEndTime_ReturnValue) == 0x000020, "Member 'QuickbarSlot_C_SetSelected::CallFunc_GetEndTime_ReturnValue' has a wrong offset!");

// Function QuickbarSlot.QuickbarSlot_C.Minimize
// 0x0018 (0x0018 - 0x0000)
struct QuickbarSlot_C_Minimize final
{
public:
	bool                                          ShouldSkipAnimation;                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UQuickbarSlotCooldown_C*                K2Node_DynamicCast_AsQuickbar_Slot_Cooldown;       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAnimationPlaying_ReturnValue;           // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(QuickbarSlot_C_Minimize) == 0x000008, "Wrong alignment on QuickbarSlot_C_Minimize");
static_assert(sizeof(QuickbarSlot_C_Minimize) == 0x000018, "Wrong size on QuickbarSlot_C_Minimize");
static_assert(offsetof(QuickbarSlot_C_Minimize, ShouldSkipAnimation) == 0x000000, "Member 'QuickbarSlot_C_Minimize::ShouldSkipAnimation' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_Minimize, K2Node_DynamicCast_AsQuickbar_Slot_Cooldown) == 0x000008, "Member 'QuickbarSlot_C_Minimize::K2Node_DynamicCast_AsQuickbar_Slot_Cooldown' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_Minimize, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'QuickbarSlot_C_Minimize::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_Minimize, CallFunc_IsAnimationPlaying_ReturnValue) == 0x000011, "Member 'QuickbarSlot_C_Minimize::CallFunc_IsAnimationPlaying_ReturnValue' has a wrong offset!");

// Function QuickbarSlot.QuickbarSlot_C.Maximize
// 0x0018 (0x0018 - 0x0000)
struct QuickbarSlot_C_Maximize final
{
public:
	bool                                          ShouldSkipAnimation;                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UQuickbarSlotCooldown_C*                K2Node_DynamicCast_AsQuickbar_Slot_Cooldown;       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAnimationPlaying_ReturnValue;           // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(QuickbarSlot_C_Maximize) == 0x000008, "Wrong alignment on QuickbarSlot_C_Maximize");
static_assert(sizeof(QuickbarSlot_C_Maximize) == 0x000018, "Wrong size on QuickbarSlot_C_Maximize");
static_assert(offsetof(QuickbarSlot_C_Maximize, ShouldSkipAnimation) == 0x000000, "Member 'QuickbarSlot_C_Maximize::ShouldSkipAnimation' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_Maximize, K2Node_DynamicCast_AsQuickbar_Slot_Cooldown) == 0x000008, "Member 'QuickbarSlot_C_Maximize::K2Node_DynamicCast_AsQuickbar_Slot_Cooldown' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_Maximize, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'QuickbarSlot_C_Maximize::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_Maximize, CallFunc_IsAnimationPlaying_ReturnValue) == 0x000011, "Member 'QuickbarSlot_C_Maximize::CallFunc_IsAnimationPlaying_ReturnValue' has a wrong offset!");

// Function QuickbarSlot.QuickbarSlot_C.InitializeCooldowns
// 0x0030 (0x0030 - 0x0000)
struct QuickbarSlot_C_InitializeCooldowns final
{
public:
	class UQuickbarSlotCooldown_C*                K2Node_DynamicCast_AsQuickbar_Slot_Cooldown;       // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EFortItemCooldownType CooldownType)> K2Node_CreateDelegate_OutputDelegate;              // 0x0010(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(EFortItemCooldownType CooldownType)> K2Node_CreateDelegate_OutputDelegate1;             // 0x0020(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(QuickbarSlot_C_InitializeCooldowns) == 0x000008, "Wrong alignment on QuickbarSlot_C_InitializeCooldowns");
static_assert(sizeof(QuickbarSlot_C_InitializeCooldowns) == 0x000030, "Wrong size on QuickbarSlot_C_InitializeCooldowns");
static_assert(offsetof(QuickbarSlot_C_InitializeCooldowns, K2Node_DynamicCast_AsQuickbar_Slot_Cooldown) == 0x000000, "Member 'QuickbarSlot_C_InitializeCooldowns::K2Node_DynamicCast_AsQuickbar_Slot_Cooldown' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_InitializeCooldowns, K2Node_DynamicCast_bSuccess) == 0x000008, "Member 'QuickbarSlot_C_InitializeCooldowns::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_InitializeCooldowns, K2Node_CreateDelegate_OutputDelegate) == 0x000010, "Member 'QuickbarSlot_C_InitializeCooldowns::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_InitializeCooldowns, K2Node_CreateDelegate_OutputDelegate1) == 0x000020, "Member 'QuickbarSlot_C_InitializeCooldowns::K2Node_CreateDelegate_OutputDelegate1' has a wrong offset!");

// Function QuickbarSlot.QuickbarSlot_C.OnCooldownStarted
// 0x0002 (0x0002 - 0x0000)
struct QuickbarSlot_C_OnCooldownStarted final
{
public:
	EFortItemCooldownType                         CooldownType;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(QuickbarSlot_C_OnCooldownStarted) == 0x000001, "Wrong alignment on QuickbarSlot_C_OnCooldownStarted");
static_assert(sizeof(QuickbarSlot_C_OnCooldownStarted) == 0x000002, "Wrong size on QuickbarSlot_C_OnCooldownStarted");
static_assert(offsetof(QuickbarSlot_C_OnCooldownStarted, CooldownType) == 0x000000, "Member 'QuickbarSlot_C_OnCooldownStarted::CooldownType' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_OnCooldownStarted, K2Node_SwitchEnum_CmpSuccess) == 0x000001, "Member 'QuickbarSlot_C_OnCooldownStarted::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function QuickbarSlot.QuickbarSlot_C.OnCooldownStopped
// 0x0002 (0x0002 - 0x0000)
struct QuickbarSlot_C_OnCooldownStopped final
{
public:
	EFortItemCooldownType                         CooldownType;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(QuickbarSlot_C_OnCooldownStopped) == 0x000001, "Wrong alignment on QuickbarSlot_C_OnCooldownStopped");
static_assert(sizeof(QuickbarSlot_C_OnCooldownStopped) == 0x000002, "Wrong size on QuickbarSlot_C_OnCooldownStopped");
static_assert(offsetof(QuickbarSlot_C_OnCooldownStopped, CooldownType) == 0x000000, "Member 'QuickbarSlot_C_OnCooldownStopped::CooldownType' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_OnCooldownStopped, K2Node_SwitchEnum_CmpSuccess) == 0x000001, "Member 'QuickbarSlot_C_OnCooldownStopped::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function QuickbarSlot.QuickbarSlot_C.UpdateItemBoxSize
// 0x0070 (0x0070 - 0x0000)
struct QuickbarSlot_C_UpdateItemBoxSize final
{
public:
	EFortItemType                                 Item_Type_To_Show;                                 // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue1;                     // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EFortItemType                                 CallFunc_GetType_ReturnValue;                      // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable1;                               // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ShouldUseNewItemCards_ReturnValue;        // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EFortItemCardSize                             CallFunc_GetCardSize_ReturnValue;                  // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UOverlaySlot*                           CallFunc_SlotAsOverlaySlot_ReturnValue;            // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFortItemType                                 K2Node_Select_Default;                             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_GetCardDimensions_ReturnValue;            // 0x0014(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue1;              // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue12;             // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue123;            // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFortItemCardSize                             CallFunc_GetCardSize_ReturnValue1;                 // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UOverlaySlot*                           CallFunc_SlotAsOverlaySlot_ReturnValue1;           // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFortItemType                                 K2Node_Select1_Default;                            // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_GetCardDimensions_ReturnValue1;           // 0x0044(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue1234;           // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X1;                         // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y1;                         // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue12345;          // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue123456;         // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue1234567;        // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue1;                        // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(QuickbarSlot_C_UpdateItemBoxSize) == 0x000008, "Wrong alignment on QuickbarSlot_C_UpdateItemBoxSize");
static_assert(sizeof(QuickbarSlot_C_UpdateItemBoxSize) == 0x000070, "Wrong size on QuickbarSlot_C_UpdateItemBoxSize");
static_assert(offsetof(QuickbarSlot_C_UpdateItemBoxSize, Item_Type_To_Show) == 0x000000, "Member 'QuickbarSlot_C_UpdateItemBoxSize::Item_Type_To_Show' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateItemBoxSize, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'QuickbarSlot_C_UpdateItemBoxSize::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateItemBoxSize, CallFunc_IsValid_ReturnValue1) == 0x000002, "Member 'QuickbarSlot_C_UpdateItemBoxSize::CallFunc_IsValid_ReturnValue1' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateItemBoxSize, CallFunc_GetType_ReturnValue) == 0x000003, "Member 'QuickbarSlot_C_UpdateItemBoxSize::CallFunc_GetType_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateItemBoxSize, Temp_bool_Variable) == 0x000004, "Member 'QuickbarSlot_C_UpdateItemBoxSize::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateItemBoxSize, Temp_bool_Variable1) == 0x000005, "Member 'QuickbarSlot_C_UpdateItemBoxSize::Temp_bool_Variable1' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateItemBoxSize, CallFunc_ShouldUseNewItemCards_ReturnValue) == 0x000006, "Member 'QuickbarSlot_C_UpdateItemBoxSize::CallFunc_ShouldUseNewItemCards_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateItemBoxSize, CallFunc_GetCardSize_ReturnValue) == 0x000007, "Member 'QuickbarSlot_C_UpdateItemBoxSize::CallFunc_GetCardSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateItemBoxSize, CallFunc_SlotAsOverlaySlot_ReturnValue) == 0x000008, "Member 'QuickbarSlot_C_UpdateItemBoxSize::CallFunc_SlotAsOverlaySlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateItemBoxSize, K2Node_Select_Default) == 0x000010, "Member 'QuickbarSlot_C_UpdateItemBoxSize::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateItemBoxSize, CallFunc_GetCardDimensions_ReturnValue) == 0x000014, "Member 'QuickbarSlot_C_UpdateItemBoxSize::CallFunc_GetCardDimensions_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateItemBoxSize, CallFunc_Add_FloatFloat_ReturnValue) == 0x00001C, "Member 'QuickbarSlot_C_UpdateItemBoxSize::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateItemBoxSize, CallFunc_BreakVector2D_X) == 0x000020, "Member 'QuickbarSlot_C_UpdateItemBoxSize::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateItemBoxSize, CallFunc_BreakVector2D_Y) == 0x000024, "Member 'QuickbarSlot_C_UpdateItemBoxSize::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateItemBoxSize, CallFunc_Add_FloatFloat_ReturnValue1) == 0x000028, "Member 'QuickbarSlot_C_UpdateItemBoxSize::CallFunc_Add_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateItemBoxSize, CallFunc_Add_FloatFloat_ReturnValue12) == 0x00002C, "Member 'QuickbarSlot_C_UpdateItemBoxSize::CallFunc_Add_FloatFloat_ReturnValue12' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateItemBoxSize, CallFunc_Add_FloatFloat_ReturnValue123) == 0x000030, "Member 'QuickbarSlot_C_UpdateItemBoxSize::CallFunc_Add_FloatFloat_ReturnValue123' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateItemBoxSize, CallFunc_GetCardSize_ReturnValue1) == 0x000034, "Member 'QuickbarSlot_C_UpdateItemBoxSize::CallFunc_GetCardSize_ReturnValue1' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateItemBoxSize, CallFunc_SlotAsOverlaySlot_ReturnValue1) == 0x000038, "Member 'QuickbarSlot_C_UpdateItemBoxSize::CallFunc_SlotAsOverlaySlot_ReturnValue1' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateItemBoxSize, K2Node_Select1_Default) == 0x000040, "Member 'QuickbarSlot_C_UpdateItemBoxSize::K2Node_Select1_Default' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateItemBoxSize, CallFunc_GetCardDimensions_ReturnValue1) == 0x000044, "Member 'QuickbarSlot_C_UpdateItemBoxSize::CallFunc_GetCardDimensions_ReturnValue1' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateItemBoxSize, CallFunc_Add_FloatFloat_ReturnValue1234) == 0x00004C, "Member 'QuickbarSlot_C_UpdateItemBoxSize::CallFunc_Add_FloatFloat_ReturnValue1234' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateItemBoxSize, CallFunc_BreakVector2D_X1) == 0x000050, "Member 'QuickbarSlot_C_UpdateItemBoxSize::CallFunc_BreakVector2D_X1' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateItemBoxSize, CallFunc_BreakVector2D_Y1) == 0x000054, "Member 'QuickbarSlot_C_UpdateItemBoxSize::CallFunc_BreakVector2D_Y1' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateItemBoxSize, CallFunc_Add_FloatFloat_ReturnValue12345) == 0x000058, "Member 'QuickbarSlot_C_UpdateItemBoxSize::CallFunc_Add_FloatFloat_ReturnValue12345' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateItemBoxSize, CallFunc_Add_FloatFloat_ReturnValue123456) == 0x00005C, "Member 'QuickbarSlot_C_UpdateItemBoxSize::CallFunc_Add_FloatFloat_ReturnValue123456' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateItemBoxSize, CallFunc_Add_FloatFloat_ReturnValue1234567) == 0x000060, "Member 'QuickbarSlot_C_UpdateItemBoxSize::CallFunc_Add_FloatFloat_ReturnValue1234567' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateItemBoxSize, CallFunc_Lerp_ReturnValue) == 0x000064, "Member 'QuickbarSlot_C_UpdateItemBoxSize::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateItemBoxSize, CallFunc_Lerp_ReturnValue1) == 0x000068, "Member 'QuickbarSlot_C_UpdateItemBoxSize::CallFunc_Lerp_ReturnValue1' has a wrong offset!");

// Function QuickbarSlot.QuickbarSlot_C.InitializeInvalidation
// 0x0010 (0x0010 - 0x0000)
struct QuickbarSlot_C_InitializeInvalidation final
{
public:
	class UFortGlobalUIContext*                   CallFunc_GetContext_ReturnValue;                   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFortUIFeatureState                           CallFunc_GetFeatureState_OutFeatureState;          // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFortUIFeatureStateReason                     CallFunc_GetFeatureState_OutReason;                // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(QuickbarSlot_C_InitializeInvalidation) == 0x000008, "Wrong alignment on QuickbarSlot_C_InitializeInvalidation");
static_assert(sizeof(QuickbarSlot_C_InitializeInvalidation) == 0x000010, "Wrong size on QuickbarSlot_C_InitializeInvalidation");
static_assert(offsetof(QuickbarSlot_C_InitializeInvalidation, CallFunc_GetContext_ReturnValue) == 0x000000, "Member 'QuickbarSlot_C_InitializeInvalidation::CallFunc_GetContext_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_InitializeInvalidation, CallFunc_GetFeatureState_OutFeatureState) == 0x000008, "Member 'QuickbarSlot_C_InitializeInvalidation::CallFunc_GetFeatureState_OutFeatureState' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_InitializeInvalidation, CallFunc_GetFeatureState_OutReason) == 0x000009, "Member 'QuickbarSlot_C_InitializeInvalidation::CallFunc_GetFeatureState_OutReason' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_InitializeInvalidation, K2Node_SwitchEnum_CmpSuccess) == 0x00000A, "Member 'QuickbarSlot_C_InitializeInvalidation::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

}

