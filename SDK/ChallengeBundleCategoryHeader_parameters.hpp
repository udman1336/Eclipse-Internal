#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ChallengeBundleCategoryHeader

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "UMG_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function ChallengeBundleCategoryHeader.ChallengeBundleCategoryHeader_C.ExecuteUbergraph_ChallengeBundleCategoryHeader
// 0x0008 (0x0008 - 0x0000)
struct ChallengeBundleCategoryHeader_C_ExecuteUbergraph_ChallengeBundleCategoryHeader final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ChallengeBundleCategoryHeader_C_ExecuteUbergraph_ChallengeBundleCategoryHeader) == 0x000004, "Wrong alignment on ChallengeBundleCategoryHeader_C_ExecuteUbergraph_ChallengeBundleCategoryHeader");
static_assert(sizeof(ChallengeBundleCategoryHeader_C_ExecuteUbergraph_ChallengeBundleCategoryHeader) == 0x000008, "Wrong size on ChallengeBundleCategoryHeader_C_ExecuteUbergraph_ChallengeBundleCategoryHeader");
static_assert(offsetof(ChallengeBundleCategoryHeader_C_ExecuteUbergraph_ChallengeBundleCategoryHeader, EntryPoint) == 0x000000, "Member 'ChallengeBundleCategoryHeader_C_ExecuteUbergraph_ChallengeBundleCategoryHeader::EntryPoint' has a wrong offset!");
static_assert(offsetof(ChallengeBundleCategoryHeader_C_ExecuteUbergraph_ChallengeBundleCategoryHeader, K2Node_Event_IsDesignTime) == 0x000004, "Member 'ChallengeBundleCategoryHeader_C_ExecuteUbergraph_ChallengeBundleCategoryHeader::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function ChallengeBundleCategoryHeader.ChallengeBundleCategoryHeader_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct ChallengeBundleCategoryHeader_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ChallengeBundleCategoryHeader_C_PreConstruct) == 0x000001, "Wrong alignment on ChallengeBundleCategoryHeader_C_PreConstruct");
static_assert(sizeof(ChallengeBundleCategoryHeader_C_PreConstruct) == 0x000001, "Wrong size on ChallengeBundleCategoryHeader_C_PreConstruct");
static_assert(offsetof(ChallengeBundleCategoryHeader_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'ChallengeBundleCategoryHeader_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function ChallengeBundleCategoryHeader.ChallengeBundleCategoryHeader_C.UpdateBundle
// 0x01A0 (0x01A0 - 0x0000)
struct ChallengeBundleCategoryHeader_C_UpdateBundle final
{
public:
	class UFortMcpContext*                        CallFunc_GetContext_ReturnValue;                   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortMcpProfileAthena*                  CallFunc_GetAthenaProfile_ReturnValue;             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasPurchasedSeasonBook_ReturnValue;       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortChallengeBundleInfo*               CallFunc_GetChallengeBundleInfo_ReturnValue;       // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortChallengeBundleItemDefinition*     CallFunc_GetBundleDefinition_ReturnValue;          // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EChallengeBundleVisualStyle                   CallFunc_GetVisualStyle_ReturnValue;               // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortChallengeBundleCategoryInfo*       CallFunc_GetOwningBundleCategoryInfo_ReturnValue;  // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortChallengeBundleScheduleDefinition* CallFunc_GetFirstScheduleDefinition_ReturnValue;   // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetCategoryName_ReturnValue;              // 0x0048(0x0018)()
	class FText                                   CallFunc_TextToUpper_ReturnValue;                  // 0x0060(0x0018)()
	ESlateVisibility                              Temp_byte_Variable1;                               // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            K2Node_MakeStruct_SlateBrush;                      // 0x0080(0x0088)()
	bool                                          Temp_bool_Variable;                                // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_109[0x7];                                      // 0x0109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            K2Node_MakeStruct_SlateBrush1;                     // 0x0110(0x0088)()
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ChallengeBundleCategoryHeader_C_UpdateBundle) == 0x000008, "Wrong alignment on ChallengeBundleCategoryHeader_C_UpdateBundle");
static_assert(sizeof(ChallengeBundleCategoryHeader_C_UpdateBundle) == 0x0001A0, "Wrong size on ChallengeBundleCategoryHeader_C_UpdateBundle");
static_assert(offsetof(ChallengeBundleCategoryHeader_C_UpdateBundle, CallFunc_GetContext_ReturnValue) == 0x000000, "Member 'ChallengeBundleCategoryHeader_C_UpdateBundle::CallFunc_GetContext_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundleCategoryHeader_C_UpdateBundle, Temp_byte_Variable) == 0x000008, "Member 'ChallengeBundleCategoryHeader_C_UpdateBundle::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ChallengeBundleCategoryHeader_C_UpdateBundle, CallFunc_GetAthenaProfile_ReturnValue) == 0x000010, "Member 'ChallengeBundleCategoryHeader_C_UpdateBundle::CallFunc_GetAthenaProfile_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundleCategoryHeader_C_UpdateBundle, CallFunc_HasPurchasedSeasonBook_ReturnValue) == 0x000018, "Member 'ChallengeBundleCategoryHeader_C_UpdateBundle::CallFunc_HasPurchasedSeasonBook_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundleCategoryHeader_C_UpdateBundle, CallFunc_GetChallengeBundleInfo_ReturnValue) == 0x000020, "Member 'ChallengeBundleCategoryHeader_C_UpdateBundle::CallFunc_GetChallengeBundleInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundleCategoryHeader_C_UpdateBundle, CallFunc_GetBundleDefinition_ReturnValue) == 0x000028, "Member 'ChallengeBundleCategoryHeader_C_UpdateBundle::CallFunc_GetBundleDefinition_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundleCategoryHeader_C_UpdateBundle, CallFunc_GetVisualStyle_ReturnValue) == 0x000030, "Member 'ChallengeBundleCategoryHeader_C_UpdateBundle::CallFunc_GetVisualStyle_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundleCategoryHeader_C_UpdateBundle, K2Node_SwitchEnum_CmpSuccess) == 0x000031, "Member 'ChallengeBundleCategoryHeader_C_UpdateBundle::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(ChallengeBundleCategoryHeader_C_UpdateBundle, CallFunc_GetOwningBundleCategoryInfo_ReturnValue) == 0x000038, "Member 'ChallengeBundleCategoryHeader_C_UpdateBundle::CallFunc_GetOwningBundleCategoryInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundleCategoryHeader_C_UpdateBundle, CallFunc_GetFirstScheduleDefinition_ReturnValue) == 0x000040, "Member 'ChallengeBundleCategoryHeader_C_UpdateBundle::CallFunc_GetFirstScheduleDefinition_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundleCategoryHeader_C_UpdateBundle, CallFunc_GetCategoryName_ReturnValue) == 0x000048, "Member 'ChallengeBundleCategoryHeader_C_UpdateBundle::CallFunc_GetCategoryName_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundleCategoryHeader_C_UpdateBundle, CallFunc_TextToUpper_ReturnValue) == 0x000060, "Member 'ChallengeBundleCategoryHeader_C_UpdateBundle::CallFunc_TextToUpper_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundleCategoryHeader_C_UpdateBundle, Temp_byte_Variable1) == 0x000078, "Member 'ChallengeBundleCategoryHeader_C_UpdateBundle::Temp_byte_Variable1' has a wrong offset!");
static_assert(offsetof(ChallengeBundleCategoryHeader_C_UpdateBundle, K2Node_MakeStruct_SlateBrush) == 0x000080, "Member 'ChallengeBundleCategoryHeader_C_UpdateBundle::K2Node_MakeStruct_SlateBrush' has a wrong offset!");
static_assert(offsetof(ChallengeBundleCategoryHeader_C_UpdateBundle, Temp_bool_Variable) == 0x000108, "Member 'ChallengeBundleCategoryHeader_C_UpdateBundle::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ChallengeBundleCategoryHeader_C_UpdateBundle, K2Node_MakeStruct_SlateBrush1) == 0x000110, "Member 'ChallengeBundleCategoryHeader_C_UpdateBundle::K2Node_MakeStruct_SlateBrush1' has a wrong offset!");
static_assert(offsetof(ChallengeBundleCategoryHeader_C_UpdateBundle, K2Node_Select_Default) == 0x000198, "Member 'ChallengeBundleCategoryHeader_C_UpdateBundle::K2Node_Select_Default' has a wrong offset!");

}

